package kr.ac.kaist.ires.model

import kr.ac.kaist.ires.algorithm._
import kr.ac.kaist.ires.ModelTrait
import kr.ac.kaist.ires.ir._
import kr.ac.kaist.ires.util.Useful._

object Model extends ModelTrait {
  lazy val consts: List[String] = List(
    "BigInt",
    "BigInt64",
    "BigUint64",
    "ConstructorMethod",
    "Float32",
    "Float64",
    "Fulfill",
    "Init",
    "Int16",
    "Int32",
    "Int8",
    "NonConstructorMethod",
    "Number",
    "Reject",
    "SeqCst",
    "Uint16",
    "Uint32",
    "Uint8",
    "Uint8C",
    "Unordered",
    "assignment",
    "async",
    "asyncDASHiterate",
    "asyncGenerator",
    "awaitingDASHreturn",
    "base",
    "break",
    "completed",
    "continue",
    "derived",
    "empty",
    "end",
    "enumerate",
    "evaluated",
    "evaluating",
    "executing",
    "failure",
    "frozen",
    "fulfilled",
    "generator",
    "global",
    "initialized",
    "invalid",
    "iterate",
    "key",
    "keyPLUSvalue",
    "lexical",
    "lexicalBinding",
    "lexicalDASHthis",
    "linked",
    "linking",
    "nonDASHgenerator",
    "nonDASHlexicalDASHthis",
    "normal",
    "notDASHmatched",
    "number",
    "pending",
    "rejected",
    "return",
    "sealed",
    "simple",
    "start",
    "startPLUSend",
    "strict",
    "string",
    "suspendedStart",
    "suspendedYield",
    "symbol",
    "sync",
    "throw",
    "uninitialized",
    "unlinked",
    "unresolvable",
    "value",
    "varBinding",
  )
  lazy val intrinsics: List[String] = List(
    "AggregateError",
    "Array",
    "ArrayBuffer",
    "ArrayIteratorPrototype",
    "Array_prototype",
    "Array_prototype_values",
    "AsyncFromSyncIteratorPrototype",
    "AsyncFunction",
    "AsyncFunction_prototype",
    "AsyncGeneratorFunction",
    "AsyncGeneratorFunction_prototype",
    "AsyncGeneratorFunction_prototype_prototype",
    "AsyncIteratorPrototype",
    "Atomics",
    "BigInt",
    "BigInt64Array",
    "BigInt_prototype",
    "BigUint64Array",
    "Boolean",
    "Boolean_prototype",
    "DataView",
    "Date",
    "Error",
    "EvalError",
    "FinalizationRegistry",
    "Float32Array",
    "Float64Array",
    "ForInIteratorPrototype",
    "Function",
    "Function_prototype",
    "GeneratorFunction",
    "GeneratorFunction_prototype",
    "GeneratorFunction_prototype_prototype",
    "GeneratorFunction_prototype_prototype_next",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "IteratorPrototype",
    "JSON",
    "Map",
    "MapIteratorPrototype",
    "Math",
    "Number",
    "Number_prototype",
    "Object",
    "Object_prototype",
    "Object_prototype_toString",
    "Promise",
    "Proxy",
    "RangeError",
    "ReferenceError",
    "Reflect",
    "RegExp",
    "RegExpStringIteratorPrototype",
    "RegExp_prototype",
    "Set",
    "SetIteratorPrototype",
    "SharedArrayBuffer",
    "String",
    "StringIteratorPrototype",
    "String_prototype",
    "Symbol",
    "Symbol_prototype",
    "SyntaxError",
    "ThrowTypeError",
    "TypeError",
    "TypedArray",
    "URIError",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "WeakMap",
    "WeakRef",
    "WeakSet",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
  )
  lazy val symbols: List[String] = List(
    "REGISTRY",
    "asyncIterator",
    "hasInstance",
    "isConcatSpreadable",
    "iterator",
    "match",
    "matchAll",
    "replace",
    "search",
    "species",
    "split",
    "toPrimitive",
    "toStringTag",
    "unscopables",
  )
  lazy val algos: Map[String, Algo] = Map(
    "%ForInIteratorPrototype%.next" -> `AL::%ForInIteratorPrototype%.next`,
    "%ThrowTypeError%" -> `AL::%ThrowTypeError%`,
    "%TypedArray%.prototype.sort" -> `AL::%TypedArray%.prototype.sort`,
    "AbstractEqualityComparison" -> `AL::AbstractEqualityComparison`,
    "AbstractRelationalComparison" -> `AL::AbstractRelationalComparison`,
    "AddEntriesFromIterable" -> `AL::AddEntriesFromIterable`,
    "AddRestrictedFunctionProperties" -> `AL::AddRestrictedFunctionProperties`,
    "AddToKeptObjects" -> `AL::AddToKeptObjects`,
    "AddWaiter" -> `AL::AddWaiter`,
    "AdditiveExpression[1,0].AssignmentTargetType" -> `AL::AdditiveExpression[1,0].AssignmentTargetType`,
    "AdditiveExpression[1,0].Evaluation" -> `AL::AdditiveExpression[1,0].Evaluation`,
    "AdditiveExpression[1,0].HasCallInTailPosition" -> `AL::AdditiveExpression[1,0].HasCallInTailPosition`,
    "AdditiveExpression[1,0].IsFunctionDefinition" -> `AL::AdditiveExpression[1,0].IsFunctionDefinition`,
    "AdditiveExpression[2,0].AssignmentTargetType" -> `AL::AdditiveExpression[2,0].AssignmentTargetType`,
    "AdditiveExpression[2,0].Evaluation" -> `AL::AdditiveExpression[2,0].Evaluation`,
    "AdditiveExpression[2,0].HasCallInTailPosition" -> `AL::AdditiveExpression[2,0].HasCallInTailPosition`,
    "AdditiveExpression[2,0].IsFunctionDefinition" -> `AL::AdditiveExpression[2,0].IsFunctionDefinition`,
    "AdvanceStringIndex" -> `AL::AdvanceStringIndex`,
    "AgentCanSuspend" -> `AL::AgentCanSuspend`,
    "AgentSignifier" -> `AL::AgentSignifier`,
    "AggregateError" -> `AL::AggregateError`,
    "AllocateArrayBuffer" -> `AL::AllocateArrayBuffer`,
    "AllocateSharedArrayBuffer" -> `AL::AllocateSharedArrayBuffer`,
    "AllocateTypedArray" -> `AL::AllocateTypedArray`,
    "AllocateTypedArrayBuffer" -> `AL::AllocateTypedArrayBuffer`,
    "ApplyStringOrNumericBinaryOperator" -> `AL::ApplyStringOrNumericBinaryOperator`,
    "ArgumentList[0,0].ArgumentListEvaluation" -> `AL::ArgumentList[0,0].ArgumentListEvaluation`,
    "ArgumentList[1,0].ArgumentListEvaluation" -> `AL::ArgumentList[1,0].ArgumentListEvaluation`,
    "ArgumentList[2,0].ArgumentListEvaluation" -> `AL::ArgumentList[2,0].ArgumentListEvaluation`,
    "ArgumentList[3,0].ArgumentListEvaluation" -> `AL::ArgumentList[3,0].ArgumentListEvaluation`,
    "ArgumentsExoticObject.DefineOwnProperty" -> `AL::ArgumentsExoticObject.DefineOwnProperty`,
    "ArgumentsExoticObject.Delete" -> `AL::ArgumentsExoticObject.Delete`,
    "ArgumentsExoticObject.Get" -> `AL::ArgumentsExoticObject.Get`,
    "ArgumentsExoticObject.GetOwnProperty" -> `AL::ArgumentsExoticObject.GetOwnProperty`,
    "ArgumentsExoticObject.Set" -> `AL::ArgumentsExoticObject.Set`,
    "Arguments[0,0].ArgumentListEvaluation" -> `AL::Arguments[0,0].ArgumentListEvaluation`,
    "Array" -> `AL::Array`,
    "Array.from" -> `AL::Array.from`,
    "Array.isArray" -> `AL::Array.isArray`,
    "Array.of" -> `AL::Array.of`,
    "Array.prototype.concat" -> `AL::Array.prototype.concat`,
    "Array.prototype.copyWithin" -> `AL::Array.prototype.copyWithin`,
    "Array.prototype.entries" -> `AL::Array.prototype.entries`,
    "Array.prototype.every" -> `AL::Array.prototype.every`,
    "Array.prototype.fill" -> `AL::Array.prototype.fill`,
    "Array.prototype.filter" -> `AL::Array.prototype.filter`,
    "Array.prototype.find" -> `AL::Array.prototype.find`,
    "Array.prototype.findIndex" -> `AL::Array.prototype.findIndex`,
    "Array.prototype.flat" -> `AL::Array.prototype.flat`,
    "Array.prototype.flatMap" -> `AL::Array.prototype.flatMap`,
    "Array.prototype.forEach" -> `AL::Array.prototype.forEach`,
    "Array.prototype.includes" -> `AL::Array.prototype.includes`,
    "Array.prototype.indexOf" -> `AL::Array.prototype.indexOf`,
    "Array.prototype.join" -> `AL::Array.prototype.join`,
    "Array.prototype.keys" -> `AL::Array.prototype.keys`,
    "Array.prototype.lastIndexOf" -> `AL::Array.prototype.lastIndexOf`,
    "Array.prototype.map" -> `AL::Array.prototype.map`,
    "Array.prototype.pop" -> `AL::Array.prototype.pop`,
    "Array.prototype.push" -> `AL::Array.prototype.push`,
    "Array.prototype.reduce" -> `AL::Array.prototype.reduce`,
    "Array.prototype.reduceRight" -> `AL::Array.prototype.reduceRight`,
    "Array.prototype.reverse" -> `AL::Array.prototype.reverse`,
    "Array.prototype.shift" -> `AL::Array.prototype.shift`,
    "Array.prototype.slice" -> `AL::Array.prototype.slice`,
    "Array.prototype.some" -> `AL::Array.prototype.some`,
    "Array.prototype.sort" -> `AL::Array.prototype.sort`,
    "Array.prototype.splice" -> `AL::Array.prototype.splice`,
    "Array.prototype.toLocaleString" -> `AL::Array.prototype.toLocaleString`,
    "Array.prototype.toString" -> `AL::Array.prototype.toString`,
    "Array.prototype.unshift" -> `AL::Array.prototype.unshift`,
    "Array.prototype.values" -> `AL::Array.prototype.values`,
    "Array.prototype[SYMBOL_unscopables]" -> `AL::Array.prototype[SYMBOL_unscopables]`,
    "ArrayAssignmentPattern[0,0].DestructuringAssignmentEvaluation" -> `AL::ArrayAssignmentPattern[0,0].DestructuringAssignmentEvaluation`,
    "ArrayAssignmentPattern[0,2].DestructuringAssignmentEvaluation" -> `AL::ArrayAssignmentPattern[0,2].DestructuringAssignmentEvaluation`,
    "ArrayAssignmentPattern[0,3].DestructuringAssignmentEvaluation" -> `AL::ArrayAssignmentPattern[0,3].DestructuringAssignmentEvaluation`,
    "ArrayAssignmentPattern[1,0].DestructuringAssignmentEvaluation" -> `AL::ArrayAssignmentPattern[1,0].DestructuringAssignmentEvaluation`,
    "ArrayAssignmentPattern[2,3].DestructuringAssignmentEvaluation" -> `AL::ArrayAssignmentPattern[2,3].DestructuringAssignmentEvaluation`,
    "ArrayBindingPattern[0,0].IteratorBindingInitialization" -> `AL::ArrayBindingPattern[0,0].IteratorBindingInitialization`,
    "ArrayBindingPattern[0,2].BoundNames" -> `AL::ArrayBindingPattern[0,2].BoundNames`,
    "ArrayBindingPattern[0,2].ContainsExpression" -> `AL::ArrayBindingPattern[0,2].ContainsExpression`,
    "ArrayBindingPattern[0,2].IteratorBindingInitialization" -> `AL::ArrayBindingPattern[0,2].IteratorBindingInitialization`,
    "ArrayBindingPattern[0,3].BoundNames" -> `AL::ArrayBindingPattern[0,3].BoundNames`,
    "ArrayBindingPattern[0,3].ContainsExpression" -> `AL::ArrayBindingPattern[0,3].ContainsExpression`,
    "ArrayBindingPattern[0,3].IteratorBindingInitialization" -> `AL::ArrayBindingPattern[0,3].IteratorBindingInitialization`,
    "ArrayBindingPattern[2,2].BoundNames" -> `AL::ArrayBindingPattern[2,2].BoundNames`,
    "ArrayBindingPattern[2,2].ContainsExpression" -> `AL::ArrayBindingPattern[2,2].ContainsExpression`,
    "ArrayBindingPattern[2,2].IteratorBindingInitialization" -> `AL::ArrayBindingPattern[2,2].IteratorBindingInitialization`,
    "ArrayBindingPattern[2,3].BoundNames" -> `AL::ArrayBindingPattern[2,3].BoundNames`,
    "ArrayBindingPattern[2,3].ContainsExpression" -> `AL::ArrayBindingPattern[2,3].ContainsExpression`,
    "ArrayBindingPattern[2,3].IteratorBindingInitialization" -> `AL::ArrayBindingPattern[2,3].IteratorBindingInitialization`,
    "ArrayBuffer" -> `AL::ArrayBuffer`,
    "ArrayBuffer.isView" -> `AL::ArrayBuffer.isView`,
    "ArrayBuffer.prototype.slice" -> `AL::ArrayBuffer.prototype.slice`,
    "ArrayCreate" -> `AL::ArrayCreate`,
    "ArrayExoticObject.DefineOwnProperty" -> `AL::ArrayExoticObject.DefineOwnProperty`,
    "ArrayLiteral[0,1].Evaluation" -> `AL::ArrayLiteral[0,1].Evaluation`,
    "ArrayLiteral[1,0].Evaluation" -> `AL::ArrayLiteral[1,0].Evaluation`,
    "ArrayLiteral[2,1].Evaluation" -> `AL::ArrayLiteral[2,1].Evaluation`,
    "ArraySetLength" -> `AL::ArraySetLength`,
    "ArraySpeciesCreate" -> `AL::ArraySpeciesCreate`,
    "ArrowFunction[0,0].Contains" -> `AL::ArrowFunction[0,0].Contains`,
    "ArrowFunction[0,0].EarlyErrors" -> `AL::ArrowFunction[0,0].EarlyErrors`,
    "ArrowFunction[0,0].Evaluation" -> `AL::ArrowFunction[0,0].Evaluation`,
    "ArrowFunction[0,0].HasName" -> `AL::ArrowFunction[0,0].HasName`,
    "ArrowFunction[0,0].InstantiateArrowFunctionExpression" -> `AL::ArrowFunction[0,0].InstantiateArrowFunctionExpression`,
    "ArrowFunction[0,0].NamedEvaluation" -> `AL::ArrowFunction[0,0].NamedEvaluation`,
    "ArrowParameters[0,0].ContainsExpression" -> `AL::ArrowParameters[0,0].ContainsExpression`,
    "ArrowParameters[0,0].CoveredFormalsList" -> `AL::ArrowParameters[0,0].CoveredFormalsList`,
    "ArrowParameters[0,0].ExpectedArgumentCount" -> `AL::ArrowParameters[0,0].ExpectedArgumentCount`,
    "ArrowParameters[0,0].IsSimpleParameterList" -> `AL::ArrowParameters[0,0].IsSimpleParameterList`,
    "ArrowParameters[0,0].IteratorBindingInitialization" -> `AL::ArrowParameters[0,0].IteratorBindingInitialization`,
    "ArrowParameters[1,0].BoundNames" -> `AL::ArrowParameters[1,0].BoundNames`,
    "ArrowParameters[1,0].Contains" -> `AL::ArrowParameters[1,0].Contains`,
    "ArrowParameters[1,0].ContainsExpression" -> `AL::ArrowParameters[1,0].ContainsExpression`,
    "ArrowParameters[1,0].EarlyErrors" -> `AL::ArrowParameters[1,0].EarlyErrors`,
    "ArrowParameters[1,0].ExpectedArgumentCount" -> `AL::ArrowParameters[1,0].ExpectedArgumentCount`,
    "ArrowParameters[1,0].IsSimpleParameterList" -> `AL::ArrowParameters[1,0].IsSimpleParameterList`,
    "ArrowParameters[1,0].IteratorBindingInitialization" -> `AL::ArrowParameters[1,0].IteratorBindingInitialization`,
    "AssignmentElementList[0,0].IteratorDestructuringAssignmentEvaluation" -> `AL::AssignmentElementList[0,0].IteratorDestructuringAssignmentEvaluation`,
    "AssignmentElementList[1,0].IteratorDestructuringAssignmentEvaluation" -> `AL::AssignmentElementList[1,0].IteratorDestructuringAssignmentEvaluation`,
    "AssignmentElement[0,1].IteratorDestructuringAssignmentEvaluation" -> `AL::AssignmentElement[0,1].IteratorDestructuringAssignmentEvaluation`,
    "AssignmentElement[0,1].KeyedDestructuringAssignmentEvaluation" -> `AL::AssignmentElement[0,1].KeyedDestructuringAssignmentEvaluation`,
    "AssignmentElisionElement[0,0].IteratorDestructuringAssignmentEvaluation" -> `AL::AssignmentElisionElement[0,0].IteratorDestructuringAssignmentEvaluation`,
    "AssignmentElisionElement[0,1].IteratorDestructuringAssignmentEvaluation" -> `AL::AssignmentElisionElement[0,1].IteratorDestructuringAssignmentEvaluation`,
    "AssignmentExpression[1,0].AssignmentTargetType" -> `AL::AssignmentExpression[1,0].AssignmentTargetType`,
    "AssignmentExpression[1,0].HasCallInTailPosition" -> `AL::AssignmentExpression[1,0].HasCallInTailPosition`,
    "AssignmentExpression[1,0].IsFunctionDefinition" -> `AL::AssignmentExpression[1,0].IsFunctionDefinition`,
    "AssignmentExpression[2,0].AssignmentTargetType" -> `AL::AssignmentExpression[2,0].AssignmentTargetType`,
    "AssignmentExpression[2,0].HasCallInTailPosition" -> `AL::AssignmentExpression[2,0].HasCallInTailPosition`,
    "AssignmentExpression[2,0].IsFunctionDefinition" -> `AL::AssignmentExpression[2,0].IsFunctionDefinition`,
    "AssignmentExpression[3,0].AssignmentTargetType" -> `AL::AssignmentExpression[3,0].AssignmentTargetType`,
    "AssignmentExpression[3,0].HasCallInTailPosition" -> `AL::AssignmentExpression[3,0].HasCallInTailPosition`,
    "AssignmentExpression[3,0].IsFunctionDefinition" -> `AL::AssignmentExpression[3,0].IsFunctionDefinition`,
    "AssignmentExpression[4,0].AssignmentTargetType" -> `AL::AssignmentExpression[4,0].AssignmentTargetType`,
    "AssignmentExpression[4,0].Evaluation" -> `AL::AssignmentExpression[4,0].Evaluation`,
    "AssignmentExpression[4,0].HasCallInTailPosition" -> `AL::AssignmentExpression[4,0].HasCallInTailPosition`,
    "AssignmentExpression[4,0].IsFunctionDefinition" -> `AL::AssignmentExpression[4,0].IsFunctionDefinition`,
    "AssignmentExpression[5,0].AssignmentTargetType" -> `AL::AssignmentExpression[5,0].AssignmentTargetType`,
    "AssignmentExpression[5,0].EarlyErrors" -> `AL::AssignmentExpression[5,0].EarlyErrors`,
    "AssignmentExpression[5,0].Evaluation" -> `AL::AssignmentExpression[5,0].Evaluation`,
    "AssignmentExpression[5,0].HasCallInTailPosition" -> `AL::AssignmentExpression[5,0].HasCallInTailPosition`,
    "AssignmentExpression[5,0].IsFunctionDefinition" -> `AL::AssignmentExpression[5,0].IsFunctionDefinition`,
    "AssignmentExpression[6,0].AssignmentTargetType" -> `AL::AssignmentExpression[6,0].AssignmentTargetType`,
    "AssignmentExpression[6,0].EarlyErrors" -> `AL::AssignmentExpression[6,0].EarlyErrors`,
    "AssignmentExpression[6,0].Evaluation" -> `AL::AssignmentExpression[6,0].Evaluation`,
    "AssignmentExpression[6,0].HasCallInTailPosition" -> `AL::AssignmentExpression[6,0].HasCallInTailPosition`,
    "AssignmentExpression[6,0].IsFunctionDefinition" -> `AL::AssignmentExpression[6,0].IsFunctionDefinition`,
    "AssignmentExpression[7,0].AssignmentTargetType" -> `AL::AssignmentExpression[7,0].AssignmentTargetType`,
    "AssignmentExpression[7,0].EarlyErrors" -> `AL::AssignmentExpression[7,0].EarlyErrors`,
    "AssignmentExpression[7,0].Evaluation" -> `AL::AssignmentExpression[7,0].Evaluation`,
    "AssignmentExpression[7,0].HasCallInTailPosition" -> `AL::AssignmentExpression[7,0].HasCallInTailPosition`,
    "AssignmentExpression[7,0].IsFunctionDefinition" -> `AL::AssignmentExpression[7,0].IsFunctionDefinition`,
    "AssignmentExpression[8,0].AssignmentTargetType" -> `AL::AssignmentExpression[8,0].AssignmentTargetType`,
    "AssignmentExpression[8,0].EarlyErrors" -> `AL::AssignmentExpression[8,0].EarlyErrors`,
    "AssignmentExpression[8,0].Evaluation" -> `AL::AssignmentExpression[8,0].Evaluation`,
    "AssignmentExpression[8,0].HasCallInTailPosition" -> `AL::AssignmentExpression[8,0].HasCallInTailPosition`,
    "AssignmentExpression[8,0].IsFunctionDefinition" -> `AL::AssignmentExpression[8,0].IsFunctionDefinition`,
    "AssignmentPropertyList[1,0].PropertyDestructuringAssignmentEvaluation" -> `AL::AssignmentPropertyList[1,0].PropertyDestructuringAssignmentEvaluation`,
    "AssignmentProperty[0,1].EarlyErrors" -> `AL::AssignmentProperty[0,1].EarlyErrors`,
    "AssignmentProperty[0,1].PropertyDestructuringAssignmentEvaluation" -> `AL::AssignmentProperty[0,1].PropertyDestructuringAssignmentEvaluation`,
    "AssignmentProperty[1,0].PropertyDestructuringAssignmentEvaluation" -> `AL::AssignmentProperty[1,0].PropertyDestructuringAssignmentEvaluation`,
    "AssignmentRestElement[0,0].IteratorDestructuringAssignmentEvaluation" -> `AL::AssignmentRestElement[0,0].IteratorDestructuringAssignmentEvaluation`,
    "AssignmentRestProperty[0,0].EarlyErrors" -> `AL::AssignmentRestProperty[0,0].EarlyErrors`,
    "AssignmentRestProperty[0,0].RestDestructuringAssignmentEvaluation" -> `AL::AssignmentRestProperty[0,0].RestDestructuringAssignmentEvaluation`,
    "AsyncArrowBindingIdentifier[0,0].ContainsExpression" -> `AL::AsyncArrowBindingIdentifier[0,0].ContainsExpression`,
    "AsyncArrowBindingIdentifier[0,0].ExpectedArgumentCount" -> `AL::AsyncArrowBindingIdentifier[0,0].ExpectedArgumentCount`,
    "AsyncArrowBindingIdentifier[0,0].IsSimpleParameterList" -> `AL::AsyncArrowBindingIdentifier[0,0].IsSimpleParameterList`,
    "AsyncArrowBindingIdentifier[0,0].IteratorBindingInitialization" -> `AL::AsyncArrowBindingIdentifier[0,0].IteratorBindingInitialization`,
    "AsyncArrowFunction[0,0].Contains" -> `AL::AsyncArrowFunction[0,0].Contains`,
    "AsyncArrowFunction[0,0].EarlyErrors" -> `AL::AsyncArrowFunction[0,0].EarlyErrors`,
    "AsyncArrowFunction[0,0].Evaluation" -> `AL::AsyncArrowFunction[0,0].Evaluation`,
    "AsyncArrowFunction[0,0].HasName" -> `AL::AsyncArrowFunction[0,0].HasName`,
    "AsyncArrowFunction[0,0].InstantiateAsyncArrowFunctionExpression" -> `AL::AsyncArrowFunction[0,0].InstantiateAsyncArrowFunctionExpression`,
    "AsyncArrowFunction[0,0].NamedEvaluation" -> `AL::AsyncArrowFunction[0,0].NamedEvaluation`,
    "AsyncArrowFunction[1,0].Contains" -> `AL::AsyncArrowFunction[1,0].Contains`,
    "AsyncArrowFunction[1,0].EarlyErrors" -> `AL::AsyncArrowFunction[1,0].EarlyErrors`,
    "AsyncArrowFunction[1,0].Evaluation" -> `AL::AsyncArrowFunction[1,0].Evaluation`,
    "AsyncArrowFunction[1,0].HasName" -> `AL::AsyncArrowFunction[1,0].HasName`,
    "AsyncArrowFunction[1,0].InstantiateAsyncArrowFunctionExpression" -> `AL::AsyncArrowFunction[1,0].InstantiateAsyncArrowFunctionExpression`,
    "AsyncArrowFunction[1,0].NamedEvaluation" -> `AL::AsyncArrowFunction[1,0].NamedEvaluation`,
    "AsyncConciseBody[0,0].AsyncConciseBodyContainsUseStrict" -> `AL::AsyncConciseBody[0,0].AsyncConciseBodyContainsUseStrict`,
    "AsyncConciseBody[0,0].EvaluateAsyncConciseBody" -> `AL::AsyncConciseBody[0,0].EvaluateAsyncConciseBody`,
    "AsyncConciseBody[0,0].EvaluateBody" -> `AL::AsyncConciseBody[0,0].EvaluateBody`,
    "AsyncConciseBody[0,0].LexicallyDeclaredNames" -> `AL::AsyncConciseBody[0,0].LexicallyDeclaredNames`,
    "AsyncConciseBody[0,0].LexicallyScopedDeclarations" -> `AL::AsyncConciseBody[0,0].LexicallyScopedDeclarations`,
    "AsyncConciseBody[0,0].VarDeclaredNames" -> `AL::AsyncConciseBody[0,0].VarDeclaredNames`,
    "AsyncConciseBody[0,0].VarScopedDeclarations" -> `AL::AsyncConciseBody[0,0].VarScopedDeclarations`,
    "AsyncConciseBody[1,0].AsyncConciseBodyContainsUseStrict" -> `AL::AsyncConciseBody[1,0].AsyncConciseBodyContainsUseStrict`,
    "AsyncFromSyncIteratorContinuation" -> `AL::AsyncFromSyncIteratorContinuation`,
    "AsyncFunction" -> `AL::AsyncFunction`,
    "AsyncFunctionBody[0,0].EvaluateAsyncFunctionBody" -> `AL::AsyncFunctionBody[0,0].EvaluateAsyncFunctionBody`,
    "AsyncFunctionBody[0,0].EvaluateBody" -> `AL::AsyncFunctionBody[0,0].EvaluateBody`,
    "AsyncFunctionDeclaration[0,0].BoundNames" -> `AL::AsyncFunctionDeclaration[0,0].BoundNames`,
    "AsyncFunctionDeclaration[0,0].Contains" -> `AL::AsyncFunctionDeclaration[0,0].Contains`,
    "AsyncFunctionDeclaration[0,0].EarlyErrors" -> `AL::AsyncFunctionDeclaration[0,0].EarlyErrors`,
    "AsyncFunctionDeclaration[0,0].Evaluation" -> `AL::AsyncFunctionDeclaration[0,0].Evaluation`,
    "AsyncFunctionDeclaration[0,0].InstantiateAsyncFunctionObject" -> `AL::AsyncFunctionDeclaration[0,0].InstantiateAsyncFunctionObject`,
    "AsyncFunctionDeclaration[0,0].InstantiateFunctionObject" -> `AL::AsyncFunctionDeclaration[0,0].InstantiateFunctionObject`,
    "AsyncFunctionDeclaration[0,0].IsConstantDeclaration" -> `AL::AsyncFunctionDeclaration[0,0].IsConstantDeclaration`,
    "AsyncFunctionDeclaration[1,0].BoundNames" -> `AL::AsyncFunctionDeclaration[1,0].BoundNames`,
    "AsyncFunctionDeclaration[1,0].Contains" -> `AL::AsyncFunctionDeclaration[1,0].Contains`,
    "AsyncFunctionDeclaration[1,0].EarlyErrors" -> `AL::AsyncFunctionDeclaration[1,0].EarlyErrors`,
    "AsyncFunctionDeclaration[1,0].Evaluation" -> `AL::AsyncFunctionDeclaration[1,0].Evaluation`,
    "AsyncFunctionDeclaration[1,0].InstantiateAsyncFunctionObject" -> `AL::AsyncFunctionDeclaration[1,0].InstantiateAsyncFunctionObject`,
    "AsyncFunctionDeclaration[1,0].InstantiateFunctionObject" -> `AL::AsyncFunctionDeclaration[1,0].InstantiateFunctionObject`,
    "AsyncFunctionDeclaration[1,0].IsConstantDeclaration" -> `AL::AsyncFunctionDeclaration[1,0].IsConstantDeclaration`,
    "AsyncFunctionExpression[0,0].HasName" -> `AL::AsyncFunctionExpression[0,0].HasName`,
    "AsyncFunctionExpression[0,0].InstantiateAsyncFunctionExpression" -> `AL::AsyncFunctionExpression[0,0].InstantiateAsyncFunctionExpression`,
    "AsyncFunctionExpression[0,0].NamedEvaluation" -> `AL::AsyncFunctionExpression[0,0].NamedEvaluation`,
    "AsyncFunctionExpression[0,1].Contains" -> `AL::AsyncFunctionExpression[0,1].Contains`,
    "AsyncFunctionExpression[0,1].EarlyErrors" -> `AL::AsyncFunctionExpression[0,1].EarlyErrors`,
    "AsyncFunctionExpression[0,1].Evaluation" -> `AL::AsyncFunctionExpression[0,1].Evaluation`,
    "AsyncFunctionExpression[0,1].HasName" -> `AL::AsyncFunctionExpression[0,1].HasName`,
    "AsyncFunctionExpression[0,1].InstantiateAsyncFunctionExpression" -> `AL::AsyncFunctionExpression[0,1].InstantiateAsyncFunctionExpression`,
    "AsyncFunctionExpression[0,1].IsFunctionDefinition" -> `AL::AsyncFunctionExpression[0,1].IsFunctionDefinition`,
    "AsyncFunctionStart" -> `AL::AsyncFunctionStart`,
    "AsyncGenerator.prototype.next" -> `AL::AsyncGenerator.prototype.next`,
    "AsyncGenerator.prototype.return" -> `AL::AsyncGenerator.prototype.return`,
    "AsyncGenerator.prototype.throw" -> `AL::AsyncGenerator.prototype.throw`,
    "AsyncGeneratorBody[0,0].EvaluateAsyncGeneratorBody" -> `AL::AsyncGeneratorBody[0,0].EvaluateAsyncGeneratorBody`,
    "AsyncGeneratorBody[0,0].EvaluateBody" -> `AL::AsyncGeneratorBody[0,0].EvaluateBody`,
    "AsyncGeneratorDeclaration[0,0].BoundNames" -> `AL::AsyncGeneratorDeclaration[0,0].BoundNames`,
    "AsyncGeneratorDeclaration[0,0].Contains" -> `AL::AsyncGeneratorDeclaration[0,0].Contains`,
    "AsyncGeneratorDeclaration[0,0].EarlyErrors" -> `AL::AsyncGeneratorDeclaration[0,0].EarlyErrors`,
    "AsyncGeneratorDeclaration[0,0].InstantiateAsyncGeneratorFunctionObject" -> `AL::AsyncGeneratorDeclaration[0,0].InstantiateAsyncGeneratorFunctionObject`,
    "AsyncGeneratorDeclaration[0,0].InstantiateFunctionObject" -> `AL::AsyncGeneratorDeclaration[0,0].InstantiateFunctionObject`,
    "AsyncGeneratorDeclaration[0,0].IsConstantDeclaration" -> `AL::AsyncGeneratorDeclaration[0,0].IsConstantDeclaration`,
    "AsyncGeneratorDeclaration[1,0].BoundNames" -> `AL::AsyncGeneratorDeclaration[1,0].BoundNames`,
    "AsyncGeneratorDeclaration[1,0].Contains" -> `AL::AsyncGeneratorDeclaration[1,0].Contains`,
    "AsyncGeneratorDeclaration[1,0].EarlyErrors" -> `AL::AsyncGeneratorDeclaration[1,0].EarlyErrors`,
    "AsyncGeneratorDeclaration[1,0].InstantiateAsyncGeneratorFunctionObject" -> `AL::AsyncGeneratorDeclaration[1,0].InstantiateAsyncGeneratorFunctionObject`,
    "AsyncGeneratorDeclaration[1,0].InstantiateFunctionObject" -> `AL::AsyncGeneratorDeclaration[1,0].InstantiateFunctionObject`,
    "AsyncGeneratorDeclaration[1,0].IsConstantDeclaration" -> `AL::AsyncGeneratorDeclaration[1,0].IsConstantDeclaration`,
    "AsyncGeneratorEnqueue" -> `AL::AsyncGeneratorEnqueue`,
    "AsyncGeneratorExpression[0,0].HasName" -> `AL::AsyncGeneratorExpression[0,0].HasName`,
    "AsyncGeneratorExpression[0,0].InstantiateAsyncGeneratorFunctionExpression" -> `AL::AsyncGeneratorExpression[0,0].InstantiateAsyncGeneratorFunctionExpression`,
    "AsyncGeneratorExpression[0,0].NamedEvaluation" -> `AL::AsyncGeneratorExpression[0,0].NamedEvaluation`,
    "AsyncGeneratorExpression[0,1].Contains" -> `AL::AsyncGeneratorExpression[0,1].Contains`,
    "AsyncGeneratorExpression[0,1].EarlyErrors" -> `AL::AsyncGeneratorExpression[0,1].EarlyErrors`,
    "AsyncGeneratorExpression[0,1].Evaluation" -> `AL::AsyncGeneratorExpression[0,1].Evaluation`,
    "AsyncGeneratorExpression[0,1].HasName" -> `AL::AsyncGeneratorExpression[0,1].HasName`,
    "AsyncGeneratorExpression[0,1].InstantiateAsyncGeneratorFunctionExpression" -> `AL::AsyncGeneratorExpression[0,1].InstantiateAsyncGeneratorFunctionExpression`,
    "AsyncGeneratorExpression[0,1].IsFunctionDefinition" -> `AL::AsyncGeneratorExpression[0,1].IsFunctionDefinition`,
    "AsyncGeneratorFunction" -> `AL::AsyncGeneratorFunction`,
    "AsyncGeneratorMethod[0,0].ComputedPropertyContains" -> `AL::AsyncGeneratorMethod[0,0].ComputedPropertyContains`,
    "AsyncGeneratorMethod[0,0].EarlyErrors" -> `AL::AsyncGeneratorMethod[0,0].EarlyErrors`,
    "AsyncGeneratorMethod[0,0].HasDirectSuper" -> `AL::AsyncGeneratorMethod[0,0].HasDirectSuper`,
    "AsyncGeneratorMethod[0,0].MethodDefinitionEvaluation" -> `AL::AsyncGeneratorMethod[0,0].MethodDefinitionEvaluation`,
    "AsyncGeneratorMethod[0,0].PropName" -> `AL::AsyncGeneratorMethod[0,0].PropName`,
    "AsyncGeneratorMethod[0,0].PropertyDefinitionEvaluation" -> `AL::AsyncGeneratorMethod[0,0].PropertyDefinitionEvaluation`,
    "AsyncGeneratorReject" -> `AL::AsyncGeneratorReject`,
    "AsyncGeneratorResolve" -> `AL::AsyncGeneratorResolve`,
    "AsyncGeneratorResumeNext" -> `AL::AsyncGeneratorResumeNext`,
    "AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions" -> `AL::AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions`,
    "AsyncGeneratorResumeNextReturnProcessorRejectedFunctions" -> `AL::AsyncGeneratorResumeNextReturnProcessorRejectedFunctions`,
    "AsyncGeneratorStart" -> `AL::AsyncGeneratorStart`,
    "AsyncGeneratorValidate" -> `AL::AsyncGeneratorValidate`,
    "AsyncGeneratorYield" -> `AL::AsyncGeneratorYield`,
    "AsyncIteratorClose" -> `AL::AsyncIteratorClose`,
    "AsyncMethod[0,0].ComputedPropertyContains" -> `AL::AsyncMethod[0,0].ComputedPropertyContains`,
    "AsyncMethod[0,0].EarlyErrors" -> `AL::AsyncMethod[0,0].EarlyErrors`,
    "AsyncMethod[0,0].HasDirectSuper" -> `AL::AsyncMethod[0,0].HasDirectSuper`,
    "AsyncMethod[0,0].MethodDefinitionEvaluation" -> `AL::AsyncMethod[0,0].MethodDefinitionEvaluation`,
    "AsyncMethod[0,0].PropName" -> `AL::AsyncMethod[0,0].PropName`,
    "AsyncMethod[0,0].PropertyDefinitionEvaluation" -> `AL::AsyncMethod[0,0].PropertyDefinitionEvaluation`,
    "AtomicReadModifyWrite" -> `AL::AtomicReadModifyWrite`,
    "Atomics.add" -> `AL::Atomics.add`,
    "Atomics.and" -> `AL::Atomics.and`,
    "Atomics.compareExchange" -> `AL::Atomics.compareExchange`,
    "Atomics.exchange" -> `AL::Atomics.exchange`,
    "Atomics.isLockFree" -> `AL::Atomics.isLockFree`,
    "Atomics.load" -> `AL::Atomics.load`,
    "Atomics.notify" -> `AL::Atomics.notify`,
    "Atomics.or" -> `AL::Atomics.or`,
    "Atomics.store" -> `AL::Atomics.store`,
    "Atomics.sub" -> `AL::Atomics.sub`,
    "Atomics.wait" -> `AL::Atomics.wait`,
    "Atomics.xor" -> `AL::Atomics.xor`,
    "Await" -> `AL::Await`,
    "AwaitExpression[0,0].Evaluation" -> `AL::AwaitExpression[0,0].Evaluation`,
    "AwaitFulfilledFunctions" -> `AL::AwaitFulfilledFunctions`,
    "AwaitRejectedFunctions" -> `AL::AwaitRejectedFunctions`,
    "BackreferenceMatcher" -> `AL::BackreferenceMatcher`,
    "BigInt" -> `AL::BigInt`,
    "BigInt.asIntN" -> `AL::BigInt.asIntN`,
    "BigInt.asUintN" -> `AL::BigInt.asUintN`,
    "BigInt.prototype.toString" -> `AL::BigInt.prototype.toString`,
    "BigInt.prototype.valueOf" -> `AL::BigInt.prototype.valueOf`,
    "BigInt::add" -> `AL::BigInt::add`,
    "BigInt::bitwiseAND" -> `AL::BigInt::bitwiseAND`,
    "BigInt::bitwiseNOT" -> `AL::BigInt::bitwiseNOT`,
    "BigInt::bitwiseOR" -> `AL::BigInt::bitwiseOR`,
    "BigInt::bitwiseXOR" -> `AL::BigInt::bitwiseXOR`,
    "BigInt::divide" -> `AL::BigInt::divide`,
    "BigInt::equal" -> `AL::BigInt::equal`,
    "BigInt::exponentiate" -> `AL::BigInt::exponentiate`,
    "BigInt::leftShift" -> `AL::BigInt::leftShift`,
    "BigInt::lessThan" -> `AL::BigInt::lessThan`,
    "BigInt::multiply" -> `AL::BigInt::multiply`,
    "BigInt::remainder" -> `AL::BigInt::remainder`,
    "BigInt::sameValue" -> `AL::BigInt::sameValue`,
    "BigInt::sameValueZero" -> `AL::BigInt::sameValueZero`,
    "BigInt::signedRightShift" -> `AL::BigInt::signedRightShift`,
    "BigInt::subtract" -> `AL::BigInt::subtract`,
    "BigInt::toString" -> `AL::BigInt::toString`,
    "BigInt::unaryMinus" -> `AL::BigInt::unaryMinus`,
    "BigInt::unsignedRightShift" -> `AL::BigInt::unsignedRightShift`,
    "BigIntBitwiseOp" -> `AL::BigIntBitwiseOp`,
    "BinaryAnd" -> `AL::BinaryAnd`,
    "BinaryOr" -> `AL::BinaryOr`,
    "BinaryXor" -> `AL::BinaryXor`,
    "BindingElementList[1,0].BoundNames" -> `AL::BindingElementList[1,0].BoundNames`,
    "BindingElementList[1,0].ContainsExpression" -> `AL::BindingElementList[1,0].ContainsExpression`,
    "BindingElementList[1,0].IteratorBindingInitialization" -> `AL::BindingElementList[1,0].IteratorBindingInitialization`,
    "BindingElement[1,0].HasInitializer" -> `AL::BindingElement[1,0].HasInitializer`,
    "BindingElement[1,0].IsSimpleParameterList" -> `AL::BindingElement[1,0].IsSimpleParameterList`,
    "BindingElement[1,1].BoundNames" -> `AL::BindingElement[1,1].BoundNames`,
    "BindingElement[1,1].ContainsExpression" -> `AL::BindingElement[1,1].ContainsExpression`,
    "BindingElement[1,1].HasInitializer" -> `AL::BindingElement[1,1].HasInitializer`,
    "BindingElement[1,1].IsSimpleParameterList" -> `AL::BindingElement[1,1].IsSimpleParameterList`,
    "BindingElement[1,1].IteratorBindingInitialization" -> `AL::BindingElement[1,1].IteratorBindingInitialization`,
    "BindingElement[1,1].KeyedBindingInitialization" -> `AL::BindingElement[1,1].KeyedBindingInitialization`,
    "BindingElisionElement[0,1].BoundNames" -> `AL::BindingElisionElement[0,1].BoundNames`,
    "BindingElisionElement[0,1].ContainsExpression" -> `AL::BindingElisionElement[0,1].ContainsExpression`,
    "BindingElisionElement[0,1].IteratorBindingInitialization" -> `AL::BindingElisionElement[0,1].IteratorBindingInitialization`,
    "BindingIdentifier[0,0].BindingInitialization" -> `AL::BindingIdentifier[0,0].BindingInitialization`,
    "BindingIdentifier[0,0].BoundNames" -> `AL::BindingIdentifier[0,0].BoundNames`,
    "BindingIdentifier[0,0].EarlyErrors" -> `AL::BindingIdentifier[0,0].EarlyErrors`,
    "BindingIdentifier[0,0].EarlyErrors" -> `AL::BindingIdentifier[0,0].EarlyErrors`,
    "BindingIdentifier[1,0].BindingInitialization" -> `AL::BindingIdentifier[1,0].BindingInitialization`,
    "BindingIdentifier[1,0].BoundNames" -> `AL::BindingIdentifier[1,0].BoundNames`,
    "BindingIdentifier[1,0].EarlyErrors" -> `AL::BindingIdentifier[1,0].EarlyErrors`,
    "BindingIdentifier[1,0].EarlyErrors" -> `AL::BindingIdentifier[1,0].EarlyErrors`,
    "BindingIdentifier[1,0].StringValue" -> `AL::BindingIdentifier[1,0].StringValue`,
    "BindingIdentifier[2,0].BindingInitialization" -> `AL::BindingIdentifier[2,0].BindingInitialization`,
    "BindingIdentifier[2,0].BoundNames" -> `AL::BindingIdentifier[2,0].BoundNames`,
    "BindingIdentifier[2,0].EarlyErrors" -> `AL::BindingIdentifier[2,0].EarlyErrors`,
    "BindingIdentifier[2,0].EarlyErrors" -> `AL::BindingIdentifier[2,0].EarlyErrors`,
    "BindingIdentifier[2,0].StringValue" -> `AL::BindingIdentifier[2,0].StringValue`,
    "BindingList[1,0].BoundNames" -> `AL::BindingList[1,0].BoundNames`,
    "BindingList[1,0].Evaluation" -> `AL::BindingList[1,0].Evaluation`,
    "BindingPattern[0,0].BindingInitialization" -> `AL::BindingPattern[0,0].BindingInitialization`,
    "BindingPattern[1,0].BindingInitialization" -> `AL::BindingPattern[1,0].BindingInitialization`,
    "BindingPropertyList[1,0].BoundNames" -> `AL::BindingPropertyList[1,0].BoundNames`,
    "BindingPropertyList[1,0].ContainsExpression" -> `AL::BindingPropertyList[1,0].ContainsExpression`,
    "BindingPropertyList[1,0].PropertyBindingInitialization" -> `AL::BindingPropertyList[1,0].PropertyBindingInitialization`,
    "BindingProperty[0,0].PropertyBindingInitialization" -> `AL::BindingProperty[0,0].PropertyBindingInitialization`,
    "BindingProperty[1,0].BoundNames" -> `AL::BindingProperty[1,0].BoundNames`,
    "BindingProperty[1,0].ContainsExpression" -> `AL::BindingProperty[1,0].ContainsExpression`,
    "BindingProperty[1,0].PropertyBindingInitialization" -> `AL::BindingProperty[1,0].PropertyBindingInitialization`,
    "BindingRestElement[0,0].ContainsExpression" -> `AL::BindingRestElement[0,0].ContainsExpression`,
    "BindingRestElement[0,0].IteratorBindingInitialization" -> `AL::BindingRestElement[0,0].IteratorBindingInitialization`,
    "BindingRestElement[1,0].ContainsExpression" -> `AL::BindingRestElement[1,0].ContainsExpression`,
    "BindingRestElement[1,0].IteratorBindingInitialization" -> `AL::BindingRestElement[1,0].IteratorBindingInitialization`,
    "BindingRestProperty[0,0].RestBindingInitialization" -> `AL::BindingRestProperty[0,0].RestBindingInitialization`,
    "BitwiseANDExpression[1,0].AssignmentTargetType" -> `AL::BitwiseANDExpression[1,0].AssignmentTargetType`,
    "BitwiseANDExpression[1,0].Evaluation" -> `AL::BitwiseANDExpression[1,0].Evaluation`,
    "BitwiseANDExpression[1,0].HasCallInTailPosition" -> `AL::BitwiseANDExpression[1,0].HasCallInTailPosition`,
    "BitwiseANDExpression[1,0].IsFunctionDefinition" -> `AL::BitwiseANDExpression[1,0].IsFunctionDefinition`,
    "BitwiseORExpression[1,0].AssignmentTargetType" -> `AL::BitwiseORExpression[1,0].AssignmentTargetType`,
    "BitwiseORExpression[1,0].Evaluation" -> `AL::BitwiseORExpression[1,0].Evaluation`,
    "BitwiseORExpression[1,0].HasCallInTailPosition" -> `AL::BitwiseORExpression[1,0].HasCallInTailPosition`,
    "BitwiseORExpression[1,0].IsFunctionDefinition" -> `AL::BitwiseORExpression[1,0].IsFunctionDefinition`,
    "BitwiseXORExpression[1,0].AssignmentTargetType" -> `AL::BitwiseXORExpression[1,0].AssignmentTargetType`,
    "BitwiseXORExpression[1,0].Evaluation" -> `AL::BitwiseXORExpression[1,0].Evaluation`,
    "BitwiseXORExpression[1,0].HasCallInTailPosition" -> `AL::BitwiseXORExpression[1,0].HasCallInTailPosition`,
    "BitwiseXORExpression[1,0].IsFunctionDefinition" -> `AL::BitwiseXORExpression[1,0].IsFunctionDefinition`,
    "BlockDeclarationInstantiation" -> `AL::BlockDeclarationInstantiation`,
    "Block[0,0].ContainsDuplicateLabels" -> `AL::Block[0,0].ContainsDuplicateLabels`,
    "Block[0,0].ContainsUndefinedBreakTarget" -> `AL::Block[0,0].ContainsUndefinedBreakTarget`,
    "Block[0,0].ContainsUndefinedContinueTarget" -> `AL::Block[0,0].ContainsUndefinedContinueTarget`,
    "Block[0,0].Evaluation" -> `AL::Block[0,0].Evaluation`,
    "Block[0,0].HasCallInTailPosition" -> `AL::Block[0,0].HasCallInTailPosition`,
    "Block[0,0].LexicallyDeclaredNames" -> `AL::Block[0,0].LexicallyDeclaredNames`,
    "Block[0,0].TopLevelLexicallyScopedDeclarations" -> `AL::Block[0,0].TopLevelLexicallyScopedDeclarations`,
    "Block[0,0].TopLevelVarDeclaredNames" -> `AL::Block[0,0].TopLevelVarDeclaredNames`,
    "Block[0,0].TopLevelVarScopedDeclarations" -> `AL::Block[0,0].TopLevelVarScopedDeclarations`,
    "Block[0,0].VarDeclaredNames" -> `AL::Block[0,0].VarDeclaredNames`,
    "Block[0,0].VarScopedDeclarations" -> `AL::Block[0,0].VarScopedDeclarations`,
    "Block[0,1].EarlyErrors" -> `AL::Block[0,1].EarlyErrors`,
    "Block[0,1].Evaluation" -> `AL::Block[0,1].Evaluation`,
    "Boolean" -> `AL::Boolean`,
    "Boolean.prototype.toString" -> `AL::Boolean.prototype.toString`,
    "Boolean.prototype.valueOf" -> `AL::Boolean.prototype.valueOf`,
    "BoundFunctionCreate" -> `AL::BoundFunctionCreate`,
    "BoundFunctionExoticObject.Call" -> `AL::BoundFunctionExoticObject.Call`,
    "BoundFunctionExoticObject.Construct" -> `AL::BoundFunctionExoticObject.Construct`,
    "BreakStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::BreakStatement[0,0].ContainsUndefinedBreakTarget`,
    "BreakStatement[0,0].EarlyErrors" -> `AL::BreakStatement[0,0].EarlyErrors`,
    "BreakStatement[0,0].Evaluation" -> `AL::BreakStatement[0,0].Evaluation`,
    "BreakStatement[1,0].ContainsUndefinedBreakTarget" -> `AL::BreakStatement[1,0].ContainsUndefinedBreakTarget`,
    "BreakStatement[1,0].Evaluation" -> `AL::BreakStatement[1,0].Evaluation`,
    "BreakableStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::BreakableStatement[0,0].ContainsUndefinedContinueTarget`,
    "BreakableStatement[0,0].Evaluation" -> `AL::BreakableStatement[0,0].Evaluation`,
    "BreakableStatement[0,0].LabelledEvaluation" -> `AL::BreakableStatement[0,0].LabelledEvaluation`,
    "BreakableStatement[1,0].Evaluation" -> `AL::BreakableStatement[1,0].Evaluation`,
    "BreakableStatement[1,0].LabelledEvaluation" -> `AL::BreakableStatement[1,0].LabelledEvaluation`,
    "BuiltinFunctionObject.Call" -> `AL::BuiltinFunctionObject.Call`,
    "BuiltinFunctionObject.Construct" -> `AL::BuiltinFunctionObject.Construct`,
    "ByteListBitwiseOp" -> `AL::ByteListBitwiseOp`,
    "ByteListEqual" -> `AL::ByteListEqual`,
    "Call" -> `AL::Call`,
    "CallExpression[0,0].AssignmentTargetType" -> `AL::CallExpression[0,0].AssignmentTargetType`,
    "CallExpression[0,0].Evaluation" -> `AL::CallExpression[0,0].Evaluation`,
    "CallExpression[0,0].HasCallInTailPosition" -> `AL::CallExpression[0,0].HasCallInTailPosition`,
    "CallExpression[1,0].AssignmentTargetType" -> `AL::CallExpression[1,0].AssignmentTargetType`,
    "CallExpression[1,0].HasCallInTailPosition" -> `AL::CallExpression[1,0].HasCallInTailPosition`,
    "CallExpression[2,0].AssignmentTargetType" -> `AL::CallExpression[2,0].AssignmentTargetType`,
    "CallExpression[3,0].AssignmentTargetType" -> `AL::CallExpression[3,0].AssignmentTargetType`,
    "CallExpression[3,0].Evaluation" -> `AL::CallExpression[3,0].Evaluation`,
    "CallExpression[3,0].HasCallInTailPosition" -> `AL::CallExpression[3,0].HasCallInTailPosition`,
    "CallExpression[4,0].AssignmentTargetType" -> `AL::CallExpression[4,0].AssignmentTargetType`,
    "CallExpression[4,0].Evaluation" -> `AL::CallExpression[4,0].Evaluation`,
    "CallExpression[4,0].HasCallInTailPosition" -> `AL::CallExpression[4,0].HasCallInTailPosition`,
    "CallExpression[5,0].AssignmentTargetType" -> `AL::CallExpression[5,0].AssignmentTargetType`,
    "CallExpression[5,0].Contains" -> `AL::CallExpression[5,0].Contains`,
    "CallExpression[5,0].Evaluation" -> `AL::CallExpression[5,0].Evaluation`,
    "CallExpression[5,0].HasCallInTailPosition" -> `AL::CallExpression[5,0].HasCallInTailPosition`,
    "CallExpression[6,0].AssignmentTargetType" -> `AL::CallExpression[6,0].AssignmentTargetType`,
    "CallExpression[6,0].Evaluation" -> `AL::CallExpression[6,0].Evaluation`,
    "CallExpression[6,0].HasCallInTailPosition" -> `AL::CallExpression[6,0].HasCallInTailPosition`,
    "CanonicalNumericIndexString" -> `AL::CanonicalNumericIndexString`,
    "Canonicalize" -> `AL::Canonicalize`,
    "CaseBlock[0,0].CaseBlockEvaluation" -> `AL::CaseBlock[0,0].CaseBlockEvaluation`,
    "CaseBlock[0,0].ContainsDuplicateLabels" -> `AL::CaseBlock[0,0].ContainsDuplicateLabels`,
    "CaseBlock[0,0].ContainsUndefinedBreakTarget" -> `AL::CaseBlock[0,0].ContainsUndefinedBreakTarget`,
    "CaseBlock[0,0].ContainsUndefinedContinueTarget" -> `AL::CaseBlock[0,0].ContainsUndefinedContinueTarget`,
    "CaseBlock[0,0].HasCallInTailPosition" -> `AL::CaseBlock[0,0].HasCallInTailPosition`,
    "CaseBlock[0,0].LexicallyDeclaredNames" -> `AL::CaseBlock[0,0].LexicallyDeclaredNames`,
    "CaseBlock[0,0].LexicallyScopedDeclarations" -> `AL::CaseBlock[0,0].LexicallyScopedDeclarations`,
    "CaseBlock[0,0].VarDeclaredNames" -> `AL::CaseBlock[0,0].VarDeclaredNames`,
    "CaseBlock[0,0].VarScopedDeclarations" -> `AL::CaseBlock[0,0].VarScopedDeclarations`,
    "CaseBlock[0,1].CaseBlockEvaluation" -> `AL::CaseBlock[0,1].CaseBlockEvaluation`,
    "CaseBlock[1,3].CaseBlockEvaluation" -> `AL::CaseBlock[1,3].CaseBlockEvaluation`,
    "CaseBlock[1,3].ContainsDuplicateLabels" -> `AL::CaseBlock[1,3].ContainsDuplicateLabels`,
    "CaseBlock[1,3].ContainsUndefinedBreakTarget" -> `AL::CaseBlock[1,3].ContainsUndefinedBreakTarget`,
    "CaseBlock[1,3].ContainsUndefinedContinueTarget" -> `AL::CaseBlock[1,3].ContainsUndefinedContinueTarget`,
    "CaseBlock[1,3].HasCallInTailPosition" -> `AL::CaseBlock[1,3].HasCallInTailPosition`,
    "CaseBlock[1,3].LexicallyDeclaredNames" -> `AL::CaseBlock[1,3].LexicallyDeclaredNames`,
    "CaseBlock[1,3].LexicallyScopedDeclarations" -> `AL::CaseBlock[1,3].LexicallyScopedDeclarations`,
    "CaseBlock[1,3].VarDeclaredNames" -> `AL::CaseBlock[1,3].VarDeclaredNames`,
    "CaseBlock[1,3].VarScopedDeclarations" -> `AL::CaseBlock[1,3].VarScopedDeclarations`,
    "CaseClauseIsSelected" -> `AL::CaseClauseIsSelected`,
    "CaseClause[0,0].Evaluation" -> `AL::CaseClause[0,0].Evaluation`,
    "CaseClause[0,1].ContainsDuplicateLabels" -> `AL::CaseClause[0,1].ContainsDuplicateLabels`,
    "CaseClause[0,1].ContainsUndefinedBreakTarget" -> `AL::CaseClause[0,1].ContainsUndefinedBreakTarget`,
    "CaseClause[0,1].ContainsUndefinedContinueTarget" -> `AL::CaseClause[0,1].ContainsUndefinedContinueTarget`,
    "CaseClause[0,1].Evaluation" -> `AL::CaseClause[0,1].Evaluation`,
    "CaseClause[0,1].HasCallInTailPosition" -> `AL::CaseClause[0,1].HasCallInTailPosition`,
    "CaseClause[0,1].LexicallyDeclaredNames" -> `AL::CaseClause[0,1].LexicallyDeclaredNames`,
    "CaseClause[0,1].LexicallyScopedDeclarations" -> `AL::CaseClause[0,1].LexicallyScopedDeclarations`,
    "CaseClause[0,1].VarDeclaredNames" -> `AL::CaseClause[0,1].VarDeclaredNames`,
    "CaseClause[0,1].VarScopedDeclarations" -> `AL::CaseClause[0,1].VarScopedDeclarations`,
    "CaseClauses[1,0].ContainsDuplicateLabels" -> `AL::CaseClauses[1,0].ContainsDuplicateLabels`,
    "CaseClauses[1,0].ContainsUndefinedBreakTarget" -> `AL::CaseClauses[1,0].ContainsUndefinedBreakTarget`,
    "CaseClauses[1,0].ContainsUndefinedContinueTarget" -> `AL::CaseClauses[1,0].ContainsUndefinedContinueTarget`,
    "CaseClauses[1,0].HasCallInTailPosition" -> `AL::CaseClauses[1,0].HasCallInTailPosition`,
    "CaseClauses[1,0].LexicallyDeclaredNames" -> `AL::CaseClauses[1,0].LexicallyDeclaredNames`,
    "CaseClauses[1,0].LexicallyScopedDeclarations" -> `AL::CaseClauses[1,0].LexicallyScopedDeclarations`,
    "CaseClauses[1,0].VarDeclaredNames" -> `AL::CaseClauses[1,0].VarDeclaredNames`,
    "CaseClauses[1,0].VarScopedDeclarations" -> `AL::CaseClauses[1,0].VarScopedDeclarations`,
    "CatchFinallyFunctions" -> `AL::CatchFinallyFunctions`,
    "Catch[0,0].CatchClauseEvaluation" -> `AL::Catch[0,0].CatchClauseEvaluation`,
    "Catch[0,0].ContainsDuplicateLabels" -> `AL::Catch[0,0].ContainsDuplicateLabels`,
    "Catch[0,0].ContainsUndefinedBreakTarget" -> `AL::Catch[0,0].ContainsUndefinedBreakTarget`,
    "Catch[0,0].ContainsUndefinedContinueTarget" -> `AL::Catch[0,0].ContainsUndefinedContinueTarget`,
    "Catch[0,0].EarlyErrors" -> `AL::Catch[0,0].EarlyErrors`,
    "Catch[0,0].HasCallInTailPosition" -> `AL::Catch[0,0].HasCallInTailPosition`,
    "Catch[0,0].VarDeclaredNames" -> `AL::Catch[0,0].VarDeclaredNames`,
    "Catch[0,0].VarScopedDeclarations" -> `AL::Catch[0,0].VarScopedDeclarations`,
    "Catch[1,0].CatchClauseEvaluation" -> `AL::Catch[1,0].CatchClauseEvaluation`,
    "CharacterRange" -> `AL::CharacterRange`,
    "CharacterSetMatcher" -> `AL::CharacterSetMatcher`,
    "ClassBody[0,0].EarlyErrors" -> `AL::ClassBody[0,0].EarlyErrors`,
    "ClassDeclaration[0,0].BindingClassDeclarationEvaluation" -> `AL::ClassDeclaration[0,0].BindingClassDeclarationEvaluation`,
    "ClassDeclaration[0,0].BoundNames" -> `AL::ClassDeclaration[0,0].BoundNames`,
    "ClassDeclaration[0,0].Evaluation" -> `AL::ClassDeclaration[0,0].Evaluation`,
    "ClassDeclaration[0,0].IsConstantDeclaration" -> `AL::ClassDeclaration[0,0].IsConstantDeclaration`,
    "ClassDeclaration[1,0].BindingClassDeclarationEvaluation" -> `AL::ClassDeclaration[1,0].BindingClassDeclarationEvaluation`,
    "ClassDeclaration[1,0].BoundNames" -> `AL::ClassDeclaration[1,0].BoundNames`,
    "ClassDeclaration[1,0].IsConstantDeclaration" -> `AL::ClassDeclaration[1,0].IsConstantDeclaration`,
    "ClassElementList[0,0].ConstructorMethod" -> `AL::ClassElementList[0,0].ConstructorMethod`,
    "ClassElementList[0,0].NonConstructorMethodDefinitions" -> `AL::ClassElementList[0,0].NonConstructorMethodDefinitions`,
    "ClassElementList[0,0].PrototypePropertyNameList" -> `AL::ClassElementList[0,0].PrototypePropertyNameList`,
    "ClassElementList[1,0].ComputedPropertyContains" -> `AL::ClassElementList[1,0].ComputedPropertyContains`,
    "ClassElementList[1,0].ConstructorMethod" -> `AL::ClassElementList[1,0].ConstructorMethod`,
    "ClassElementList[1,0].NonConstructorMethodDefinitions" -> `AL::ClassElementList[1,0].NonConstructorMethodDefinitions`,
    "ClassElementList[1,0].PrototypePropertyNameList" -> `AL::ClassElementList[1,0].PrototypePropertyNameList`,
    "ClassElement[0,0].ClassElementKind" -> `AL::ClassElement[0,0].ClassElementKind`,
    "ClassElement[0,0].EarlyErrors" -> `AL::ClassElement[0,0].EarlyErrors`,
    "ClassElement[0,0].IsStatic" -> `AL::ClassElement[0,0].IsStatic`,
    "ClassElement[1,0].ClassElementKind" -> `AL::ClassElement[1,0].ClassElementKind`,
    "ClassElement[1,0].EarlyErrors" -> `AL::ClassElement[1,0].EarlyErrors`,
    "ClassElement[1,0].IsStatic" -> `AL::ClassElement[1,0].IsStatic`,
    "ClassElement[2,0].ClassElementKind" -> `AL::ClassElement[2,0].ClassElementKind`,
    "ClassElement[2,0].ComputedPropertyContains" -> `AL::ClassElement[2,0].ComputedPropertyContains`,
    "ClassElement[2,0].IsStatic" -> `AL::ClassElement[2,0].IsStatic`,
    "ClassElement[2,0].PropName" -> `AL::ClassElement[2,0].PropName`,
    "ClassExpression[0,0].Evaluation" -> `AL::ClassExpression[0,0].Evaluation`,
    "ClassExpression[0,0].HasName" -> `AL::ClassExpression[0,0].HasName`,
    "ClassExpression[0,0].NamedEvaluation" -> `AL::ClassExpression[0,0].NamedEvaluation`,
    "ClassExpression[0,1].Evaluation" -> `AL::ClassExpression[0,1].Evaluation`,
    "ClassExpression[0,1].HasName" -> `AL::ClassExpression[0,1].HasName`,
    "ClassExpression[0,1].IsFunctionDefinition" -> `AL::ClassExpression[0,1].IsFunctionDefinition`,
    "ClassTail[0,3].ClassDefinitionEvaluation" -> `AL::ClassTail[0,3].ClassDefinitionEvaluation`,
    "ClassTail[0,3].Contains" -> `AL::ClassTail[0,3].Contains`,
    "CleanupFinalizationRegistry" -> `AL::CleanupFinalizationRegistry`,
    "ClearKeptObjects" -> `AL::ClearKeptObjects`,
    "CloneArrayBuffer" -> `AL::CloneArrayBuffer`,
    "CoalesceExpression[0,0].AssignmentTargetType" -> `AL::CoalesceExpression[0,0].AssignmentTargetType`,
    "CoalesceExpression[0,0].Evaluation" -> `AL::CoalesceExpression[0,0].Evaluation`,
    "CoalesceExpression[0,0].HasCallInTailPosition" -> `AL::CoalesceExpression[0,0].HasCallInTailPosition`,
    "CoalesceExpression[0,0].IsFunctionDefinition" -> `AL::CoalesceExpression[0,0].IsFunctionDefinition`,
    "CodePointAt" -> `AL::CodePointAt`,
    "CodePointsToString" -> `AL::CodePointsToString`,
    "CodePointsToString" -> `AL::CodePointsToString`,
    "CoherentReads" -> `AL::CoherentReads`,
    "CompletePropertyDescriptor" -> `AL::CompletePropertyDescriptor`,
    "ComposeWriteEventBytes" -> `AL::ComposeWriteEventBytes`,
    "ComputedPropertyName[0,0].Evaluation" -> `AL::ComputedPropertyName[0,0].Evaluation`,
    "ComputedPropertyName[0,0].PropName" -> `AL::ComputedPropertyName[0,0].PropName`,
    "ConciseBody[0,0].ConciseBodyContainsUseStrict" -> `AL::ConciseBody[0,0].ConciseBodyContainsUseStrict`,
    "ConciseBody[0,0].EvaluateBody" -> `AL::ConciseBody[0,0].EvaluateBody`,
    "ConciseBody[0,0].EvaluateConciseBody" -> `AL::ConciseBody[0,0].EvaluateConciseBody`,
    "ConciseBody[0,0].LexicallyDeclaredNames" -> `AL::ConciseBody[0,0].LexicallyDeclaredNames`,
    "ConciseBody[0,0].LexicallyScopedDeclarations" -> `AL::ConciseBody[0,0].LexicallyScopedDeclarations`,
    "ConciseBody[0,0].VarDeclaredNames" -> `AL::ConciseBody[0,0].VarDeclaredNames`,
    "ConciseBody[0,0].VarScopedDeclarations" -> `AL::ConciseBody[0,0].VarScopedDeclarations`,
    "ConciseBody[1,0].ConciseBodyContainsUseStrict" -> `AL::ConciseBody[1,0].ConciseBodyContainsUseStrict`,
    "ConditionalExpression[1,0].AssignmentTargetType" -> `AL::ConditionalExpression[1,0].AssignmentTargetType`,
    "ConditionalExpression[1,0].Evaluation" -> `AL::ConditionalExpression[1,0].Evaluation`,
    "ConditionalExpression[1,0].HasCallInTailPosition" -> `AL::ConditionalExpression[1,0].HasCallInTailPosition`,
    "ConditionalExpression[1,0].IsFunctionDefinition" -> `AL::ConditionalExpression[1,0].IsFunctionDefinition`,
    "Construct" -> `AL::Construct`,
    "Contains" -> `AL::Contains`,
    "ContinueStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::ContinueStatement[0,0].ContainsUndefinedContinueTarget`,
    "ContinueStatement[0,0].EarlyErrors" -> `AL::ContinueStatement[0,0].EarlyErrors`,
    "ContinueStatement[0,0].Evaluation" -> `AL::ContinueStatement[0,0].Evaluation`,
    "ContinueStatement[1,0].ContainsUndefinedContinueTarget" -> `AL::ContinueStatement[1,0].ContainsUndefinedContinueTarget`,
    "ContinueStatement[1,0].EarlyErrors" -> `AL::ContinueStatement[1,0].EarlyErrors`,
    "ContinueStatement[1,0].Evaluation" -> `AL::ContinueStatement[1,0].Evaluation`,
    "CopyDataBlockBytes" -> `AL::CopyDataBlockBytes`,
    "CopyDataProperties" -> `AL::CopyDataProperties`,
    "CoverCallExpressionAndAsyncArrowHead[0,0].BoundNames" -> `AL::CoverCallExpressionAndAsyncArrowHead[0,0].BoundNames`,
    "CoverCallExpressionAndAsyncArrowHead[0,0].CoveredAsyncArrowHead" -> `AL::CoverCallExpressionAndAsyncArrowHead[0,0].CoveredAsyncArrowHead`,
    "CoverCallExpressionAndAsyncArrowHead[0,0].CoveredCallExpression" -> `AL::CoverCallExpressionAndAsyncArrowHead[0,0].CoveredCallExpression`,
    "CoverCallExpressionAndAsyncArrowHead[0,0].IsSimpleParameterList" -> `AL::CoverCallExpressionAndAsyncArrowHead[0,0].IsSimpleParameterList`,
    "CoverParenthesizedExpressionAndArrowParameterList[0,0].CoveredFormalsList" -> `AL::CoverParenthesizedExpressionAndArrowParameterList[0,0].CoveredFormalsList`,
    "CoverParenthesizedExpressionAndArrowParameterList[0,0].CoveredParenthesizedExpression" -> `AL::CoverParenthesizedExpressionAndArrowParameterList[0,0].CoveredParenthesizedExpression`,
    "CoverParenthesizedExpressionAndArrowParameterList[1,0].CoveredFormalsList" -> `AL::CoverParenthesizedExpressionAndArrowParameterList[1,0].CoveredFormalsList`,
    "CoverParenthesizedExpressionAndArrowParameterList[2,0].CoveredFormalsList" -> `AL::CoverParenthesizedExpressionAndArrowParameterList[2,0].CoveredFormalsList`,
    "CoverParenthesizedExpressionAndArrowParameterList[3,0].CoveredFormalsList" -> `AL::CoverParenthesizedExpressionAndArrowParameterList[3,0].CoveredFormalsList`,
    "CoverParenthesizedExpressionAndArrowParameterList[4,0].CoveredFormalsList" -> `AL::CoverParenthesizedExpressionAndArrowParameterList[4,0].CoveredFormalsList`,
    "CoverParenthesizedExpressionAndArrowParameterList[5,0].CoveredFormalsList" -> `AL::CoverParenthesizedExpressionAndArrowParameterList[5,0].CoveredFormalsList`,
    "CoverParenthesizedExpressionAndArrowParameterList[6,0].CoveredFormalsList" -> `AL::CoverParenthesizedExpressionAndArrowParameterList[6,0].CoveredFormalsList`,
    "CreateArrayFromList" -> `AL::CreateArrayFromList`,
    "CreateArrayIterator" -> `AL::CreateArrayIterator`,
    "CreateAsyncFromSyncIterator" -> `AL::CreateAsyncFromSyncIterator`,
    "CreateAsyncIteratorFromClosure" -> `AL::CreateAsyncIteratorFromClosure`,
    "CreateBuiltinFunction" -> `AL::CreateBuiltinFunction`,
    "CreateByteDataBlock" -> `AL::CreateByteDataBlock`,
    "CreateDataProperty" -> `AL::CreateDataProperty`,
    "CreateDataPropertyOnObjectFunctions" -> `AL::CreateDataPropertyOnObjectFunctions`,
    "CreateDataPropertyOrThrow" -> `AL::CreateDataPropertyOrThrow`,
    "CreateDynamicFunction" -> `AL::CreateDynamicFunction`,
    "CreateForInIterator" -> `AL::CreateForInIterator`,
    "CreateIntrinsics" -> `AL::CreateIntrinsics`,
    "CreateIterResultObject" -> `AL::CreateIterResultObject`,
    "CreateIteratorFromClosure" -> `AL::CreateIteratorFromClosure`,
    "CreateListFromArrayLike" -> `AL::CreateListFromArrayLike`,
    "CreateListIteratorRecord" -> `AL::CreateListIteratorRecord`,
    "CreateMapIterator" -> `AL::CreateMapIterator`,
    "CreateMappedArgumentsObject" -> `AL::CreateMappedArgumentsObject`,
    "CreateMethodProperty" -> `AL::CreateMethodProperty`,
    "CreatePerIterationEnvironment" -> `AL::CreatePerIterationEnvironment`,
    "CreateRealm" -> `AL::CreateRealm`,
    "CreateRegExpStringIterator" -> `AL::CreateRegExpStringIterator`,
    "CreateResolvingFunctions" -> `AL::CreateResolvingFunctions`,
    "CreateSetIterator" -> `AL::CreateSetIterator`,
    "CreateSharedByteDataBlock" -> `AL::CreateSharedByteDataBlock`,
    "CreateUnmappedArgumentsObject" -> `AL::CreateUnmappedArgumentsObject`,
    "DataRaces" -> `AL::DataRaces`,
    "DataView" -> `AL::DataView`,
    "Date" -> `AL::Date`,
    "Date.UTC" -> `AL::Date.UTC`,
    "Date.prototype.getDate" -> `AL::Date.prototype.getDate`,
    "Date.prototype.getDay" -> `AL::Date.prototype.getDay`,
    "Date.prototype.getFullYear" -> `AL::Date.prototype.getFullYear`,
    "Date.prototype.getHours" -> `AL::Date.prototype.getHours`,
    "Date.prototype.getMilliseconds" -> `AL::Date.prototype.getMilliseconds`,
    "Date.prototype.getMinutes" -> `AL::Date.prototype.getMinutes`,
    "Date.prototype.getMonth" -> `AL::Date.prototype.getMonth`,
    "Date.prototype.getSeconds" -> `AL::Date.prototype.getSeconds`,
    "Date.prototype.getTime" -> `AL::Date.prototype.getTime`,
    "Date.prototype.getTimezoneOffset" -> `AL::Date.prototype.getTimezoneOffset`,
    "Date.prototype.getUTCDate" -> `AL::Date.prototype.getUTCDate`,
    "Date.prototype.getUTCDay" -> `AL::Date.prototype.getUTCDay`,
    "Date.prototype.getUTCFullYear" -> `AL::Date.prototype.getUTCFullYear`,
    "Date.prototype.getUTCHours" -> `AL::Date.prototype.getUTCHours`,
    "Date.prototype.getUTCMilliseconds" -> `AL::Date.prototype.getUTCMilliseconds`,
    "Date.prototype.getUTCMinutes" -> `AL::Date.prototype.getUTCMinutes`,
    "Date.prototype.getUTCMonth" -> `AL::Date.prototype.getUTCMonth`,
    "Date.prototype.getUTCSeconds" -> `AL::Date.prototype.getUTCSeconds`,
    "Date.prototype.setDate" -> `AL::Date.prototype.setDate`,
    "Date.prototype.setFullYear" -> `AL::Date.prototype.setFullYear`,
    "Date.prototype.setHours" -> `AL::Date.prototype.setHours`,
    "Date.prototype.setMilliseconds" -> `AL::Date.prototype.setMilliseconds`,
    "Date.prototype.setMinutes" -> `AL::Date.prototype.setMinutes`,
    "Date.prototype.setMonth" -> `AL::Date.prototype.setMonth`,
    "Date.prototype.setSeconds" -> `AL::Date.prototype.setSeconds`,
    "Date.prototype.setTime" -> `AL::Date.prototype.setTime`,
    "Date.prototype.setUTCDate" -> `AL::Date.prototype.setUTCDate`,
    "Date.prototype.setUTCFullYear" -> `AL::Date.prototype.setUTCFullYear`,
    "Date.prototype.setUTCHours" -> `AL::Date.prototype.setUTCHours`,
    "Date.prototype.setUTCMilliseconds" -> `AL::Date.prototype.setUTCMilliseconds`,
    "Date.prototype.setUTCMinutes" -> `AL::Date.prototype.setUTCMinutes`,
    "Date.prototype.setUTCMonth" -> `AL::Date.prototype.setUTCMonth`,
    "Date.prototype.setUTCSeconds" -> `AL::Date.prototype.setUTCSeconds`,
    "Date.prototype.toDateString" -> `AL::Date.prototype.toDateString`,
    "Date.prototype.toJSON" -> `AL::Date.prototype.toJSON`,
    "Date.prototype.toString" -> `AL::Date.prototype.toString`,
    "Date.prototype.toTimeString" -> `AL::Date.prototype.toTimeString`,
    "Date.prototype.toUTCString" -> `AL::Date.prototype.toUTCString`,
    "Date.prototype.valueOf" -> `AL::Date.prototype.valueOf`,
    "Date.prototype[SYMBOL_toPrimitive]" -> `AL::Date.prototype[SYMBOL_toPrimitive]`,
    "DateFromTime" -> `AL::DateFromTime`,
    "DateString" -> `AL::DateString`,
    "Day" -> `AL::Day`,
    "DayFromYear" -> `AL::DayFromYear`,
    "DayWithinYear" -> `AL::DayWithinYear`,
    "DaysInYear" -> `AL::DaysInYear`,
    "DebuggerStatement[0,0].Evaluation" -> `AL::DebuggerStatement[0,0].Evaluation`,
    "DecimalBigIntegerLiteral[0,0].NumericValue" -> `AL::DecimalBigIntegerLiteral[0,0].NumericValue`,
    "DecimalBigIntegerLiteral[1,0].NumericValue" -> `AL::DecimalBigIntegerLiteral[1,0].NumericValue`,
    "DecimalBigIntegerLiteral[1,1].NumericValue" -> `AL::DecimalBigIntegerLiteral[1,1].NumericValue`,
    "DecimalBigIntegerLiteral[2,0].NumericValue" -> `AL::DecimalBigIntegerLiteral[2,0].NumericValue`,
    "Declaration[1,0].DeclarationPart" -> `AL::Declaration[1,0].DeclarationPart`,
    "Declaration[2,0].DeclarationPart" -> `AL::Declaration[2,0].DeclarationPart`,
    "DeclarativeEnvironmentRecord.CreateImmutableBinding" -> `AL::DeclarativeEnvironmentRecord.CreateImmutableBinding`,
    "DeclarativeEnvironmentRecord.CreateMutableBinding" -> `AL::DeclarativeEnvironmentRecord.CreateMutableBinding`,
    "DeclarativeEnvironmentRecord.DeleteBinding" -> `AL::DeclarativeEnvironmentRecord.DeleteBinding`,
    "DeclarativeEnvironmentRecord.GetBindingValue" -> `AL::DeclarativeEnvironmentRecord.GetBindingValue`,
    "DeclarativeEnvironmentRecord.HasBinding" -> `AL::DeclarativeEnvironmentRecord.HasBinding`,
    "DeclarativeEnvironmentRecord.HasSuperBinding" -> `AL::DeclarativeEnvironmentRecord.HasSuperBinding`,
    "DeclarativeEnvironmentRecord.HasThisBinding" -> `AL::DeclarativeEnvironmentRecord.HasThisBinding`,
    "DeclarativeEnvironmentRecord.InitializeBinding" -> `AL::DeclarativeEnvironmentRecord.InitializeBinding`,
    "DeclarativeEnvironmentRecord.SetMutableBinding" -> `AL::DeclarativeEnvironmentRecord.SetMutableBinding`,
    "DeclarativeEnvironmentRecord.WithBaseObject" -> `AL::DeclarativeEnvironmentRecord.WithBaseObject`,
    "Decode" -> `AL::Decode`,
    "DefaultClause[0,0].Evaluation" -> `AL::DefaultClause[0,0].Evaluation`,
    "DefaultClause[0,1].ContainsDuplicateLabels" -> `AL::DefaultClause[0,1].ContainsDuplicateLabels`,
    "DefaultClause[0,1].ContainsUndefinedBreakTarget" -> `AL::DefaultClause[0,1].ContainsUndefinedBreakTarget`,
    "DefaultClause[0,1].ContainsUndefinedContinueTarget" -> `AL::DefaultClause[0,1].ContainsUndefinedContinueTarget`,
    "DefaultClause[0,1].Evaluation" -> `AL::DefaultClause[0,1].Evaluation`,
    "DefaultClause[0,1].HasCallInTailPosition" -> `AL::DefaultClause[0,1].HasCallInTailPosition`,
    "DefaultClause[0,1].LexicallyDeclaredNames" -> `AL::DefaultClause[0,1].LexicallyDeclaredNames`,
    "DefaultClause[0,1].LexicallyScopedDeclarations" -> `AL::DefaultClause[0,1].LexicallyScopedDeclarations`,
    "DefaultClause[0,1].VarDeclaredNames" -> `AL::DefaultClause[0,1].VarDeclaredNames`,
    "DefaultClause[0,1].VarScopedDeclarations" -> `AL::DefaultClause[0,1].VarScopedDeclarations`,
    "DefaultConstructorFunctions" -> `AL::DefaultConstructorFunctions`,
    "DefinePropertyOrThrow" -> `AL::DefinePropertyOrThrow`,
    "DeletePropertyOrThrow" -> `AL::DeletePropertyOrThrow`,
    "DetachArrayBuffer" -> `AL::DetachArrayBuffer`,
    "DoWhileStatement[0,0].ContainsDuplicateLabels" -> `AL::DoWhileStatement[0,0].ContainsDuplicateLabels`,
    "DoWhileStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::DoWhileStatement[0,0].ContainsUndefinedBreakTarget`,
    "DoWhileStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::DoWhileStatement[0,0].ContainsUndefinedContinueTarget`,
    "DoWhileStatement[0,0].DoWhileLoopEvaluation" -> `AL::DoWhileStatement[0,0].DoWhileLoopEvaluation`,
    "DoWhileStatement[0,0].EarlyErrors" -> `AL::DoWhileStatement[0,0].EarlyErrors`,
    "DoWhileStatement[0,0].HasCallInTailPosition" -> `AL::DoWhileStatement[0,0].HasCallInTailPosition`,
    "DoWhileStatement[0,0].VarDeclaredNames" -> `AL::DoWhileStatement[0,0].VarDeclaredNames`,
    "DoWhileStatement[0,0].VarScopedDeclarations" -> `AL::DoWhileStatement[0,0].VarScopedDeclarations`,
    "ECMAScriptFunctionObject.Call" -> `AL::ECMAScriptFunctionObject.Call`,
    "ECMAScriptFunctionObject.Construct" -> `AL::ECMAScriptFunctionObject.Construct`,
    "EarlyErrors" -> `AL::EarlyErrors`,
    "EarlyErrors" -> `AL::EarlyErrors`,
    "EarlyErrors" -> `AL::EarlyErrors`,
    "EarlyErrors" -> `AL::EarlyErrors`,
    "EarlyErrors" -> `AL::EarlyErrors`,
    "EarlyErrors" -> `AL::EarlyErrors`,
    "ElementList[0,1].ArrayAccumulation" -> `AL::ElementList[0,1].ArrayAccumulation`,
    "ElementList[1,1].ArrayAccumulation" -> `AL::ElementList[1,1].ArrayAccumulation`,
    "ElementList[2,1].ArrayAccumulation" -> `AL::ElementList[2,1].ArrayAccumulation`,
    "ElementList[3,1].ArrayAccumulation" -> `AL::ElementList[3,1].ArrayAccumulation`,
    "Elision[0,0].ArrayAccumulation" -> `AL::Elision[0,0].ArrayAccumulation`,
    "Elision[0,0].IteratorDestructuringAssignmentEvaluation" -> `AL::Elision[0,0].IteratorDestructuringAssignmentEvaluation`,
    "Elision[1,0].ArrayAccumulation" -> `AL::Elision[1,0].ArrayAccumulation`,
    "Elision[1,0].IteratorDestructuringAssignmentEvaluation" -> `AL::Elision[1,0].IteratorDestructuringAssignmentEvaluation`,
    "EmptyStatement[0,0].Evaluation" -> `AL::EmptyStatement[0,0].Evaluation`,
    "Encode" -> `AL::Encode`,
    "EnqueueJob" -> `AL::EnqueueJob`,
    "EnterCriticalSection" -> `AL::EnterCriticalSection`,
    "EnumerableOwnPropertyNames" -> `AL::EnumerableOwnPropertyNames`,
    "EnumerateObjectProperties" -> `AL::EnumerateObjectProperties`,
    "EqualityExpression[1,0].AssignmentTargetType" -> `AL::EqualityExpression[1,0].AssignmentTargetType`,
    "EqualityExpression[1,0].Evaluation" -> `AL::EqualityExpression[1,0].Evaluation`,
    "EqualityExpression[1,0].HasCallInTailPosition" -> `AL::EqualityExpression[1,0].HasCallInTailPosition`,
    "EqualityExpression[1,0].IsFunctionDefinition" -> `AL::EqualityExpression[1,0].IsFunctionDefinition`,
    "EqualityExpression[2,0].AssignmentTargetType" -> `AL::EqualityExpression[2,0].AssignmentTargetType`,
    "EqualityExpression[2,0].Evaluation" -> `AL::EqualityExpression[2,0].Evaluation`,
    "EqualityExpression[2,0].HasCallInTailPosition" -> `AL::EqualityExpression[2,0].HasCallInTailPosition`,
    "EqualityExpression[2,0].IsFunctionDefinition" -> `AL::EqualityExpression[2,0].IsFunctionDefinition`,
    "EqualityExpression[3,0].AssignmentTargetType" -> `AL::EqualityExpression[3,0].AssignmentTargetType`,
    "EqualityExpression[3,0].Evaluation" -> `AL::EqualityExpression[3,0].Evaluation`,
    "EqualityExpression[3,0].HasCallInTailPosition" -> `AL::EqualityExpression[3,0].HasCallInTailPosition`,
    "EqualityExpression[3,0].IsFunctionDefinition" -> `AL::EqualityExpression[3,0].IsFunctionDefinition`,
    "EqualityExpression[4,0].AssignmentTargetType" -> `AL::EqualityExpression[4,0].AssignmentTargetType`,
    "EqualityExpression[4,0].Evaluation" -> `AL::EqualityExpression[4,0].Evaluation`,
    "EqualityExpression[4,0].HasCallInTailPosition" -> `AL::EqualityExpression[4,0].HasCallInTailPosition`,
    "EqualityExpression[4,0].IsFunctionDefinition" -> `AL::EqualityExpression[4,0].IsFunctionDefinition`,
    "Error" -> `AL::Error`,
    "Error.prototype.toString" -> `AL::Error.prototype.toString`,
    "EscapeRegExpPattern" -> `AL::EscapeRegExpPattern`,
    "EvalDeclarationInstantiation" -> `AL::EvalDeclarationInstantiation`,
    "EvalError" -> `AL::EvalError`,
    "Evaluate" -> `AL::Evaluate`,
    "EvaluateCall" -> `AL::EvaluateCall`,
    "EvaluateNew" -> `AL::EvaluateNew`,
    "EvaluatePropertyAccessWithExpressionKey" -> `AL::EvaluatePropertyAccessWithExpressionKey`,
    "EvaluatePropertyAccessWithIdentifierKey" -> `AL::EvaluatePropertyAccessWithIdentifierKey`,
    "EvaluateStringOrNumericBinaryExpression" -> `AL::EvaluateStringOrNumericBinaryExpression`,
    "EventSet" -> `AL::EventSet`,
    "ExecuteModule" -> `AL::ExecuteModule`,
    "Execution" -> `AL::Execution`,
    "ExponentiationExpression[1,0].AssignmentTargetType" -> `AL::ExponentiationExpression[1,0].AssignmentTargetType`,
    "ExponentiationExpression[1,0].Evaluation" -> `AL::ExponentiationExpression[1,0].Evaluation`,
    "ExponentiationExpression[1,0].HasCallInTailPosition" -> `AL::ExponentiationExpression[1,0].HasCallInTailPosition`,
    "ExponentiationExpression[1,0].IsFunctionDefinition" -> `AL::ExponentiationExpression[1,0].IsFunctionDefinition`,
    "ExportDeclaration[0,0].BoundNames" -> `AL::ExportDeclaration[0,0].BoundNames`,
    "ExportDeclaration[0,0].Evaluation" -> `AL::ExportDeclaration[0,0].Evaluation`,
    "ExportDeclaration[0,0].ExportEntries" -> `AL::ExportDeclaration[0,0].ExportEntries`,
    "ExportDeclaration[0,0].ExportedBindings" -> `AL::ExportDeclaration[0,0].ExportedBindings`,
    "ExportDeclaration[0,0].ExportedNames" -> `AL::ExportDeclaration[0,0].ExportedNames`,
    "ExportDeclaration[0,0].IsConstantDeclaration" -> `AL::ExportDeclaration[0,0].IsConstantDeclaration`,
    "ExportDeclaration[0,0].LexicallyScopedDeclarations" -> `AL::ExportDeclaration[0,0].LexicallyScopedDeclarations`,
    "ExportDeclaration[0,0].ModuleRequests" -> `AL::ExportDeclaration[0,0].ModuleRequests`,
    "ExportDeclaration[1,0].BoundNames" -> `AL::ExportDeclaration[1,0].BoundNames`,
    "ExportDeclaration[1,0].EarlyErrors" -> `AL::ExportDeclaration[1,0].EarlyErrors`,
    "ExportDeclaration[1,0].Evaluation" -> `AL::ExportDeclaration[1,0].Evaluation`,
    "ExportDeclaration[1,0].ExportEntries" -> `AL::ExportDeclaration[1,0].ExportEntries`,
    "ExportDeclaration[1,0].ExportedBindings" -> `AL::ExportDeclaration[1,0].ExportedBindings`,
    "ExportDeclaration[1,0].IsConstantDeclaration" -> `AL::ExportDeclaration[1,0].IsConstantDeclaration`,
    "ExportDeclaration[1,0].LexicallyScopedDeclarations" -> `AL::ExportDeclaration[1,0].LexicallyScopedDeclarations`,
    "ExportDeclaration[1,0].ModuleRequests" -> `AL::ExportDeclaration[1,0].ModuleRequests`,
    "ExportDeclaration[2,0].BoundNames" -> `AL::ExportDeclaration[2,0].BoundNames`,
    "ExportDeclaration[2,0].Evaluation" -> `AL::ExportDeclaration[2,0].Evaluation`,
    "ExportDeclaration[2,0].ExportEntries" -> `AL::ExportDeclaration[2,0].ExportEntries`,
    "ExportDeclaration[2,0].ExportedBindings" -> `AL::ExportDeclaration[2,0].ExportedBindings`,
    "ExportDeclaration[2,0].ExportedNames" -> `AL::ExportDeclaration[2,0].ExportedNames`,
    "ExportDeclaration[2,0].LexicallyScopedDeclarations" -> `AL::ExportDeclaration[2,0].LexicallyScopedDeclarations`,
    "ExportDeclaration[2,0].ModuleRequests" -> `AL::ExportDeclaration[2,0].ModuleRequests`,
    "ExportDeclaration[3,0].BoundNames" -> `AL::ExportDeclaration[3,0].BoundNames`,
    "ExportDeclaration[3,0].Evaluation" -> `AL::ExportDeclaration[3,0].Evaluation`,
    "ExportDeclaration[3,0].ExportEntries" -> `AL::ExportDeclaration[3,0].ExportEntries`,
    "ExportDeclaration[3,0].ExportedBindings" -> `AL::ExportDeclaration[3,0].ExportedBindings`,
    "ExportDeclaration[3,0].ExportedNames" -> `AL::ExportDeclaration[3,0].ExportedNames`,
    "ExportDeclaration[3,0].LexicallyScopedDeclarations" -> `AL::ExportDeclaration[3,0].LexicallyScopedDeclarations`,
    "ExportDeclaration[3,0].ModuleRequests" -> `AL::ExportDeclaration[3,0].ModuleRequests`,
    "ExportDeclaration[4,0].BoundNames" -> `AL::ExportDeclaration[4,0].BoundNames`,
    "ExportDeclaration[4,0].Evaluation" -> `AL::ExportDeclaration[4,0].Evaluation`,
    "ExportDeclaration[4,0].ExportEntries" -> `AL::ExportDeclaration[4,0].ExportEntries`,
    "ExportDeclaration[4,0].ExportedBindings" -> `AL::ExportDeclaration[4,0].ExportedBindings`,
    "ExportDeclaration[4,0].ExportedNames" -> `AL::ExportDeclaration[4,0].ExportedNames`,
    "ExportDeclaration[4,0].LexicallyScopedDeclarations" -> `AL::ExportDeclaration[4,0].LexicallyScopedDeclarations`,
    "ExportDeclaration[4,0].ModuleRequests" -> `AL::ExportDeclaration[4,0].ModuleRequests`,
    "ExportDeclaration[5,0].BoundNames" -> `AL::ExportDeclaration[5,0].BoundNames`,
    "ExportDeclaration[5,0].Evaluation" -> `AL::ExportDeclaration[5,0].Evaluation`,
    "ExportDeclaration[5,0].ExportEntries" -> `AL::ExportDeclaration[5,0].ExportEntries`,
    "ExportDeclaration[5,0].ExportedBindings" -> `AL::ExportDeclaration[5,0].ExportedBindings`,
    "ExportDeclaration[5,0].ExportedNames" -> `AL::ExportDeclaration[5,0].ExportedNames`,
    "ExportDeclaration[5,0].LexicallyScopedDeclarations" -> `AL::ExportDeclaration[5,0].LexicallyScopedDeclarations`,
    "ExportDeclaration[5,0].ModuleRequests" -> `AL::ExportDeclaration[5,0].ModuleRequests`,
    "ExportDeclaration[6,0].BoundNames" -> `AL::ExportDeclaration[6,0].BoundNames`,
    "ExportDeclaration[6,0].Evaluation" -> `AL::ExportDeclaration[6,0].Evaluation`,
    "ExportDeclaration[6,0].ExportEntries" -> `AL::ExportDeclaration[6,0].ExportEntries`,
    "ExportDeclaration[6,0].ExportedBindings" -> `AL::ExportDeclaration[6,0].ExportedBindings`,
    "ExportDeclaration[6,0].ExportedNames" -> `AL::ExportDeclaration[6,0].ExportedNames`,
    "ExportDeclaration[6,0].IsConstantDeclaration" -> `AL::ExportDeclaration[6,0].IsConstantDeclaration`,
    "ExportDeclaration[6,0].LexicallyScopedDeclarations" -> `AL::ExportDeclaration[6,0].LexicallyScopedDeclarations`,
    "ExportDeclaration[6,0].ModuleRequests" -> `AL::ExportDeclaration[6,0].ModuleRequests`,
    "ExportFromClause[0,0].ExportEntriesForModule" -> `AL::ExportFromClause[0,0].ExportEntriesForModule`,
    "ExportFromClause[0,0].ExportedNames" -> `AL::ExportFromClause[0,0].ExportedNames`,
    "ExportFromClause[1,0].ExportEntriesForModule" -> `AL::ExportFromClause[1,0].ExportEntriesForModule`,
    "ExportFromClause[1,0].ExportedNames" -> `AL::ExportFromClause[1,0].ExportedNames`,
    "ExportFromClause[2,0].ExportedNames" -> `AL::ExportFromClause[2,0].ExportedNames`,
    "ExportSpecifier[0,0].ExportEntriesForModule" -> `AL::ExportSpecifier[0,0].ExportEntriesForModule`,
    "ExportSpecifier[0,0].ExportedBindings" -> `AL::ExportSpecifier[0,0].ExportedBindings`,
    "ExportSpecifier[0,0].ExportedNames" -> `AL::ExportSpecifier[0,0].ExportedNames`,
    "ExportSpecifier[0,0].ReferencedBindings" -> `AL::ExportSpecifier[0,0].ReferencedBindings`,
    "ExportSpecifier[1,0].ExportEntriesForModule" -> `AL::ExportSpecifier[1,0].ExportEntriesForModule`,
    "ExportSpecifier[1,0].ExportedBindings" -> `AL::ExportSpecifier[1,0].ExportedBindings`,
    "ExportSpecifier[1,0].ExportedNames" -> `AL::ExportSpecifier[1,0].ExportedNames`,
    "ExportSpecifier[1,0].ReferencedBindings" -> `AL::ExportSpecifier[1,0].ReferencedBindings`,
    "ExportsList[1,0].ExportEntriesForModule" -> `AL::ExportsList[1,0].ExportEntriesForModule`,
    "ExportsList[1,0].ExportedBindings" -> `AL::ExportsList[1,0].ExportedBindings`,
    "ExportsList[1,0].ExportedNames" -> `AL::ExportsList[1,0].ExportedNames`,
    "ExportsList[1,0].ReferencedBindings" -> `AL::ExportsList[1,0].ReferencedBindings`,
    "ExpressionBody[0,0].Evaluation" -> `AL::ExpressionBody[0,0].Evaluation`,
    "ExpressionStatement[0,0].Evaluation" -> `AL::ExpressionStatement[0,0].Evaluation`,
    "Expression[0,0].HasCallInTailPosition" -> `AL::Expression[0,0].HasCallInTailPosition`,
    "Expression[1,0].AssignmentTargetType" -> `AL::Expression[1,0].AssignmentTargetType`,
    "Expression[1,0].Evaluation" -> `AL::Expression[1,0].Evaluation`,
    "Expression[1,0].HasCallInTailPosition" -> `AL::Expression[1,0].HasCallInTailPosition`,
    "Expression[1,0].IsFunctionDefinition" -> `AL::Expression[1,0].IsFunctionDefinition`,
    "FinalizationRegistry" -> `AL::FinalizationRegistry`,
    "FinalizationRegistry.prototype.register" -> `AL::FinalizationRegistry.prototype.register`,
    "FinalizationRegistry.prototype.unregister" -> `AL::FinalizationRegistry.prototype.unregister`,
    "FinishDynamicImport" -> `AL::FinishDynamicImport`,
    "FlattenIntoArray" -> `AL::FlattenIntoArray`,
    "ForBinding[0,0].Evaluation" -> `AL::ForBinding[0,0].Evaluation`,
    "ForBinding[0,0].IsDestructuring" -> `AL::ForBinding[0,0].IsDestructuring`,
    "ForBinding[1,0].IsDestructuring" -> `AL::ForBinding[1,0].IsDestructuring`,
    "ForBodyEvaluation" -> `AL::ForBodyEvaluation`,
    "ForDeclaration[0,0].BoundNames" -> `AL::ForDeclaration[0,0].BoundNames`,
    "ForDeclaration[0,0].ForDeclarationBindingInitialization" -> `AL::ForDeclaration[0,0].ForDeclarationBindingInitialization`,
    "ForDeclaration[0,0].ForDeclarationBindingInstantiation" -> `AL::ForDeclaration[0,0].ForDeclarationBindingInstantiation`,
    "ForDeclaration[0,0].IsDestructuring" -> `AL::ForDeclaration[0,0].IsDestructuring`,
    "ForInOfBodyEvaluation" -> `AL::ForInOfBodyEvaluation`,
    "ForInOfHeadEvaluation" -> `AL::ForInOfHeadEvaluation`,
    "ForInOfStatement[0,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[0,0].ContainsDuplicateLabels`,
    "ForInOfStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[0,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[0,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[0,0].EarlyErrors" -> `AL::ForInOfStatement[0,0].EarlyErrors`,
    "ForInOfStatement[0,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[0,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[0,0].HasCallInTailPosition" -> `AL::ForInOfStatement[0,0].HasCallInTailPosition`,
    "ForInOfStatement[0,0].VarDeclaredNames" -> `AL::ForInOfStatement[0,0].VarDeclaredNames`,
    "ForInOfStatement[0,0].VarScopedDeclarations" -> `AL::ForInOfStatement[0,0].VarScopedDeclarations`,
    "ForInOfStatement[1,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[1,0].ContainsDuplicateLabels`,
    "ForInOfStatement[1,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[1,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[1,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[1,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[1,0].EarlyErrors" -> `AL::ForInOfStatement[1,0].EarlyErrors`,
    "ForInOfStatement[1,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[1,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[1,0].HasCallInTailPosition" -> `AL::ForInOfStatement[1,0].HasCallInTailPosition`,
    "ForInOfStatement[1,0].VarDeclaredNames" -> `AL::ForInOfStatement[1,0].VarDeclaredNames`,
    "ForInOfStatement[1,0].VarScopedDeclarations" -> `AL::ForInOfStatement[1,0].VarScopedDeclarations`,
    "ForInOfStatement[2,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[2,0].ContainsDuplicateLabels`,
    "ForInOfStatement[2,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[2,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[2,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[2,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[2,0].EarlyErrors" -> `AL::ForInOfStatement[2,0].EarlyErrors`,
    "ForInOfStatement[2,0].EarlyErrors" -> `AL::ForInOfStatement[2,0].EarlyErrors`,
    "ForInOfStatement[2,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[2,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[2,0].HasCallInTailPosition" -> `AL::ForInOfStatement[2,0].HasCallInTailPosition`,
    "ForInOfStatement[2,0].VarDeclaredNames" -> `AL::ForInOfStatement[2,0].VarDeclaredNames`,
    "ForInOfStatement[2,0].VarScopedDeclarations" -> `AL::ForInOfStatement[2,0].VarScopedDeclarations`,
    "ForInOfStatement[3,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[3,0].ContainsDuplicateLabels`,
    "ForInOfStatement[3,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[3,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[3,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[3,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[3,0].EarlyErrors" -> `AL::ForInOfStatement[3,0].EarlyErrors`,
    "ForInOfStatement[3,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[3,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[3,0].HasCallInTailPosition" -> `AL::ForInOfStatement[3,0].HasCallInTailPosition`,
    "ForInOfStatement[3,0].VarDeclaredNames" -> `AL::ForInOfStatement[3,0].VarDeclaredNames`,
    "ForInOfStatement[3,0].VarScopedDeclarations" -> `AL::ForInOfStatement[3,0].VarScopedDeclarations`,
    "ForInOfStatement[4,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[4,0].ContainsDuplicateLabels`,
    "ForInOfStatement[4,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[4,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[4,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[4,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[4,0].EarlyErrors" -> `AL::ForInOfStatement[4,0].EarlyErrors`,
    "ForInOfStatement[4,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[4,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[4,0].HasCallInTailPosition" -> `AL::ForInOfStatement[4,0].HasCallInTailPosition`,
    "ForInOfStatement[4,0].VarDeclaredNames" -> `AL::ForInOfStatement[4,0].VarDeclaredNames`,
    "ForInOfStatement[4,0].VarScopedDeclarations" -> `AL::ForInOfStatement[4,0].VarScopedDeclarations`,
    "ForInOfStatement[5,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[5,0].ContainsDuplicateLabels`,
    "ForInOfStatement[5,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[5,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[5,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[5,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[5,0].EarlyErrors" -> `AL::ForInOfStatement[5,0].EarlyErrors`,
    "ForInOfStatement[5,0].EarlyErrors" -> `AL::ForInOfStatement[5,0].EarlyErrors`,
    "ForInOfStatement[5,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[5,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[5,0].HasCallInTailPosition" -> `AL::ForInOfStatement[5,0].HasCallInTailPosition`,
    "ForInOfStatement[5,0].VarDeclaredNames" -> `AL::ForInOfStatement[5,0].VarDeclaredNames`,
    "ForInOfStatement[5,0].VarScopedDeclarations" -> `AL::ForInOfStatement[5,0].VarScopedDeclarations`,
    "ForInOfStatement[6,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[6,0].ContainsDuplicateLabels`,
    "ForInOfStatement[6,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[6,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[6,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[6,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[6,0].EarlyErrors" -> `AL::ForInOfStatement[6,0].EarlyErrors`,
    "ForInOfStatement[6,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[6,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[6,0].HasCallInTailPosition" -> `AL::ForInOfStatement[6,0].HasCallInTailPosition`,
    "ForInOfStatement[6,0].VarDeclaredNames" -> `AL::ForInOfStatement[6,0].VarDeclaredNames`,
    "ForInOfStatement[6,0].VarScopedDeclarations" -> `AL::ForInOfStatement[6,0].VarScopedDeclarations`,
    "ForInOfStatement[7,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[7,0].ContainsDuplicateLabels`,
    "ForInOfStatement[7,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[7,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[7,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[7,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[7,0].EarlyErrors" -> `AL::ForInOfStatement[7,0].EarlyErrors`,
    "ForInOfStatement[7,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[7,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[7,0].HasCallInTailPosition" -> `AL::ForInOfStatement[7,0].HasCallInTailPosition`,
    "ForInOfStatement[7,0].VarDeclaredNames" -> `AL::ForInOfStatement[7,0].VarDeclaredNames`,
    "ForInOfStatement[7,0].VarScopedDeclarations" -> `AL::ForInOfStatement[7,0].VarScopedDeclarations`,
    "ForInOfStatement[8,0].ContainsDuplicateLabels" -> `AL::ForInOfStatement[8,0].ContainsDuplicateLabels`,
    "ForInOfStatement[8,0].ContainsUndefinedBreakTarget" -> `AL::ForInOfStatement[8,0].ContainsUndefinedBreakTarget`,
    "ForInOfStatement[8,0].ContainsUndefinedContinueTarget" -> `AL::ForInOfStatement[8,0].ContainsUndefinedContinueTarget`,
    "ForInOfStatement[8,0].EarlyErrors" -> `AL::ForInOfStatement[8,0].EarlyErrors`,
    "ForInOfStatement[8,0].EarlyErrors" -> `AL::ForInOfStatement[8,0].EarlyErrors`,
    "ForInOfStatement[8,0].ForInOfLoopEvaluation" -> `AL::ForInOfStatement[8,0].ForInOfLoopEvaluation`,
    "ForInOfStatement[8,0].HasCallInTailPosition" -> `AL::ForInOfStatement[8,0].HasCallInTailPosition`,
    "ForInOfStatement[8,0].VarDeclaredNames" -> `AL::ForInOfStatement[8,0].VarDeclaredNames`,
    "ForInOfStatement[8,0].VarScopedDeclarations" -> `AL::ForInOfStatement[8,0].VarScopedDeclarations`,
    "ForStatement[0,7].ContainsDuplicateLabels" -> `AL::ForStatement[0,7].ContainsDuplicateLabels`,
    "ForStatement[0,7].ContainsUndefinedBreakTarget" -> `AL::ForStatement[0,7].ContainsUndefinedBreakTarget`,
    "ForStatement[0,7].ContainsUndefinedContinueTarget" -> `AL::ForStatement[0,7].ContainsUndefinedContinueTarget`,
    "ForStatement[0,7].EarlyErrors" -> `AL::ForStatement[0,7].EarlyErrors`,
    "ForStatement[0,7].ForLoopEvaluation" -> `AL::ForStatement[0,7].ForLoopEvaluation`,
    "ForStatement[0,7].HasCallInTailPosition" -> `AL::ForStatement[0,7].HasCallInTailPosition`,
    "ForStatement[0,7].VarDeclaredNames" -> `AL::ForStatement[0,7].VarDeclaredNames`,
    "ForStatement[0,7].VarScopedDeclarations" -> `AL::ForStatement[0,7].VarScopedDeclarations`,
    "ForStatement[1,3].ContainsDuplicateLabels" -> `AL::ForStatement[1,3].ContainsDuplicateLabels`,
    "ForStatement[1,3].ContainsUndefinedBreakTarget" -> `AL::ForStatement[1,3].ContainsUndefinedBreakTarget`,
    "ForStatement[1,3].ContainsUndefinedContinueTarget" -> `AL::ForStatement[1,3].ContainsUndefinedContinueTarget`,
    "ForStatement[1,3].EarlyErrors" -> `AL::ForStatement[1,3].EarlyErrors`,
    "ForStatement[1,3].ForLoopEvaluation" -> `AL::ForStatement[1,3].ForLoopEvaluation`,
    "ForStatement[1,3].HasCallInTailPosition" -> `AL::ForStatement[1,3].HasCallInTailPosition`,
    "ForStatement[1,3].VarDeclaredNames" -> `AL::ForStatement[1,3].VarDeclaredNames`,
    "ForStatement[1,3].VarScopedDeclarations" -> `AL::ForStatement[1,3].VarScopedDeclarations`,
    "ForStatement[2,3].ContainsDuplicateLabels" -> `AL::ForStatement[2,3].ContainsDuplicateLabels`,
    "ForStatement[2,3].ContainsUndefinedBreakTarget" -> `AL::ForStatement[2,3].ContainsUndefinedBreakTarget`,
    "ForStatement[2,3].ContainsUndefinedContinueTarget" -> `AL::ForStatement[2,3].ContainsUndefinedContinueTarget`,
    "ForStatement[2,3].EarlyErrors" -> `AL::ForStatement[2,3].EarlyErrors`,
    "ForStatement[2,3].EarlyErrors" -> `AL::ForStatement[2,3].EarlyErrors`,
    "ForStatement[2,3].ForLoopEvaluation" -> `AL::ForStatement[2,3].ForLoopEvaluation`,
    "ForStatement[2,3].HasCallInTailPosition" -> `AL::ForStatement[2,3].HasCallInTailPosition`,
    "ForStatement[2,3].VarDeclaredNames" -> `AL::ForStatement[2,3].VarDeclaredNames`,
    "ForStatement[2,3].VarScopedDeclarations" -> `AL::ForStatement[2,3].VarScopedDeclarations`,
    "FormalParameterList[0,0].ExpectedArgumentCount" -> `AL::FormalParameterList[0,0].ExpectedArgumentCount`,
    "FormalParameterList[1,0].BoundNames" -> `AL::FormalParameterList[1,0].BoundNames`,
    "FormalParameterList[1,0].ContainsExpression" -> `AL::FormalParameterList[1,0].ContainsExpression`,
    "FormalParameterList[1,0].ExpectedArgumentCount" -> `AL::FormalParameterList[1,0].ExpectedArgumentCount`,
    "FormalParameterList[1,0].HasInitializer" -> `AL::FormalParameterList[1,0].HasInitializer`,
    "FormalParameterList[1,0].IsSimpleParameterList" -> `AL::FormalParameterList[1,0].IsSimpleParameterList`,
    "FormalParameterList[1,0].IteratorBindingInitialization" -> `AL::FormalParameterList[1,0].IteratorBindingInitialization`,
    "FormalParameter[0,0].IsSimpleParameterList" -> `AL::FormalParameter[0,0].IsSimpleParameterList`,
    "FormalParameters[0,0].BoundNames" -> `AL::FormalParameters[0,0].BoundNames`,
    "FormalParameters[0,0].ContainsExpression" -> `AL::FormalParameters[0,0].ContainsExpression`,
    "FormalParameters[0,0].ExpectedArgumentCount" -> `AL::FormalParameters[0,0].ExpectedArgumentCount`,
    "FormalParameters[0,0].IsSimpleParameterList" -> `AL::FormalParameters[0,0].IsSimpleParameterList`,
    "FormalParameters[0,0].IteratorBindingInitialization" -> `AL::FormalParameters[0,0].IteratorBindingInitialization`,
    "FormalParameters[1,0].ExpectedArgumentCount" -> `AL::FormalParameters[1,0].ExpectedArgumentCount`,
    "FormalParameters[1,0].IsSimpleParameterList" -> `AL::FormalParameters[1,0].IsSimpleParameterList`,
    "FormalParameters[2,0].EarlyErrors" -> `AL::FormalParameters[2,0].EarlyErrors`,
    "FormalParameters[4,0].BoundNames" -> `AL::FormalParameters[4,0].BoundNames`,
    "FormalParameters[4,0].ContainsExpression" -> `AL::FormalParameters[4,0].ContainsExpression`,
    "FormalParameters[4,0].ExpectedArgumentCount" -> `AL::FormalParameters[4,0].ExpectedArgumentCount`,
    "FormalParameters[4,0].IsSimpleParameterList" -> `AL::FormalParameters[4,0].IsSimpleParameterList`,
    "FormalParameters[4,0].IteratorBindingInitialization" -> `AL::FormalParameters[4,0].IteratorBindingInitialization`,
    "FromPropertyDescriptor" -> `AL::FromPropertyDescriptor`,
    "FulfillPromise" -> `AL::FulfillPromise`,
    "Function" -> `AL::Function`,
    "Function.prototype" -> `AL::Function.prototype`,
    "Function.prototype.apply" -> `AL::Function.prototype.apply`,
    "Function.prototype.bind" -> `AL::Function.prototype.bind`,
    "Function.prototype.call" -> `AL::Function.prototype.call`,
    "Function.prototype.toString" -> `AL::Function.prototype.toString`,
    "Function.prototype[SYMBOL_hasInstance]" -> `AL::Function.prototype[SYMBOL_hasInstance]`,
    "FunctionBody[0,0].EarlyErrors" -> `AL::FunctionBody[0,0].EarlyErrors`,
    "FunctionBody[0,0].EvaluateBody" -> `AL::FunctionBody[0,0].EvaluateBody`,
    "FunctionBody[0,0].EvaluateFunctionBody" -> `AL::FunctionBody[0,0].EvaluateFunctionBody`,
    "FunctionBody[0,0].FunctionBodyContainsUseStrict" -> `AL::FunctionBody[0,0].FunctionBodyContainsUseStrict`,
    "FunctionDeclarationInstantiation" -> `AL::FunctionDeclarationInstantiation`,
    "FunctionDeclaration[0,0].BoundNames" -> `AL::FunctionDeclaration[0,0].BoundNames`,
    "FunctionDeclaration[0,0].Contains" -> `AL::FunctionDeclaration[0,0].Contains`,
    "FunctionDeclaration[0,0].EarlyErrors" -> `AL::FunctionDeclaration[0,0].EarlyErrors`,
    "FunctionDeclaration[0,0].Evaluation" -> `AL::FunctionDeclaration[0,0].Evaluation`,
    "FunctionDeclaration[0,0].InstantiateFunctionObject" -> `AL::FunctionDeclaration[0,0].InstantiateFunctionObject`,
    "FunctionDeclaration[0,0].InstantiateOrdinaryFunctionObject" -> `AL::FunctionDeclaration[0,0].InstantiateOrdinaryFunctionObject`,
    "FunctionDeclaration[0,0].IsConstantDeclaration" -> `AL::FunctionDeclaration[0,0].IsConstantDeclaration`,
    "FunctionDeclaration[1,0].BoundNames" -> `AL::FunctionDeclaration[1,0].BoundNames`,
    "FunctionDeclaration[1,0].Contains" -> `AL::FunctionDeclaration[1,0].Contains`,
    "FunctionDeclaration[1,0].EarlyErrors" -> `AL::FunctionDeclaration[1,0].EarlyErrors`,
    "FunctionDeclaration[1,0].Evaluation" -> `AL::FunctionDeclaration[1,0].Evaluation`,
    "FunctionDeclaration[1,0].InstantiateFunctionObject" -> `AL::FunctionDeclaration[1,0].InstantiateFunctionObject`,
    "FunctionDeclaration[1,0].InstantiateOrdinaryFunctionObject" -> `AL::FunctionDeclaration[1,0].InstantiateOrdinaryFunctionObject`,
    "FunctionDeclaration[1,0].IsConstantDeclaration" -> `AL::FunctionDeclaration[1,0].IsConstantDeclaration`,
    "FunctionEnvironmentRecord.BindThisValue" -> `AL::FunctionEnvironmentRecord.BindThisValue`,
    "FunctionEnvironmentRecord.GetSuperBase" -> `AL::FunctionEnvironmentRecord.GetSuperBase`,
    "FunctionEnvironmentRecord.GetThisBinding" -> `AL::FunctionEnvironmentRecord.GetThisBinding`,
    "FunctionEnvironmentRecord.HasSuperBinding" -> `AL::FunctionEnvironmentRecord.HasSuperBinding`,
    "FunctionEnvironmentRecord.HasThisBinding" -> `AL::FunctionEnvironmentRecord.HasThisBinding`,
    "FunctionExpression[0,0].HasName" -> `AL::FunctionExpression[0,0].HasName`,
    "FunctionExpression[0,0].InstantiateOrdinaryFunctionExpression" -> `AL::FunctionExpression[0,0].InstantiateOrdinaryFunctionExpression`,
    "FunctionExpression[0,0].NamedEvaluation" -> `AL::FunctionExpression[0,0].NamedEvaluation`,
    "FunctionExpression[0,1].Contains" -> `AL::FunctionExpression[0,1].Contains`,
    "FunctionExpression[0,1].EarlyErrors" -> `AL::FunctionExpression[0,1].EarlyErrors`,
    "FunctionExpression[0,1].Evaluation" -> `AL::FunctionExpression[0,1].Evaluation`,
    "FunctionExpression[0,1].HasName" -> `AL::FunctionExpression[0,1].HasName`,
    "FunctionExpression[0,1].InstantiateOrdinaryFunctionExpression" -> `AL::FunctionExpression[0,1].InstantiateOrdinaryFunctionExpression`,
    "FunctionExpression[0,1].IsFunctionDefinition" -> `AL::FunctionExpression[0,1].IsFunctionDefinition`,
    "FunctionStatementList[0,0].ContainsDuplicateLabels" -> `AL::FunctionStatementList[0,0].ContainsDuplicateLabels`,
    "FunctionStatementList[0,0].ContainsUndefinedBreakTarget" -> `AL::FunctionStatementList[0,0].ContainsUndefinedBreakTarget`,
    "FunctionStatementList[0,0].ContainsUndefinedContinueTarget" -> `AL::FunctionStatementList[0,0].ContainsUndefinedContinueTarget`,
    "FunctionStatementList[0,0].Evaluation" -> `AL::FunctionStatementList[0,0].Evaluation`,
    "FunctionStatementList[0,0].HasCallInTailPosition" -> `AL::FunctionStatementList[0,0].HasCallInTailPosition`,
    "FunctionStatementList[0,0].LexicallyDeclaredNames" -> `AL::FunctionStatementList[0,0].LexicallyDeclaredNames`,
    "FunctionStatementList[0,0].LexicallyScopedDeclarations" -> `AL::FunctionStatementList[0,0].LexicallyScopedDeclarations`,
    "FunctionStatementList[0,0].VarDeclaredNames" -> `AL::FunctionStatementList[0,0].VarDeclaredNames`,
    "FunctionStatementList[0,0].VarScopedDeclarations" -> `AL::FunctionStatementList[0,0].VarScopedDeclarations`,
    "FunctionStatementList[0,1].LexicallyDeclaredNames" -> `AL::FunctionStatementList[0,1].LexicallyDeclaredNames`,
    "FunctionStatementList[0,1].LexicallyScopedDeclarations" -> `AL::FunctionStatementList[0,1].LexicallyScopedDeclarations`,
    "FunctionStatementList[0,1].VarDeclaredNames" -> `AL::FunctionStatementList[0,1].VarDeclaredNames`,
    "FunctionStatementList[0,1].VarScopedDeclarations" -> `AL::FunctionStatementList[0,1].VarScopedDeclarations`,
    "Generator.prototype.next" -> `AL::Generator.prototype.next`,
    "Generator.prototype.return" -> `AL::Generator.prototype.return`,
    "Generator.prototype.throw" -> `AL::Generator.prototype.throw`,
    "GeneratorBody[0,0].EvaluateBody" -> `AL::GeneratorBody[0,0].EvaluateBody`,
    "GeneratorBody[0,0].EvaluateGeneratorBody" -> `AL::GeneratorBody[0,0].EvaluateGeneratorBody`,
    "GeneratorDeclaration[0,0].BoundNames" -> `AL::GeneratorDeclaration[0,0].BoundNames`,
    "GeneratorDeclaration[0,0].Contains" -> `AL::GeneratorDeclaration[0,0].Contains`,
    "GeneratorDeclaration[0,0].EarlyErrors" -> `AL::GeneratorDeclaration[0,0].EarlyErrors`,
    "GeneratorDeclaration[0,0].InstantiateFunctionObject" -> `AL::GeneratorDeclaration[0,0].InstantiateFunctionObject`,
    "GeneratorDeclaration[0,0].InstantiateGeneratorFunctionObject" -> `AL::GeneratorDeclaration[0,0].InstantiateGeneratorFunctionObject`,
    "GeneratorDeclaration[0,0].IsConstantDeclaration" -> `AL::GeneratorDeclaration[0,0].IsConstantDeclaration`,
    "GeneratorDeclaration[1,0].BoundNames" -> `AL::GeneratorDeclaration[1,0].BoundNames`,
    "GeneratorDeclaration[1,0].Contains" -> `AL::GeneratorDeclaration[1,0].Contains`,
    "GeneratorDeclaration[1,0].EarlyErrors" -> `AL::GeneratorDeclaration[1,0].EarlyErrors`,
    "GeneratorDeclaration[1,0].InstantiateFunctionObject" -> `AL::GeneratorDeclaration[1,0].InstantiateFunctionObject`,
    "GeneratorDeclaration[1,0].InstantiateGeneratorFunctionObject" -> `AL::GeneratorDeclaration[1,0].InstantiateGeneratorFunctionObject`,
    "GeneratorDeclaration[1,0].IsConstantDeclaration" -> `AL::GeneratorDeclaration[1,0].IsConstantDeclaration`,
    "GeneratorExpression[0,0].HasName" -> `AL::GeneratorExpression[0,0].HasName`,
    "GeneratorExpression[0,0].InstantiateGeneratorFunctionExpression" -> `AL::GeneratorExpression[0,0].InstantiateGeneratorFunctionExpression`,
    "GeneratorExpression[0,0].NamedEvaluation" -> `AL::GeneratorExpression[0,0].NamedEvaluation`,
    "GeneratorExpression[0,1].Contains" -> `AL::GeneratorExpression[0,1].Contains`,
    "GeneratorExpression[0,1].EarlyErrors" -> `AL::GeneratorExpression[0,1].EarlyErrors`,
    "GeneratorExpression[0,1].Evaluation" -> `AL::GeneratorExpression[0,1].Evaluation`,
    "GeneratorExpression[0,1].HasName" -> `AL::GeneratorExpression[0,1].HasName`,
    "GeneratorExpression[0,1].InstantiateGeneratorFunctionExpression" -> `AL::GeneratorExpression[0,1].InstantiateGeneratorFunctionExpression`,
    "GeneratorExpression[0,1].IsFunctionDefinition" -> `AL::GeneratorExpression[0,1].IsFunctionDefinition`,
    "GeneratorFunction" -> `AL::GeneratorFunction`,
    "GeneratorMethod[0,0].ComputedPropertyContains" -> `AL::GeneratorMethod[0,0].ComputedPropertyContains`,
    "GeneratorMethod[0,0].EarlyErrors" -> `AL::GeneratorMethod[0,0].EarlyErrors`,
    "GeneratorMethod[0,0].HasDirectSuper" -> `AL::GeneratorMethod[0,0].HasDirectSuper`,
    "GeneratorMethod[0,0].MethodDefinitionEvaluation" -> `AL::GeneratorMethod[0,0].MethodDefinitionEvaluation`,
    "GeneratorMethod[0,0].PropName" -> `AL::GeneratorMethod[0,0].PropName`,
    "GeneratorMethod[0,0].PropertyDefinitionEvaluation" -> `AL::GeneratorMethod[0,0].PropertyDefinitionEvaluation`,
    "GeneratorResume" -> `AL::GeneratorResume`,
    "GeneratorResumeAbrupt" -> `AL::GeneratorResumeAbrupt`,
    "GeneratorStart" -> `AL::GeneratorStart`,
    "GeneratorValidate" -> `AL::GeneratorValidate`,
    "GeneratorYield" -> `AL::GeneratorYield`,
    "Get" -> `AL::Get`,
    "GetActiveScriptOrModule" -> `AL::GetActiveScriptOrModule`,
    "GetArgument" -> `AL::GetArgument`,
    "GetCapabilitiesExecutorFunctions" -> `AL::GetCapabilitiesExecutorFunctions`,
    "GetCapabilitiesExecutorFunctions" -> `AL::GetCapabilitiesExecutorFunctions`,
    "GetExportedNames" -> `AL::GetExportedNames`,
    "GetFunctionRealm" -> `AL::GetFunctionRealm`,
    "GetGeneratorKind" -> `AL::GetGeneratorKind`,
    "GetGlobalObject" -> `AL::GetGlobalObject`,
    "GetIdentifierReference" -> `AL::GetIdentifierReference`,
    "GetIterator" -> `AL::GetIterator`,
    "GetMethod" -> `AL::GetMethod`,
    "GetModifySetValueInBuffer" -> `AL::GetModifySetValueInBuffer`,
    "GetModuleNamespace" -> `AL::GetModuleNamespace`,
    "GetNewTarget" -> `AL::GetNewTarget`,
    "GetOwnPropertyKeys" -> `AL::GetOwnPropertyKeys`,
    "GetPromiseResolve" -> `AL::GetPromiseResolve`,
    "GetPrototypeFromConstructor" -> `AL::GetPrototypeFromConstructor`,
    "GetSubstitution" -> `AL::GetSubstitution`,
    "GetSuperConstructor" -> `AL::GetSuperConstructor`,
    "GetTemplateObject" -> `AL::GetTemplateObject`,
    "GetThisEnvironment" -> `AL::GetThisEnvironment`,
    "GetThisValue" -> `AL::GetThisValue`,
    "GetV" -> `AL::GetV`,
    "GetValue" -> `AL::GetValue`,
    "GetValueFromBuffer" -> `AL::GetValueFromBuffer`,
    "GetViewValue" -> `AL::GetViewValue`,
    "GetWaiterList" -> `AL::GetWaiterList`,
    "GlobalDeclarationInstantiation" -> `AL::GlobalDeclarationInstantiation`,
    "GlobalEnvironmentRecord.CanDeclareGlobalFunction" -> `AL::GlobalEnvironmentRecord.CanDeclareGlobalFunction`,
    "GlobalEnvironmentRecord.CanDeclareGlobalVar" -> `AL::GlobalEnvironmentRecord.CanDeclareGlobalVar`,
    "GlobalEnvironmentRecord.CreateGlobalFunctionBinding" -> `AL::GlobalEnvironmentRecord.CreateGlobalFunctionBinding`,
    "GlobalEnvironmentRecord.CreateGlobalVarBinding" -> `AL::GlobalEnvironmentRecord.CreateGlobalVarBinding`,
    "GlobalEnvironmentRecord.CreateImmutableBinding" -> `AL::GlobalEnvironmentRecord.CreateImmutableBinding`,
    "GlobalEnvironmentRecord.CreateMutableBinding" -> `AL::GlobalEnvironmentRecord.CreateMutableBinding`,
    "GlobalEnvironmentRecord.DeleteBinding" -> `AL::GlobalEnvironmentRecord.DeleteBinding`,
    "GlobalEnvironmentRecord.GetBindingValue" -> `AL::GlobalEnvironmentRecord.GetBindingValue`,
    "GlobalEnvironmentRecord.GetThisBinding" -> `AL::GlobalEnvironmentRecord.GetThisBinding`,
    "GlobalEnvironmentRecord.HasBinding" -> `AL::GlobalEnvironmentRecord.HasBinding`,
    "GlobalEnvironmentRecord.HasLexicalDeclaration" -> `AL::GlobalEnvironmentRecord.HasLexicalDeclaration`,
    "GlobalEnvironmentRecord.HasRestrictedGlobalProperty" -> `AL::GlobalEnvironmentRecord.HasRestrictedGlobalProperty`,
    "GlobalEnvironmentRecord.HasSuperBinding" -> `AL::GlobalEnvironmentRecord.HasSuperBinding`,
    "GlobalEnvironmentRecord.HasThisBinding" -> `AL::GlobalEnvironmentRecord.HasThisBinding`,
    "GlobalEnvironmentRecord.HasVarDeclaration" -> `AL::GlobalEnvironmentRecord.HasVarDeclaration`,
    "GlobalEnvironmentRecord.InitializeBinding" -> `AL::GlobalEnvironmentRecord.InitializeBinding`,
    "GlobalEnvironmentRecord.SetMutableBinding" -> `AL::GlobalEnvironmentRecord.SetMutableBinding`,
    "GlobalEnvironmentRecord.WithBaseObject" -> `AL::GlobalEnvironmentRecord.WithBaseObject`,
    "HasOwnProperty" -> `AL::HasOwnProperty`,
    "HasProperty" -> `AL::HasProperty`,
    "HoistableDeclaration[0,0].DeclarationPart" -> `AL::HoistableDeclaration[0,0].DeclarationPart`,
    "HoistableDeclaration[0,0].Evaluation" -> `AL::HoistableDeclaration[0,0].Evaluation`,
    "HoistableDeclaration[1,0].DeclarationPart" -> `AL::HoistableDeclaration[1,0].DeclarationPart`,
    "HoistableDeclaration[1,0].Evaluation" -> `AL::HoistableDeclaration[1,0].Evaluation`,
    "HoistableDeclaration[2,0].DeclarationPart" -> `AL::HoistableDeclaration[2,0].DeclarationPart`,
    "HoistableDeclaration[2,0].Evaluation" -> `AL::HoistableDeclaration[2,0].Evaluation`,
    "HoistableDeclaration[3,0].DeclarationPart" -> `AL::HoistableDeclaration[3,0].DeclarationPart`,
    "HoistableDeclaration[3,0].Evaluation" -> `AL::HoistableDeclaration[3,0].Evaluation`,
    "HostCallJobCallback" -> `AL::HostCallJobCallback`,
    "HostEnsureCanCompileStrings" -> `AL::HostEnsureCanCompileStrings`,
    "HostEventSet" -> `AL::HostEventSet`,
    "HostFinalizeImportMeta" -> `AL::HostFinalizeImportMeta`,
    "HostGetImportMetaProperties" -> `AL::HostGetImportMetaProperties`,
    "HostImportModuleDynamically" -> `AL::HostImportModuleDynamically`,
    "HostMakeJobCallback" -> `AL::HostMakeJobCallback`,
    "HostPrint" -> `AL::HostPrint`,
    "HostPromiseRejectionTracker" -> `AL::HostPromiseRejectionTracker`,
    "HourFromTime" -> `AL::HourFromTime`,
    "HoursPerDay" -> `AL::HoursPerDay`,
    "IdentifierName[0,0].StringValue" -> `AL::IdentifierName[0,0].StringValue`,
    "IdentifierName[1,0].StringValue" -> `AL::IdentifierName[1,0].StringValue`,
    "IdentifierPart[2,0].EarlyErrors" -> `AL::IdentifierPart[2,0].EarlyErrors`,
    "IdentifierReference[0,0].AssignmentTargetType" -> `AL::IdentifierReference[0,0].AssignmentTargetType`,
    "IdentifierReference[0,0].EarlyErrors" -> `AL::IdentifierReference[0,0].EarlyErrors`,
    "IdentifierReference[0,0].Evaluation" -> `AL::IdentifierReference[0,0].Evaluation`,
    "IdentifierReference[1,0].AssignmentTargetType" -> `AL::IdentifierReference[1,0].AssignmentTargetType`,
    "IdentifierReference[1,0].EarlyErrors" -> `AL::IdentifierReference[1,0].EarlyErrors`,
    "IdentifierReference[1,0].Evaluation" -> `AL::IdentifierReference[1,0].Evaluation`,
    "IdentifierReference[1,0].StringValue" -> `AL::IdentifierReference[1,0].StringValue`,
    "IdentifierReference[2,0].AssignmentTargetType" -> `AL::IdentifierReference[2,0].AssignmentTargetType`,
    "IdentifierReference[2,0].EarlyErrors" -> `AL::IdentifierReference[2,0].EarlyErrors`,
    "IdentifierReference[2,0].Evaluation" -> `AL::IdentifierReference[2,0].Evaluation`,
    "IdentifierReference[2,0].StringValue" -> `AL::IdentifierReference[2,0].StringValue`,
    "IdentifierStart[3,0].EarlyErrors" -> `AL::IdentifierStart[3,0].EarlyErrors`,
    "Identifier[0,0].EarlyErrors" -> `AL::Identifier[0,0].EarlyErrors`,
    "Identifier[0,0].StringValue" -> `AL::Identifier[0,0].StringValue`,
    "IfAbruptRejectPromise" -> `AL::IfAbruptRejectPromise`,
    "IfAbruptRejectPromise" -> `AL::IfAbruptRejectPromise`,
    "IfStatement[0,0].ContainsDuplicateLabels" -> `AL::IfStatement[0,0].ContainsDuplicateLabels`,
    "IfStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::IfStatement[0,0].ContainsUndefinedBreakTarget`,
    "IfStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::IfStatement[0,0].ContainsUndefinedContinueTarget`,
    "IfStatement[0,0].EarlyErrors" -> `AL::IfStatement[0,0].EarlyErrors`,
    "IfStatement[0,0].Evaluation" -> `AL::IfStatement[0,0].Evaluation`,
    "IfStatement[0,0].HasCallInTailPosition" -> `AL::IfStatement[0,0].HasCallInTailPosition`,
    "IfStatement[0,0].VarDeclaredNames" -> `AL::IfStatement[0,0].VarDeclaredNames`,
    "IfStatement[0,0].VarScopedDeclarations" -> `AL::IfStatement[0,0].VarScopedDeclarations`,
    "IfStatement[1,0].ContainsDuplicateLabels" -> `AL::IfStatement[1,0].ContainsDuplicateLabels`,
    "IfStatement[1,0].ContainsUndefinedBreakTarget" -> `AL::IfStatement[1,0].ContainsUndefinedBreakTarget`,
    "IfStatement[1,0].ContainsUndefinedContinueTarget" -> `AL::IfStatement[1,0].ContainsUndefinedContinueTarget`,
    "IfStatement[1,0].EarlyErrors" -> `AL::IfStatement[1,0].EarlyErrors`,
    "IfStatement[1,0].Evaluation" -> `AL::IfStatement[1,0].Evaluation`,
    "IfStatement[1,0].HasCallInTailPosition" -> `AL::IfStatement[1,0].HasCallInTailPosition`,
    "IfStatement[1,0].VarDeclaredNames" -> `AL::IfStatement[1,0].VarDeclaredNames`,
    "IfStatement[1,0].VarScopedDeclarations" -> `AL::IfStatement[1,0].VarScopedDeclarations`,
    "ImmutablePrototypeExoticObject.SetPrototypeOf" -> `AL::ImmutablePrototypeExoticObject.SetPrototypeOf`,
    "ImportCall[0,0].Evaluation" -> `AL::ImportCall[0,0].Evaluation`,
    "ImportClause[3,0].BoundNames" -> `AL::ImportClause[3,0].BoundNames`,
    "ImportClause[3,0].ImportEntriesForModule" -> `AL::ImportClause[3,0].ImportEntriesForModule`,
    "ImportClause[4,0].BoundNames" -> `AL::ImportClause[4,0].BoundNames`,
    "ImportClause[4,0].ImportEntriesForModule" -> `AL::ImportClause[4,0].ImportEntriesForModule`,
    "ImportDeclaration[0,0].BoundNames" -> `AL::ImportDeclaration[0,0].BoundNames`,
    "ImportDeclaration[0,0].ImportEntries" -> `AL::ImportDeclaration[0,0].ImportEntries`,
    "ImportDeclaration[0,0].ModuleRequests" -> `AL::ImportDeclaration[0,0].ModuleRequests`,
    "ImportDeclaration[1,0].BoundNames" -> `AL::ImportDeclaration[1,0].BoundNames`,
    "ImportDeclaration[1,0].ImportEntries" -> `AL::ImportDeclaration[1,0].ImportEntries`,
    "ImportMeta[0,0].AssignmentTargetType" -> `AL::ImportMeta[0,0].AssignmentTargetType`,
    "ImportMeta[0,0].EarlyErrors" -> `AL::ImportMeta[0,0].EarlyErrors`,
    "ImportMeta[0,0].Evaluation" -> `AL::ImportMeta[0,0].Evaluation`,
    "ImportSpecifier[0,0].ImportEntriesForModule" -> `AL::ImportSpecifier[0,0].ImportEntriesForModule`,
    "ImportSpecifier[1,0].BoundNames" -> `AL::ImportSpecifier[1,0].BoundNames`,
    "ImportSpecifier[1,0].ImportEntriesForModule" -> `AL::ImportSpecifier[1,0].ImportEntriesForModule`,
    "ImportedDefaultBinding[0,0].ImportEntriesForModule" -> `AL::ImportedDefaultBinding[0,0].ImportEntriesForModule`,
    "ImportedLocalNames" -> `AL::ImportedLocalNames`,
    "ImportsList[1,0].BoundNames" -> `AL::ImportsList[1,0].BoundNames`,
    "ImportsList[1,0].ImportEntriesForModule" -> `AL::ImportsList[1,0].ImportEntriesForModule`,
    "InLeapYear" -> `AL::InLeapYear`,
    "InitializeBoundName" -> `AL::InitializeBoundName`,
    "InitializeEnvironment" -> `AL::InitializeEnvironment`,
    "InitializeHostDefinedRealm" -> `AL::InitializeHostDefinedRealm`,
    "InitializeReferencedBinding" -> `AL::InitializeReferencedBinding`,
    "InitializeTypedArrayFromArrayBuffer" -> `AL::InitializeTypedArrayFromArrayBuffer`,
    "InitializeTypedArrayFromArrayLike" -> `AL::InitializeTypedArrayFromArrayLike`,
    "InitializeTypedArrayFromList" -> `AL::InitializeTypedArrayFromList`,
    "InitializeTypedArrayFromTypedArray" -> `AL::InitializeTypedArrayFromTypedArray`,
    "InnerModuleEvaluation" -> `AL::InnerModuleEvaluation`,
    "InnerModuleLinking" -> `AL::InnerModuleLinking`,
    "InstanceofOperator" -> `AL::InstanceofOperator`,
    "IntegerIndexedElementGet" -> `AL::IntegerIndexedElementGet`,
    "IntegerIndexedElementSet" -> `AL::IntegerIndexedElementSet`,
    "IntegerIndexedExoticObject.DefineOwnProperty" -> `AL::IntegerIndexedExoticObject.DefineOwnProperty`,
    "IntegerIndexedExoticObject.Delete" -> `AL::IntegerIndexedExoticObject.Delete`,
    "IntegerIndexedExoticObject.Get" -> `AL::IntegerIndexedExoticObject.Get`,
    "IntegerIndexedExoticObject.GetOwnProperty" -> `AL::IntegerIndexedExoticObject.GetOwnProperty`,
    "IntegerIndexedExoticObject.HasProperty" -> `AL::IntegerIndexedExoticObject.HasProperty`,
    "IntegerIndexedExoticObject.OwnPropertyKeys" -> `AL::IntegerIndexedExoticObject.OwnPropertyKeys`,
    "IntegerIndexedExoticObject.Set" -> `AL::IntegerIndexedExoticObject.Set`,
    "IntegerIndexedObjectCreate" -> `AL::IntegerIndexedObjectCreate`,
    "InternalizeJSONProperty" -> `AL::InternalizeJSONProperty`,
    "Invoke" -> `AL::Invoke`,
    "IsAccessorDescriptor" -> `AL::IsAccessorDescriptor`,
    "IsAnonymousFunctionDefinition" -> `AL::IsAnonymousFunctionDefinition`,
    "IsArray" -> `AL::IsArray`,
    "IsBigIntElementType" -> `AL::IsBigIntElementType`,
    "IsCallable" -> `AL::IsCallable`,
    "IsCompatiblePropertyDescriptor" -> `AL::IsCompatiblePropertyDescriptor`,
    "IsConcatSpreadable" -> `AL::IsConcatSpreadable`,
    "IsConstructor" -> `AL::IsConstructor`,
    "IsDataDescriptor" -> `AL::IsDataDescriptor`,
    "IsDetachedBuffer" -> `AL::IsDetachedBuffer`,
    "IsExtensible" -> `AL::IsExtensible`,
    "IsGenericDescriptor" -> `AL::IsGenericDescriptor`,
    "IsInTailPosition" -> `AL::IsInTailPosition`,
    "IsIntegralNumber" -> `AL::IsIntegralNumber`,
    "IsLabelledFunction" -> `AL::IsLabelledFunction`,
    "IsNoTearConfiguration" -> `AL::IsNoTearConfiguration`,
    "IsPromise" -> `AL::IsPromise`,
    "IsPropertyKey" -> `AL::IsPropertyKey`,
    "IsPropertyReference" -> `AL::IsPropertyReference`,
    "IsRegExp" -> `AL::IsRegExp`,
    "IsSharedArrayBuffer" -> `AL::IsSharedArrayBuffer`,
    "IsStringPrefix" -> `AL::IsStringPrefix`,
    "IsSuperReference" -> `AL::IsSuperReference`,
    "IsUnclampedIntegerElementType" -> `AL::IsUnclampedIntegerElementType`,
    "IsUnresolvableReference" -> `AL::IsUnresolvableReference`,
    "IsUnsignedElementType" -> `AL::IsUnsignedElementType`,
    "IsValidIntegerIndex" -> `AL::IsValidIntegerIndex`,
    "IsValidRegularExpressionLiteral" -> `AL::IsValidRegularExpressionLiteral`,
    "IsWordChar" -> `AL::IsWordChar`,
    "IterableToList" -> `AL::IterableToList`,
    "IterationStatement[0,0].LoopEvaluation" -> `AL::IterationStatement[0,0].LoopEvaluation`,
    "IterationStatement[1,0].LoopEvaluation" -> `AL::IterationStatement[1,0].LoopEvaluation`,
    "IterationStatement[2,0].LoopEvaluation" -> `AL::IterationStatement[2,0].LoopEvaluation`,
    "IterationStatement[3,0].LoopEvaluation" -> `AL::IterationStatement[3,0].LoopEvaluation`,
    "IteratorClose" -> `AL::IteratorClose`,
    "IteratorComplete" -> `AL::IteratorComplete`,
    "IteratorNext" -> `AL::IteratorNext`,
    "IteratorStep" -> `AL::IteratorStep`,
    "IteratorValue" -> `AL::IteratorValue`,
    "JSON.parse" -> `AL::JSON.parse`,
    "JSON.stringify" -> `AL::JSON.stringify`,
    "LabelIdentifier[0,0].EarlyErrors" -> `AL::LabelIdentifier[0,0].EarlyErrors`,
    "LabelIdentifier[1,0].EarlyErrors" -> `AL::LabelIdentifier[1,0].EarlyErrors`,
    "LabelIdentifier[1,0].StringValue" -> `AL::LabelIdentifier[1,0].StringValue`,
    "LabelIdentifier[2,0].EarlyErrors" -> `AL::LabelIdentifier[2,0].EarlyErrors`,
    "LabelIdentifier[2,0].StringValue" -> `AL::LabelIdentifier[2,0].StringValue`,
    "LabelledItem[0,0].LexicallyDeclaredNames" -> `AL::LabelledItem[0,0].LexicallyDeclaredNames`,
    "LabelledItem[0,0].LexicallyScopedDeclarations" -> `AL::LabelledItem[0,0].LexicallyScopedDeclarations`,
    "LabelledItem[0,0].TopLevelVarDeclaredNames" -> `AL::LabelledItem[0,0].TopLevelVarDeclaredNames`,
    "LabelledItem[0,0].TopLevelVarScopedDeclarations" -> `AL::LabelledItem[0,0].TopLevelVarScopedDeclarations`,
    "LabelledItem[1,0].ContainsDuplicateLabels" -> `AL::LabelledItem[1,0].ContainsDuplicateLabels`,
    "LabelledItem[1,0].ContainsUndefinedBreakTarget" -> `AL::LabelledItem[1,0].ContainsUndefinedBreakTarget`,
    "LabelledItem[1,0].ContainsUndefinedContinueTarget" -> `AL::LabelledItem[1,0].ContainsUndefinedContinueTarget`,
    "LabelledItem[1,0].EarlyErrors" -> `AL::LabelledItem[1,0].EarlyErrors`,
    "LabelledItem[1,0].HasCallInTailPosition" -> `AL::LabelledItem[1,0].HasCallInTailPosition`,
    "LabelledItem[1,0].LabelledEvaluation" -> `AL::LabelledItem[1,0].LabelledEvaluation`,
    "LabelledItem[1,0].LexicallyDeclaredNames" -> `AL::LabelledItem[1,0].LexicallyDeclaredNames`,
    "LabelledItem[1,0].LexicallyScopedDeclarations" -> `AL::LabelledItem[1,0].LexicallyScopedDeclarations`,
    "LabelledItem[1,0].TopLevelVarDeclaredNames" -> `AL::LabelledItem[1,0].TopLevelVarDeclaredNames`,
    "LabelledItem[1,0].TopLevelVarScopedDeclarations" -> `AL::LabelledItem[1,0].TopLevelVarScopedDeclarations`,
    "LabelledItem[1,0].VarDeclaredNames" -> `AL::LabelledItem[1,0].VarDeclaredNames`,
    "LabelledItem[1,0].VarScopedDeclarations" -> `AL::LabelledItem[1,0].VarScopedDeclarations`,
    "LabelledStatement[0,0].ContainsDuplicateLabels" -> `AL::LabelledStatement[0,0].ContainsDuplicateLabels`,
    "LabelledStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::LabelledStatement[0,0].ContainsUndefinedBreakTarget`,
    "LabelledStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::LabelledStatement[0,0].ContainsUndefinedContinueTarget`,
    "LabelledStatement[0,0].Evaluation" -> `AL::LabelledStatement[0,0].Evaluation`,
    "LabelledStatement[0,0].HasCallInTailPosition" -> `AL::LabelledStatement[0,0].HasCallInTailPosition`,
    "LabelledStatement[0,0].LabelledEvaluation" -> `AL::LabelledStatement[0,0].LabelledEvaluation`,
    "LabelledStatement[0,0].LexicallyDeclaredNames" -> `AL::LabelledStatement[0,0].LexicallyDeclaredNames`,
    "LabelledStatement[0,0].LexicallyScopedDeclarations" -> `AL::LabelledStatement[0,0].LexicallyScopedDeclarations`,
    "LabelledStatement[0,0].TopLevelLexicallyDeclaredNames" -> `AL::LabelledStatement[0,0].TopLevelLexicallyDeclaredNames`,
    "LabelledStatement[0,0].TopLevelLexicallyScopedDeclarations" -> `AL::LabelledStatement[0,0].TopLevelLexicallyScopedDeclarations`,
    "LabelledStatement[0,0].TopLevelVarDeclaredNames" -> `AL::LabelledStatement[0,0].TopLevelVarDeclaredNames`,
    "LabelledStatement[0,0].TopLevelVarScopedDeclarations" -> `AL::LabelledStatement[0,0].TopLevelVarScopedDeclarations`,
    "LabelledStatement[0,0].VarDeclaredNames" -> `AL::LabelledStatement[0,0].VarDeclaredNames`,
    "LabelledStatement[0,0].VarScopedDeclarations" -> `AL::LabelledStatement[0,0].VarScopedDeclarations`,
    "Lambda" -> `AL::Lambda`,
    "LeaveCriticalSection" -> `AL::LeaveCriticalSection`,
    "LeftHandSideExpression[1,0].IsDestructuring" -> `AL::LeftHandSideExpression[1,0].IsDestructuring`,
    "LeftHandSideExpression[1,0].IsFunctionDefinition" -> `AL::LeftHandSideExpression[1,0].IsFunctionDefinition`,
    "LeftHandSideExpression[1,0].IsIdentifierRef" -> `AL::LeftHandSideExpression[1,0].IsIdentifierRef`,
    "LeftHandSideExpression[2,0].AssignmentTargetType" -> `AL::LeftHandSideExpression[2,0].AssignmentTargetType`,
    "LeftHandSideExpression[2,0].IsDestructuring" -> `AL::LeftHandSideExpression[2,0].IsDestructuring`,
    "LeftHandSideExpression[2,0].IsFunctionDefinition" -> `AL::LeftHandSideExpression[2,0].IsFunctionDefinition`,
    "LeftHandSideExpression[2,0].IsIdentifierRef" -> `AL::LeftHandSideExpression[2,0].IsIdentifierRef`,
    "LengthOfArrayLike" -> `AL::LengthOfArrayLike`,
    "LetOrConst[0,0].IsConstantDeclaration" -> `AL::LetOrConst[0,0].IsConstantDeclaration`,
    "LetOrConst[1,0].IsConstantDeclaration" -> `AL::LetOrConst[1,0].IsConstantDeclaration`,
    "LexicalBinding[0,0].Evaluation" -> `AL::LexicalBinding[0,0].Evaluation`,
    "LexicalBinding[0,1].BoundNames" -> `AL::LexicalBinding[0,1].BoundNames`,
    "LexicalBinding[0,1].EarlyErrors" -> `AL::LexicalBinding[0,1].EarlyErrors`,
    "LexicalBinding[0,1].Evaluation" -> `AL::LexicalBinding[0,1].Evaluation`,
    "LexicalBinding[1,0].BoundNames" -> `AL::LexicalBinding[1,0].BoundNames`,
    "LexicalBinding[1,0].Evaluation" -> `AL::LexicalBinding[1,0].Evaluation`,
    "LexicalDeclaration[0,0].BoundNames" -> `AL::LexicalDeclaration[0,0].BoundNames`,
    "LexicalDeclaration[0,0].EarlyErrors" -> `AL::LexicalDeclaration[0,0].EarlyErrors`,
    "LexicalDeclaration[0,0].Evaluation" -> `AL::LexicalDeclaration[0,0].Evaluation`,
    "LexicalDeclaration[0,0].IsConstantDeclaration" -> `AL::LexicalDeclaration[0,0].IsConstantDeclaration`,
    "Link" -> `AL::Link`,
    "LiteralPropertyName[0,0].Contains" -> `AL::LiteralPropertyName[0,0].Contains`,
    "LiteralPropertyName[0,0].Evaluation" -> `AL::LiteralPropertyName[0,0].Evaluation`,
    "LiteralPropertyName[0,0].PropName" -> `AL::LiteralPropertyName[0,0].PropName`,
    "LiteralPropertyName[1,0].Evaluation" -> `AL::LiteralPropertyName[1,0].Evaluation`,
    "LiteralPropertyName[1,0].PropName" -> `AL::LiteralPropertyName[1,0].PropName`,
    "LiteralPropertyName[2,0].Evaluation" -> `AL::LiteralPropertyName[2,0].Evaluation`,
    "LiteralPropertyName[2,0].PropName" -> `AL::LiteralPropertyName[2,0].PropName`,
    "Literal[0,0].Evaluation" -> `AL::Literal[0,0].Evaluation`,
    "Literal[1,0].Evaluation" -> `AL::Literal[1,0].Evaluation`,
    "Literal[2,0].Evaluation" -> `AL::Literal[2,0].Evaluation`,
    "Literal[3,0].Evaluation" -> `AL::Literal[3,0].Evaluation`,
    "LocalTime" -> `AL::LocalTime`,
    "LogicalANDExpression[1,0].AssignmentTargetType" -> `AL::LogicalANDExpression[1,0].AssignmentTargetType`,
    "LogicalANDExpression[1,0].Evaluation" -> `AL::LogicalANDExpression[1,0].Evaluation`,
    "LogicalANDExpression[1,0].HasCallInTailPosition" -> `AL::LogicalANDExpression[1,0].HasCallInTailPosition`,
    "LogicalANDExpression[1,0].IsFunctionDefinition" -> `AL::LogicalANDExpression[1,0].IsFunctionDefinition`,
    "LogicalORExpression[1,0].AssignmentTargetType" -> `AL::LogicalORExpression[1,0].AssignmentTargetType`,
    "LogicalORExpression[1,0].Evaluation" -> `AL::LogicalORExpression[1,0].Evaluation`,
    "LogicalORExpression[1,0].HasCallInTailPosition" -> `AL::LogicalORExpression[1,0].HasCallInTailPosition`,
    "LogicalORExpression[1,0].IsFunctionDefinition" -> `AL::LogicalORExpression[1,0].IsFunctionDefinition`,
    "LoopContinues" -> `AL::LoopContinues`,
    "MakeArgGetter" -> `AL::MakeArgGetter`,
    "MakeArgGetter" -> `AL::MakeArgGetter`,
    "MakeArgSetter" -> `AL::MakeArgSetter`,
    "MakeArgSetter" -> `AL::MakeArgSetter`,
    "MakeArgSetter" -> `AL::MakeArgSetter`,
    "MakeBasicObject" -> `AL::MakeBasicObject`,
    "MakeClassConstructor" -> `AL::MakeClassConstructor`,
    "MakeConstructor" -> `AL::MakeConstructor`,
    "MakeDate" -> `AL::MakeDate`,
    "MakeDay" -> `AL::MakeDay`,
    "MakeMethod" -> `AL::MakeMethod`,
    "MakeSuperPropertyReference" -> `AL::MakeSuperPropertyReference`,
    "MakeTime" -> `AL::MakeTime`,
    "Map" -> `AL::Map`,
    "Map.prototype.clear" -> `AL::Map.prototype.clear`,
    "Map.prototype.delete" -> `AL::Map.prototype.delete`,
    "Map.prototype.entries" -> `AL::Map.prototype.entries`,
    "Map.prototype.forEach" -> `AL::Map.prototype.forEach`,
    "Map.prototype.get" -> `AL::Map.prototype.get`,
    "Map.prototype.has" -> `AL::Map.prototype.has`,
    "Map.prototype.keys" -> `AL::Map.prototype.keys`,
    "Map.prototype.set" -> `AL::Map.prototype.set`,
    "Map.prototype.values" -> `AL::Map.prototype.values`,
    "Math.abs" -> `AL::Math.abs`,
    "Math.acos" -> `AL::Math.acos`,
    "Math.acosh" -> `AL::Math.acosh`,
    "Math.asin" -> `AL::Math.asin`,
    "Math.asinh" -> `AL::Math.asinh`,
    "Math.atan" -> `AL::Math.atan`,
    "Math.atanh" -> `AL::Math.atanh`,
    "Math.cbrt" -> `AL::Math.cbrt`,
    "Math.ceil" -> `AL::Math.ceil`,
    "Math.cos" -> `AL::Math.cos`,
    "Math.cosh" -> `AL::Math.cosh`,
    "Math.exp" -> `AL::Math.exp`,
    "Math.floor" -> `AL::Math.floor`,
    "Math.fround" -> `AL::Math.fround`,
    "Math.hypot" -> `AL::Math.hypot`,
    "Math.imul" -> `AL::Math.imul`,
    "Math.log" -> `AL::Math.log`,
    "Math.max" -> `AL::Math.max`,
    "Math.min" -> `AL::Math.min`,
    "Math.pow" -> `AL::Math.pow`,
    "Math.round" -> `AL::Math.round`,
    "Math.sign" -> `AL::Math.sign`,
    "Math.sin" -> `AL::Math.sin`,
    "Math.sinh" -> `AL::Math.sinh`,
    "Math.sqrt" -> `AL::Math.sqrt`,
    "Math.tan" -> `AL::Math.tan`,
    "Math.tanh" -> `AL::Math.tanh`,
    "Math.trunc" -> `AL::Math.trunc`,
    "MemberExpression[0,0].IsDestructuring" -> `AL::MemberExpression[0,0].IsDestructuring`,
    "MemberExpression[1,0].AssignmentTargetType" -> `AL::MemberExpression[1,0].AssignmentTargetType`,
    "MemberExpression[1,0].Evaluation" -> `AL::MemberExpression[1,0].Evaluation`,
    "MemberExpression[1,0].HasCallInTailPosition" -> `AL::MemberExpression[1,0].HasCallInTailPosition`,
    "MemberExpression[1,0].IsDestructuring" -> `AL::MemberExpression[1,0].IsDestructuring`,
    "MemberExpression[1,0].IsFunctionDefinition" -> `AL::MemberExpression[1,0].IsFunctionDefinition`,
    "MemberExpression[1,0].IsIdentifierRef" -> `AL::MemberExpression[1,0].IsIdentifierRef`,
    "MemberExpression[2,0].AssignmentTargetType" -> `AL::MemberExpression[2,0].AssignmentTargetType`,
    "MemberExpression[2,0].Contains" -> `AL::MemberExpression[2,0].Contains`,
    "MemberExpression[2,0].Evaluation" -> `AL::MemberExpression[2,0].Evaluation`,
    "MemberExpression[2,0].HasCallInTailPosition" -> `AL::MemberExpression[2,0].HasCallInTailPosition`,
    "MemberExpression[2,0].IsDestructuring" -> `AL::MemberExpression[2,0].IsDestructuring`,
    "MemberExpression[2,0].IsFunctionDefinition" -> `AL::MemberExpression[2,0].IsFunctionDefinition`,
    "MemberExpression[2,0].IsIdentifierRef" -> `AL::MemberExpression[2,0].IsIdentifierRef`,
    "MemberExpression[3,0].AssignmentTargetType" -> `AL::MemberExpression[3,0].AssignmentTargetType`,
    "MemberExpression[3,0].Evaluation" -> `AL::MemberExpression[3,0].Evaluation`,
    "MemberExpression[3,0].HasCallInTailPosition" -> `AL::MemberExpression[3,0].HasCallInTailPosition`,
    "MemberExpression[3,0].IsDestructuring" -> `AL::MemberExpression[3,0].IsDestructuring`,
    "MemberExpression[3,0].IsFunctionDefinition" -> `AL::MemberExpression[3,0].IsFunctionDefinition`,
    "MemberExpression[3,0].IsIdentifierRef" -> `AL::MemberExpression[3,0].IsIdentifierRef`,
    "MemberExpression[4,0].AssignmentTargetType" -> `AL::MemberExpression[4,0].AssignmentTargetType`,
    "MemberExpression[4,0].HasCallInTailPosition" -> `AL::MemberExpression[4,0].HasCallInTailPosition`,
    "MemberExpression[4,0].IsDestructuring" -> `AL::MemberExpression[4,0].IsDestructuring`,
    "MemberExpression[4,0].IsFunctionDefinition" -> `AL::MemberExpression[4,0].IsFunctionDefinition`,
    "MemberExpression[4,0].IsIdentifierRef" -> `AL::MemberExpression[4,0].IsIdentifierRef`,
    "MemberExpression[5,0].HasCallInTailPosition" -> `AL::MemberExpression[5,0].HasCallInTailPosition`,
    "MemberExpression[5,0].IsDestructuring" -> `AL::MemberExpression[5,0].IsDestructuring`,
    "MemberExpression[5,0].IsFunctionDefinition" -> `AL::MemberExpression[5,0].IsFunctionDefinition`,
    "MemberExpression[5,0].IsIdentifierRef" -> `AL::MemberExpression[5,0].IsIdentifierRef`,
    "MemberExpression[6,0].AssignmentTargetType" -> `AL::MemberExpression[6,0].AssignmentTargetType`,
    "MemberExpression[6,0].Evaluation" -> `AL::MemberExpression[6,0].Evaluation`,
    "MemberExpression[6,0].HasCallInTailPosition" -> `AL::MemberExpression[6,0].HasCallInTailPosition`,
    "MemberExpression[6,0].IsDestructuring" -> `AL::MemberExpression[6,0].IsDestructuring`,
    "MemberExpression[6,0].IsFunctionDefinition" -> `AL::MemberExpression[6,0].IsFunctionDefinition`,
    "MemberExpression[6,0].IsIdentifierRef" -> `AL::MemberExpression[6,0].IsIdentifierRef`,
    "MethodDefinition[0,0].ComputedPropertyContains" -> `AL::MethodDefinition[0,0].ComputedPropertyContains`,
    "MethodDefinition[0,0].DefineMethod" -> `AL::MethodDefinition[0,0].DefineMethod`,
    "MethodDefinition[0,0].EarlyErrors" -> `AL::MethodDefinition[0,0].EarlyErrors`,
    "MethodDefinition[0,0].HasDirectSuper" -> `AL::MethodDefinition[0,0].HasDirectSuper`,
    "MethodDefinition[0,0].MethodDefinitionEvaluation" -> `AL::MethodDefinition[0,0].MethodDefinitionEvaluation`,
    "MethodDefinition[0,0].PropName" -> `AL::MethodDefinition[0,0].PropName`,
    "MethodDefinition[0,0].PropertyDefinitionEvaluation" -> `AL::MethodDefinition[0,0].PropertyDefinitionEvaluation`,
    "MethodDefinition[0,0].SpecialMethod" -> `AL::MethodDefinition[0,0].SpecialMethod`,
    "MethodDefinition[1,0].SpecialMethod" -> `AL::MethodDefinition[1,0].SpecialMethod`,
    "MethodDefinition[2,0].SpecialMethod" -> `AL::MethodDefinition[2,0].SpecialMethod`,
    "MethodDefinition[3,0].SpecialMethod" -> `AL::MethodDefinition[3,0].SpecialMethod`,
    "MethodDefinition[4,0].ComputedPropertyContains" -> `AL::MethodDefinition[4,0].ComputedPropertyContains`,
    "MethodDefinition[4,0].HasDirectSuper" -> `AL::MethodDefinition[4,0].HasDirectSuper`,
    "MethodDefinition[4,0].MethodDefinitionEvaluation" -> `AL::MethodDefinition[4,0].MethodDefinitionEvaluation`,
    "MethodDefinition[4,0].PropName" -> `AL::MethodDefinition[4,0].PropName`,
    "MethodDefinition[4,0].PropertyDefinitionEvaluation" -> `AL::MethodDefinition[4,0].PropertyDefinitionEvaluation`,
    "MethodDefinition[4,0].SpecialMethod" -> `AL::MethodDefinition[4,0].SpecialMethod`,
    "MethodDefinition[5,0].ComputedPropertyContains" -> `AL::MethodDefinition[5,0].ComputedPropertyContains`,
    "MethodDefinition[5,0].EarlyErrors" -> `AL::MethodDefinition[5,0].EarlyErrors`,
    "MethodDefinition[5,0].HasDirectSuper" -> `AL::MethodDefinition[5,0].HasDirectSuper`,
    "MethodDefinition[5,0].MethodDefinitionEvaluation" -> `AL::MethodDefinition[5,0].MethodDefinitionEvaluation`,
    "MethodDefinition[5,0].PropName" -> `AL::MethodDefinition[5,0].PropName`,
    "MethodDefinition[5,0].PropertyDefinitionEvaluation" -> `AL::MethodDefinition[5,0].PropertyDefinitionEvaluation`,
    "MethodDefinition[5,0].SpecialMethod" -> `AL::MethodDefinition[5,0].SpecialMethod`,
    "MinFromTime" -> `AL::MinFromTime`,
    "MinutesPerHour" -> `AL::MinutesPerHour`,
    "ModuleBody[0,0].EarlyErrors" -> `AL::ModuleBody[0,0].EarlyErrors`,
    "ModuleBody[0,0].Evaluation" -> `AL::ModuleBody[0,0].Evaluation`,
    "ModuleEnvironmentRecord.CreateImportBinding" -> `AL::ModuleEnvironmentRecord.CreateImportBinding`,
    "ModuleEnvironmentRecord.GetBindingValue" -> `AL::ModuleEnvironmentRecord.GetBindingValue`,
    "ModuleEnvironmentRecord.GetThisBinding" -> `AL::ModuleEnvironmentRecord.GetThisBinding`,
    "ModuleEnvironmentRecord.HasThisBinding" -> `AL::ModuleEnvironmentRecord.HasThisBinding`,
    "ModuleItemList[0,0].ModuleRequests" -> `AL::ModuleItemList[0,0].ModuleRequests`,
    "ModuleItemList[1,0].ContainsDuplicateLabels" -> `AL::ModuleItemList[1,0].ContainsDuplicateLabels`,
    "ModuleItemList[1,0].ContainsUndefinedBreakTarget" -> `AL::ModuleItemList[1,0].ContainsUndefinedBreakTarget`,
    "ModuleItemList[1,0].ContainsUndefinedContinueTarget" -> `AL::ModuleItemList[1,0].ContainsUndefinedContinueTarget`,
    "ModuleItemList[1,0].Evaluation" -> `AL::ModuleItemList[1,0].Evaluation`,
    "ModuleItemList[1,0].ExportEntries" -> `AL::ModuleItemList[1,0].ExportEntries`,
    "ModuleItemList[1,0].ExportedBindings" -> `AL::ModuleItemList[1,0].ExportedBindings`,
    "ModuleItemList[1,0].ExportedNames" -> `AL::ModuleItemList[1,0].ExportedNames`,
    "ModuleItemList[1,0].ImportEntries" -> `AL::ModuleItemList[1,0].ImportEntries`,
    "ModuleItemList[1,0].LexicallyDeclaredNames" -> `AL::ModuleItemList[1,0].LexicallyDeclaredNames`,
    "ModuleItemList[1,0].LexicallyScopedDeclarations" -> `AL::ModuleItemList[1,0].LexicallyScopedDeclarations`,
    "ModuleItemList[1,0].ModuleRequests" -> `AL::ModuleItemList[1,0].ModuleRequests`,
    "ModuleItemList[1,0].VarDeclaredNames" -> `AL::ModuleItemList[1,0].VarDeclaredNames`,
    "ModuleItemList[1,0].VarScopedDeclarations" -> `AL::ModuleItemList[1,0].VarScopedDeclarations`,
    "ModuleItem[0,0].ContainsDuplicateLabels" -> `AL::ModuleItem[0,0].ContainsDuplicateLabels`,
    "ModuleItem[0,0].ContainsUndefinedBreakTarget" -> `AL::ModuleItem[0,0].ContainsUndefinedBreakTarget`,
    "ModuleItem[0,0].ContainsUndefinedContinueTarget" -> `AL::ModuleItem[0,0].ContainsUndefinedContinueTarget`,
    "ModuleItem[0,0].EarlyErrors" -> `AL::ModuleItem[0,0].EarlyErrors`,
    "ModuleItem[0,0].Evaluation" -> `AL::ModuleItem[0,0].Evaluation`,
    "ModuleItem[0,0].ExportEntries" -> `AL::ModuleItem[0,0].ExportEntries`,
    "ModuleItem[0,0].ExportedBindings" -> `AL::ModuleItem[0,0].ExportedBindings`,
    "ModuleItem[0,0].ExportedNames" -> `AL::ModuleItem[0,0].ExportedNames`,
    "ModuleItem[0,0].LexicallyDeclaredNames" -> `AL::ModuleItem[0,0].LexicallyDeclaredNames`,
    "ModuleItem[0,0].LexicallyScopedDeclarations" -> `AL::ModuleItem[0,0].LexicallyScopedDeclarations`,
    "ModuleItem[0,0].VarDeclaredNames" -> `AL::ModuleItem[0,0].VarDeclaredNames`,
    "ModuleItem[0,0].VarScopedDeclarations" -> `AL::ModuleItem[0,0].VarScopedDeclarations`,
    "ModuleItem[1,0].ContainsDuplicateLabels" -> `AL::ModuleItem[1,0].ContainsDuplicateLabels`,
    "ModuleItem[1,0].ContainsUndefinedBreakTarget" -> `AL::ModuleItem[1,0].ContainsUndefinedBreakTarget`,
    "ModuleItem[1,0].ContainsUndefinedContinueTarget" -> `AL::ModuleItem[1,0].ContainsUndefinedContinueTarget`,
    "ModuleItem[1,0].ExportedNames" -> `AL::ModuleItem[1,0].ExportedNames`,
    "ModuleItem[1,0].ImportEntries" -> `AL::ModuleItem[1,0].ImportEntries`,
    "ModuleItem[1,0].LexicallyDeclaredNames" -> `AL::ModuleItem[1,0].LexicallyDeclaredNames`,
    "ModuleItem[1,0].VarDeclaredNames" -> `AL::ModuleItem[1,0].VarDeclaredNames`,
    "ModuleItem[1,0].VarScopedDeclarations" -> `AL::ModuleItem[1,0].VarScopedDeclarations`,
    "ModuleItem[2,0].ExportEntries" -> `AL::ModuleItem[2,0].ExportEntries`,
    "ModuleItem[2,0].ExportedBindings" -> `AL::ModuleItem[2,0].ExportedBindings`,
    "ModuleItem[2,0].ExportedNames" -> `AL::ModuleItem[2,0].ExportedNames`,
    "ModuleItem[2,0].ImportEntries" -> `AL::ModuleItem[2,0].ImportEntries`,
    "ModuleItem[2,0].LexicallyDeclaredNames" -> `AL::ModuleItem[2,0].LexicallyDeclaredNames`,
    "ModuleItem[2,0].ModuleRequests" -> `AL::ModuleItem[2,0].ModuleRequests`,
    "ModuleNamespaceCreate" -> `AL::ModuleNamespaceCreate`,
    "ModuleNamespaceExoticObject.DefineOwnProperty" -> `AL::ModuleNamespaceExoticObject.DefineOwnProperty`,
    "ModuleNamespaceExoticObject.Delete" -> `AL::ModuleNamespaceExoticObject.Delete`,
    "ModuleNamespaceExoticObject.Get" -> `AL::ModuleNamespaceExoticObject.Get`,
    "ModuleNamespaceExoticObject.GetOwnProperty" -> `AL::ModuleNamespaceExoticObject.GetOwnProperty`,
    "ModuleNamespaceExoticObject.HasProperty" -> `AL::ModuleNamespaceExoticObject.HasProperty`,
    "ModuleNamespaceExoticObject.IsExtensible" -> `AL::ModuleNamespaceExoticObject.IsExtensible`,
    "ModuleNamespaceExoticObject.OwnPropertyKeys" -> `AL::ModuleNamespaceExoticObject.OwnPropertyKeys`,
    "ModuleNamespaceExoticObject.PreventExtensions" -> `AL::ModuleNamespaceExoticObject.PreventExtensions`,
    "ModuleNamespaceExoticObject.Set" -> `AL::ModuleNamespaceExoticObject.Set`,
    "ModuleNamespaceExoticObject.SetPrototypeOf" -> `AL::ModuleNamespaceExoticObject.SetPrototypeOf`,
    "ModuleRecord.Evaluate" -> `AL::ModuleRecord.Evaluate`,
    "ModuleRecord.GetExportedNames" -> `AL::ModuleRecord.GetExportedNames`,
    "ModuleRecord.Link" -> `AL::ModuleRecord.Link`,
    "ModuleRecord.ResolveExport" -> `AL::ModuleRecord.ResolveExport`,
    "ModuleSpecifier[0,0].ModuleRequests" -> `AL::ModuleSpecifier[0,0].ModuleRequests`,
    "Module[0,0].Evaluation" -> `AL::Module[0,0].Evaluation`,
    "Module[0,0].ExportEntries" -> `AL::Module[0,0].ExportEntries`,
    "Module[0,0].ImportEntries" -> `AL::Module[0,0].ImportEntries`,
    "Module[0,0].LexicallyScopedDeclarations" -> `AL::Module[0,0].LexicallyScopedDeclarations`,
    "Module[0,0].ModuleRequests" -> `AL::Module[0,0].ModuleRequests`,
    "Module[0,0].VarDeclaredNames" -> `AL::Module[0,0].VarDeclaredNames`,
    "Module[0,0].VarScopedDeclarations" -> `AL::Module[0,0].VarScopedDeclarations`,
    "MonthFromTime" -> `AL::MonthFromTime`,
    "MultiplicativeExpression[1,0].AssignmentTargetType" -> `AL::MultiplicativeExpression[1,0].AssignmentTargetType`,
    "MultiplicativeExpression[1,0].Evaluation" -> `AL::MultiplicativeExpression[1,0].Evaluation`,
    "MultiplicativeExpression[1,0].HasCallInTailPosition" -> `AL::MultiplicativeExpression[1,0].HasCallInTailPosition`,
    "MultiplicativeExpression[1,0].IsFunctionDefinition" -> `AL::MultiplicativeExpression[1,0].IsFunctionDefinition`,
    "NameSpaceImport[0,0].ImportEntriesForModule" -> `AL::NameSpaceImport[0,0].ImportEntriesForModule`,
    "NamedExports[0,0].ExportEntriesForModule" -> `AL::NamedExports[0,0].ExportEntriesForModule`,
    "NamedExports[0,0].ExportedBindings" -> `AL::NamedExports[0,0].ExportedBindings`,
    "NamedExports[0,0].ExportedNames" -> `AL::NamedExports[0,0].ExportedNames`,
    "NamedExports[0,0].ReferencedBindings" -> `AL::NamedExports[0,0].ReferencedBindings`,
    "NamedImports[0,0].BoundNames" -> `AL::NamedImports[0,0].BoundNames`,
    "NamedImports[0,0].ImportEntriesForModule" -> `AL::NamedImports[0,0].ImportEntriesForModule`,
    "NewDeclarativeEnvironment" -> `AL::NewDeclarativeEnvironment`,
    "NewExpression[1,0].AssignmentTargetType" -> `AL::NewExpression[1,0].AssignmentTargetType`,
    "NewExpression[1,0].Evaluation" -> `AL::NewExpression[1,0].Evaluation`,
    "NewExpression[1,0].HasCallInTailPosition" -> `AL::NewExpression[1,0].HasCallInTailPosition`,
    "NewExpression[1,0].IsDestructuring" -> `AL::NewExpression[1,0].IsDestructuring`,
    "NewExpression[1,0].IsFunctionDefinition" -> `AL::NewExpression[1,0].IsFunctionDefinition`,
    "NewExpression[1,0].IsIdentifierRef" -> `AL::NewExpression[1,0].IsIdentifierRef`,
    "NewFunctionEnvironment" -> `AL::NewFunctionEnvironment`,
    "NewGlobalEnvironment" -> `AL::NewGlobalEnvironment`,
    "NewModuleEnvironment" -> `AL::NewModuleEnvironment`,
    "NewObjectEnvironment" -> `AL::NewObjectEnvironment`,
    "NewPromiseCapability" -> `AL::NewPromiseCapability`,
    "NewPromiseReactionJob" -> `AL::NewPromiseReactionJob`,
    "NewPromiseResolveThenableJob" -> `AL::NewPromiseResolveThenableJob`,
    "NewTarget[0,0].AssignmentTargetType" -> `AL::NewTarget[0,0].AssignmentTargetType`,
    "NewTarget[0,0].Evaluation" -> `AL::NewTarget[0,0].Evaluation`,
    "NotifyWaiter" -> `AL::NotifyWaiter`,
    "Number" -> `AL::Number`,
    "Number.isFinite" -> `AL::Number.isFinite`,
    "Number.isInteger" -> `AL::Number.isInteger`,
    "Number.isNaN" -> `AL::Number.isNaN`,
    "Number.isSafeInteger" -> `AL::Number.isSafeInteger`,
    "Number.prototype.toExponential" -> `AL::Number.prototype.toExponential`,
    "Number.prototype.toFixed" -> `AL::Number.prototype.toFixed`,
    "Number.prototype.toPrecision" -> `AL::Number.prototype.toPrecision`,
    "Number.prototype.toString" -> `AL::Number.prototype.toString`,
    "Number.prototype.valueOf" -> `AL::Number.prototype.valueOf`,
    "Number::add" -> `AL::Number::add`,
    "Number::add" -> `AL::Number::add`,
    "Number::bitwiseAND" -> `AL::Number::bitwiseAND`,
    "Number::bitwiseNOT" -> `AL::Number::bitwiseNOT`,
    "Number::bitwiseOR" -> `AL::Number::bitwiseOR`,
    "Number::bitwiseXOR" -> `AL::Number::bitwiseXOR`,
    "Number::divide" -> `AL::Number::divide`,
    "Number::divide" -> `AL::Number::divide`,
    "Number::equal" -> `AL::Number::equal`,
    "Number::exponentiate" -> `AL::Number::exponentiate`,
    "Number::exponentiate" -> `AL::Number::exponentiate`,
    "Number::leftShift" -> `AL::Number::leftShift`,
    "Number::lessThan" -> `AL::Number::lessThan`,
    "Number::multiply" -> `AL::Number::multiply`,
    "Number::multiply" -> `AL::Number::multiply`,
    "Number::remainder" -> `AL::Number::remainder`,
    "Number::remainder" -> `AL::Number::remainder`,
    "Number::sameValue" -> `AL::Number::sameValue`,
    "Number::sameValueZero" -> `AL::Number::sameValueZero`,
    "Number::signedRightShift" -> `AL::Number::signedRightShift`,
    "Number::subtract" -> `AL::Number::subtract`,
    "Number::toString" -> `AL::Number::toString`,
    "Number::toString" -> `AL::Number::toString`,
    "Number::unaryMinus" -> `AL::Number::unaryMinus`,
    "Number::unsignedRightShift" -> `AL::Number::unsignedRightShift`,
    "NumberBitwiseOp" -> `AL::NumberBitwiseOp`,
    "NumberToBigInt" -> `AL::NumberToBigInt`,
    "NumberToString" -> `AL::NumberToString`,
    "NumericLiteral[0,0].NumericValue" -> `AL::NumericLiteral[0,0].NumericValue`,
    "NumericLiteral[2,0].NumericValue" -> `AL::NumericLiteral[2,0].NumericValue`,
    "NumericLiteral[3,0].NumericValue" -> `AL::NumericLiteral[3,0].NumericValue`,
    "NumericToRawBytes" -> `AL::NumericToRawBytes`,
    "NumericToRawBytes" -> `AL::NumericToRawBytes`,
    "Object" -> `AL::Object`,
    "Object.assign" -> `AL::Object.assign`,
    "Object.create" -> `AL::Object.create`,
    "Object.defineProperties" -> `AL::Object.defineProperties`,
    "Object.defineProperty" -> `AL::Object.defineProperty`,
    "Object.entries" -> `AL::Object.entries`,
    "Object.freeze" -> `AL::Object.freeze`,
    "Object.fromEntries" -> `AL::Object.fromEntries`,
    "Object.getOwnPropertyDescriptor" -> `AL::Object.getOwnPropertyDescriptor`,
    "Object.getOwnPropertyDescriptors" -> `AL::Object.getOwnPropertyDescriptors`,
    "Object.getOwnPropertyNames" -> `AL::Object.getOwnPropertyNames`,
    "Object.getOwnPropertySymbols" -> `AL::Object.getOwnPropertySymbols`,
    "Object.getPrototypeOf" -> `AL::Object.getPrototypeOf`,
    "Object.is" -> `AL::Object.is`,
    "Object.isExtensible" -> `AL::Object.isExtensible`,
    "Object.isFrozen" -> `AL::Object.isFrozen`,
    "Object.isSealed" -> `AL::Object.isSealed`,
    "Object.keys" -> `AL::Object.keys`,
    "Object.preventExtensions" -> `AL::Object.preventExtensions`,
    "Object.prototype.hasOwnProperty" -> `AL::Object.prototype.hasOwnProperty`,
    "Object.prototype.isPrototypeOf" -> `AL::Object.prototype.isPrototypeOf`,
    "Object.prototype.propertyIsEnumerable" -> `AL::Object.prototype.propertyIsEnumerable`,
    "Object.prototype.toLocaleString" -> `AL::Object.prototype.toLocaleString`,
    "Object.prototype.toString" -> `AL::Object.prototype.toString`,
    "Object.prototype.valueOf" -> `AL::Object.prototype.valueOf`,
    "Object.seal" -> `AL::Object.seal`,
    "Object.setPrototypeOf" -> `AL::Object.setPrototypeOf`,
    "Object.values" -> `AL::Object.values`,
    "ObjectAssignmentPattern[0,0].DestructuringAssignmentEvaluation" -> `AL::ObjectAssignmentPattern[0,0].DestructuringAssignmentEvaluation`,
    "ObjectAssignmentPattern[1,0].DestructuringAssignmentEvaluation" -> `AL::ObjectAssignmentPattern[1,0].DestructuringAssignmentEvaluation`,
    "ObjectAssignmentPattern[2,0].DestructuringAssignmentEvaluation" -> `AL::ObjectAssignmentPattern[2,0].DestructuringAssignmentEvaluation`,
    "ObjectAssignmentPattern[3,0].DestructuringAssignmentEvaluation" -> `AL::ObjectAssignmentPattern[3,0].DestructuringAssignmentEvaluation`,
    "ObjectAssignmentPattern[3,1].DestructuringAssignmentEvaluation" -> `AL::ObjectAssignmentPattern[3,1].DestructuringAssignmentEvaluation`,
    "ObjectBindingPattern[0,0].BindingInitialization" -> `AL::ObjectBindingPattern[0,0].BindingInitialization`,
    "ObjectBindingPattern[0,0].BoundNames" -> `AL::ObjectBindingPattern[0,0].BoundNames`,
    "ObjectBindingPattern[0,0].ContainsExpression" -> `AL::ObjectBindingPattern[0,0].ContainsExpression`,
    "ObjectBindingPattern[1,0].BindingInitialization" -> `AL::ObjectBindingPattern[1,0].BindingInitialization`,
    "ObjectBindingPattern[1,0].ContainsExpression" -> `AL::ObjectBindingPattern[1,0].ContainsExpression`,
    "ObjectBindingPattern[2,0].BindingInitialization" -> `AL::ObjectBindingPattern[2,0].BindingInitialization`,
    "ObjectBindingPattern[3,0].BindingInitialization" -> `AL::ObjectBindingPattern[3,0].BindingInitialization`,
    "ObjectBindingPattern[3,1].BindingInitialization" -> `AL::ObjectBindingPattern[3,1].BindingInitialization`,
    "ObjectBindingPattern[3,1].BoundNames" -> `AL::ObjectBindingPattern[3,1].BoundNames`,
    "ObjectBindingPattern[3,1].ContainsExpression" -> `AL::ObjectBindingPattern[3,1].ContainsExpression`,
    "ObjectDefineProperties" -> `AL::ObjectDefineProperties`,
    "ObjectEnvironmentRecord.CreateMutableBinding" -> `AL::ObjectEnvironmentRecord.CreateMutableBinding`,
    "ObjectEnvironmentRecord.DeleteBinding" -> `AL::ObjectEnvironmentRecord.DeleteBinding`,
    "ObjectEnvironmentRecord.GetBindingValue" -> `AL::ObjectEnvironmentRecord.GetBindingValue`,
    "ObjectEnvironmentRecord.HasBinding" -> `AL::ObjectEnvironmentRecord.HasBinding`,
    "ObjectEnvironmentRecord.HasSuperBinding" -> `AL::ObjectEnvironmentRecord.HasSuperBinding`,
    "ObjectEnvironmentRecord.HasThisBinding" -> `AL::ObjectEnvironmentRecord.HasThisBinding`,
    "ObjectEnvironmentRecord.InitializeBinding" -> `AL::ObjectEnvironmentRecord.InitializeBinding`,
    "ObjectEnvironmentRecord.SetMutableBinding" -> `AL::ObjectEnvironmentRecord.SetMutableBinding`,
    "ObjectEnvironmentRecord.WithBaseObject" -> `AL::ObjectEnvironmentRecord.WithBaseObject`,
    "ObjectLiteral[0,0].Evaluation" -> `AL::ObjectLiteral[0,0].Evaluation`,
    "ObjectLiteral[1,0].Evaluation" -> `AL::ObjectLiteral[1,0].Evaluation`,
    "ObjectLiteral[2,0].Evaluation" -> `AL::ObjectLiteral[2,0].Evaluation`,
    "OptionalChain[0,0].ChainEvaluation" -> `AL::OptionalChain[0,0].ChainEvaluation`,
    "OptionalChain[0,0].HasCallInTailPosition" -> `AL::OptionalChain[0,0].HasCallInTailPosition`,
    "OptionalChain[1,0].ChainEvaluation" -> `AL::OptionalChain[1,0].ChainEvaluation`,
    "OptionalChain[1,0].HasCallInTailPosition" -> `AL::OptionalChain[1,0].HasCallInTailPosition`,
    "OptionalChain[2,0].ChainEvaluation" -> `AL::OptionalChain[2,0].ChainEvaluation`,
    "OptionalChain[2,0].Contains" -> `AL::OptionalChain[2,0].Contains`,
    "OptionalChain[2,0].HasCallInTailPosition" -> `AL::OptionalChain[2,0].HasCallInTailPosition`,
    "OptionalChain[3,0].EarlyErrors" -> `AL::OptionalChain[3,0].EarlyErrors`,
    "OptionalChain[4,0].ChainEvaluation" -> `AL::OptionalChain[4,0].ChainEvaluation`,
    "OptionalChain[4,0].HasCallInTailPosition" -> `AL::OptionalChain[4,0].HasCallInTailPosition`,
    "OptionalChain[5,0].ChainEvaluation" -> `AL::OptionalChain[5,0].ChainEvaluation`,
    "OptionalChain[5,0].HasCallInTailPosition" -> `AL::OptionalChain[5,0].HasCallInTailPosition`,
    "OptionalChain[6,0].ChainEvaluation" -> `AL::OptionalChain[6,0].ChainEvaluation`,
    "OptionalChain[6,0].Contains" -> `AL::OptionalChain[6,0].Contains`,
    "OptionalChain[6,0].HasCallInTailPosition" -> `AL::OptionalChain[6,0].HasCallInTailPosition`,
    "OptionalChain[7,0].EarlyErrors" -> `AL::OptionalChain[7,0].EarlyErrors`,
    "OptionalExpression[0,0].Evaluation" -> `AL::OptionalExpression[0,0].Evaluation`,
    "OptionalExpression[0,0].HasCallInTailPosition" -> `AL::OptionalExpression[0,0].HasCallInTailPosition`,
    "OptionalExpression[1,0].Evaluation" -> `AL::OptionalExpression[1,0].Evaluation`,
    "OptionalExpression[1,0].HasCallInTailPosition" -> `AL::OptionalExpression[1,0].HasCallInTailPosition`,
    "OptionalExpression[2,0].Evaluation" -> `AL::OptionalExpression[2,0].Evaluation`,
    "OptionalExpression[2,0].HasCallInTailPosition" -> `AL::OptionalExpression[2,0].HasCallInTailPosition`,
    "OrdinaryCallBindThis" -> `AL::OrdinaryCallBindThis`,
    "OrdinaryCallEvaluateBody" -> `AL::OrdinaryCallEvaluateBody`,
    "OrdinaryCreateFromConstructor" -> `AL::OrdinaryCreateFromConstructor`,
    "OrdinaryDefineOwnProperty" -> `AL::OrdinaryDefineOwnProperty`,
    "OrdinaryDelete" -> `AL::OrdinaryDelete`,
    "OrdinaryFunctionCreate" -> `AL::OrdinaryFunctionCreate`,
    "OrdinaryGet" -> `AL::OrdinaryGet`,
    "OrdinaryGetOwnProperty" -> `AL::OrdinaryGetOwnProperty`,
    "OrdinaryGetPrototypeOf" -> `AL::OrdinaryGetPrototypeOf`,
    "OrdinaryHasInstance" -> `AL::OrdinaryHasInstance`,
    "OrdinaryHasProperty" -> `AL::OrdinaryHasProperty`,
    "OrdinaryIsExtensible" -> `AL::OrdinaryIsExtensible`,
    "OrdinaryObject.DefineOwnProperty" -> `AL::OrdinaryObject.DefineOwnProperty`,
    "OrdinaryObject.Delete" -> `AL::OrdinaryObject.Delete`,
    "OrdinaryObject.Get" -> `AL::OrdinaryObject.Get`,
    "OrdinaryObject.GetOwnProperty" -> `AL::OrdinaryObject.GetOwnProperty`,
    "OrdinaryObject.GetPrototypeOf" -> `AL::OrdinaryObject.GetPrototypeOf`,
    "OrdinaryObject.HasProperty" -> `AL::OrdinaryObject.HasProperty`,
    "OrdinaryObject.IsExtensible" -> `AL::OrdinaryObject.IsExtensible`,
    "OrdinaryObject.OwnPropertyKeys" -> `AL::OrdinaryObject.OwnPropertyKeys`,
    "OrdinaryObject.PreventExtensions" -> `AL::OrdinaryObject.PreventExtensions`,
    "OrdinaryObject.Set" -> `AL::OrdinaryObject.Set`,
    "OrdinaryObject.SetPrototypeOf" -> `AL::OrdinaryObject.SetPrototypeOf`,
    "OrdinaryObjectCreate" -> `AL::OrdinaryObjectCreate`,
    "OrdinaryOwnPropertyKeys" -> `AL::OrdinaryOwnPropertyKeys`,
    "OrdinaryPreventExtensions" -> `AL::OrdinaryPreventExtensions`,
    "OrdinarySet" -> `AL::OrdinarySet`,
    "OrdinarySetPrototypeOf" -> `AL::OrdinarySetPrototypeOf`,
    "OrdinarySetWithOwnDescriptor" -> `AL::OrdinarySetWithOwnDescriptor`,
    "OrdinaryToPrimitive" -> `AL::OrdinaryToPrimitive`,
    "ParenthesizedExpression[0,0].Evaluation" -> `AL::ParenthesizedExpression[0,0].Evaluation`,
    "ParenthesizedExpression[0,0].HasCallInTailPosition" -> `AL::ParenthesizedExpression[0,0].HasCallInTailPosition`,
    "ParenthesizedExpression[0,0].NamedEvaluation" -> `AL::ParenthesizedExpression[0,0].NamedEvaluation`,
    "ParseModule" -> `AL::ParseModule`,
    "ParsePattern" -> `AL::ParsePattern`,
    "ParseScript" -> `AL::ParseScript`,
    "ParseText" -> `AL::ParseText`,
    "PerformEval" -> `AL::PerformEval`,
    "PerformPromiseAll" -> `AL::PerformPromiseAll`,
    "PerformPromiseAllSettled" -> `AL::PerformPromiseAllSettled`,
    "PerformPromiseAny" -> `AL::PerformPromiseAny`,
    "PerformPromiseRace" -> `AL::PerformPromiseRace`,
    "PerformPromiseThen" -> `AL::PerformPromiseThen`,
    "PrepareForOrdinaryCall" -> `AL::PrepareForOrdinaryCall`,
    "PrepareForTailCall" -> `AL::PrepareForTailCall`,
    "PrimaryExpression[0,0].AssignmentTargetType" -> `AL::PrimaryExpression[0,0].AssignmentTargetType`,
    "PrimaryExpression[0,0].Evaluation" -> `AL::PrimaryExpression[0,0].Evaluation`,
    "PrimaryExpression[0,0].HasCallInTailPosition" -> `AL::PrimaryExpression[0,0].HasCallInTailPosition`,
    "PrimaryExpression[0,0].IsFunctionDefinition" -> `AL::PrimaryExpression[0,0].IsFunctionDefinition`,
    "PrimaryExpression[0,0].IsIdentifierRef" -> `AL::PrimaryExpression[0,0].IsIdentifierRef`,
    "PrimaryExpression[1,0].HasCallInTailPosition" -> `AL::PrimaryExpression[1,0].HasCallInTailPosition`,
    "PrimaryExpression[1,0].IsFunctionDefinition" -> `AL::PrimaryExpression[1,0].IsFunctionDefinition`,
    "PrimaryExpression[1,0].IsIdentifierRef" -> `AL::PrimaryExpression[1,0].IsIdentifierRef`,
    "PrimaryExpression[10,0].AssignmentTargetType" -> `AL::PrimaryExpression[10,0].AssignmentTargetType`,
    "PrimaryExpression[10,0].EarlyErrors" -> `AL::PrimaryExpression[10,0].EarlyErrors`,
    "PrimaryExpression[10,0].Evaluation" -> `AL::PrimaryExpression[10,0].Evaluation`,
    "PrimaryExpression[10,0].HasCallInTailPosition" -> `AL::PrimaryExpression[10,0].HasCallInTailPosition`,
    "PrimaryExpression[10,0].IsFunctionDefinition" -> `AL::PrimaryExpression[10,0].IsFunctionDefinition`,
    "PrimaryExpression[10,0].IsIdentifierRef" -> `AL::PrimaryExpression[10,0].IsIdentifierRef`,
    "PrimaryExpression[11,0].AssignmentTargetType" -> `AL::PrimaryExpression[11,0].AssignmentTargetType`,
    "PrimaryExpression[11,0].HasCallInTailPosition" -> `AL::PrimaryExpression[11,0].HasCallInTailPosition`,
    "PrimaryExpression[11,0].IsFunctionDefinition" -> `AL::PrimaryExpression[11,0].IsFunctionDefinition`,
    "PrimaryExpression[11,0].IsIdentifierRef" -> `AL::PrimaryExpression[11,0].IsIdentifierRef`,
    "PrimaryExpression[12,0].AssignmentTargetType" -> `AL::PrimaryExpression[12,0].AssignmentTargetType`,
    "PrimaryExpression[12,0].EarlyErrors" -> `AL::PrimaryExpression[12,0].EarlyErrors`,
    "PrimaryExpression[12,0].Evaluation" -> `AL::PrimaryExpression[12,0].Evaluation`,
    "PrimaryExpression[12,0].HasCallInTailPosition" -> `AL::PrimaryExpression[12,0].HasCallInTailPosition`,
    "PrimaryExpression[12,0].HasName" -> `AL::PrimaryExpression[12,0].HasName`,
    "PrimaryExpression[12,0].IsFunctionDefinition" -> `AL::PrimaryExpression[12,0].IsFunctionDefinition`,
    "PrimaryExpression[12,0].IsIdentifierRef" -> `AL::PrimaryExpression[12,0].IsIdentifierRef`,
    "PrimaryExpression[12,0].NamedEvaluation" -> `AL::PrimaryExpression[12,0].NamedEvaluation`,
    "PrimaryExpression[2,0].AssignmentTargetType" -> `AL::PrimaryExpression[2,0].AssignmentTargetType`,
    "PrimaryExpression[2,0].HasCallInTailPosition" -> `AL::PrimaryExpression[2,0].HasCallInTailPosition`,
    "PrimaryExpression[2,0].IsFunctionDefinition" -> `AL::PrimaryExpression[2,0].IsFunctionDefinition`,
    "PrimaryExpression[2,0].IsIdentifierRef" -> `AL::PrimaryExpression[2,0].IsIdentifierRef`,
    "PrimaryExpression[3,0].AssignmentTargetType" -> `AL::PrimaryExpression[3,0].AssignmentTargetType`,
    "PrimaryExpression[3,0].HasCallInTailPosition" -> `AL::PrimaryExpression[3,0].HasCallInTailPosition`,
    "PrimaryExpression[3,0].IsFunctionDefinition" -> `AL::PrimaryExpression[3,0].IsFunctionDefinition`,
    "PrimaryExpression[3,0].IsIdentifierRef" -> `AL::PrimaryExpression[3,0].IsIdentifierRef`,
    "PrimaryExpression[4,0].AssignmentTargetType" -> `AL::PrimaryExpression[4,0].AssignmentTargetType`,
    "PrimaryExpression[4,0].HasCallInTailPosition" -> `AL::PrimaryExpression[4,0].HasCallInTailPosition`,
    "PrimaryExpression[4,0].IsFunctionDefinition" -> `AL::PrimaryExpression[4,0].IsFunctionDefinition`,
    "PrimaryExpression[4,0].IsIdentifierRef" -> `AL::PrimaryExpression[4,0].IsIdentifierRef`,
    "PrimaryExpression[5,0].AssignmentTargetType" -> `AL::PrimaryExpression[5,0].AssignmentTargetType`,
    "PrimaryExpression[5,0].HasCallInTailPosition" -> `AL::PrimaryExpression[5,0].HasCallInTailPosition`,
    "PrimaryExpression[5,0].IsIdentifierRef" -> `AL::PrimaryExpression[5,0].IsIdentifierRef`,
    "PrimaryExpression[6,0].AssignmentTargetType" -> `AL::PrimaryExpression[6,0].AssignmentTargetType`,
    "PrimaryExpression[6,0].HasCallInTailPosition" -> `AL::PrimaryExpression[6,0].HasCallInTailPosition`,
    "PrimaryExpression[6,0].IsIdentifierRef" -> `AL::PrimaryExpression[6,0].IsIdentifierRef`,
    "PrimaryExpression[7,0].AssignmentTargetType" -> `AL::PrimaryExpression[7,0].AssignmentTargetType`,
    "PrimaryExpression[7,0].HasCallInTailPosition" -> `AL::PrimaryExpression[7,0].HasCallInTailPosition`,
    "PrimaryExpression[7,0].IsIdentifierRef" -> `AL::PrimaryExpression[7,0].IsIdentifierRef`,
    "PrimaryExpression[8,0].AssignmentTargetType" -> `AL::PrimaryExpression[8,0].AssignmentTargetType`,
    "PrimaryExpression[8,0].HasCallInTailPosition" -> `AL::PrimaryExpression[8,0].HasCallInTailPosition`,
    "PrimaryExpression[8,0].IsIdentifierRef" -> `AL::PrimaryExpression[8,0].IsIdentifierRef`,
    "PrimaryExpression[9,0].AssignmentTargetType" -> `AL::PrimaryExpression[9,0].AssignmentTargetType`,
    "PrimaryExpression[9,0].HasCallInTailPosition" -> `AL::PrimaryExpression[9,0].HasCallInTailPosition`,
    "PrimaryExpression[9,0].IsIdentifierRef" -> `AL::PrimaryExpression[9,0].IsIdentifierRef`,
    "Promise" -> `AL::Promise`,
    "Promise.all" -> `AL::Promise.all`,
    "Promise.allSettled" -> `AL::Promise.allSettled`,
    "Promise.any" -> `AL::Promise.any`,
    "Promise.prototype.catch" -> `AL::Promise.prototype.catch`,
    "Promise.prototype.finally" -> `AL::Promise.prototype.finally`,
    "Promise.prototype.then" -> `AL::Promise.prototype.then`,
    "Promise.race" -> `AL::Promise.race`,
    "Promise.reject" -> `AL::Promise.reject`,
    "Promise.resolve" -> `AL::Promise.resolve`,
    "PromiseRejectFunctions" -> `AL::PromiseRejectFunctions`,
    "PromiseResolve" -> `AL::PromiseResolve`,
    "PromiseResolveFunctions" -> `AL::PromiseResolveFunctions`,
    "PropertyDefinitionList[0,0].PropertyNameList" -> `AL::PropertyDefinitionList[0,0].PropertyNameList`,
    "PropertyDefinitionList[1,0].PropertyDefinitionEvaluation" -> `AL::PropertyDefinitionList[1,0].PropertyDefinitionEvaluation`,
    "PropertyDefinitionList[1,0].PropertyNameList" -> `AL::PropertyDefinitionList[1,0].PropertyNameList`,
    "PropertyDefinition[0,0].PropName" -> `AL::PropertyDefinition[0,0].PropName`,
    "PropertyDefinition[0,0].PropertyDefinitionEvaluation" -> `AL::PropertyDefinition[0,0].PropertyDefinitionEvaluation`,
    "PropertyDefinition[1,0].EarlyErrors" -> `AL::PropertyDefinition[1,0].EarlyErrors`,
    "PropertyDefinition[2,0].PropName" -> `AL::PropertyDefinition[2,0].PropName`,
    "PropertyDefinition[2,0].PropertyDefinitionEvaluation" -> `AL::PropertyDefinition[2,0].PropertyDefinitionEvaluation`,
    "PropertyDefinition[3,0].Contains" -> `AL::PropertyDefinition[3,0].Contains`,
    "PropertyDefinition[3,0].EarlyErrors" -> `AL::PropertyDefinition[3,0].EarlyErrors`,
    "PropertyDefinition[4,0].PropName" -> `AL::PropertyDefinition[4,0].PropName`,
    "PropertyDefinition[4,0].PropertyDefinitionEvaluation" -> `AL::PropertyDefinition[4,0].PropertyDefinitionEvaluation`,
    "PropertyName[0,0].ComputedPropertyContains" -> `AL::PropertyName[0,0].ComputedPropertyContains`,
    "PropertyName[0,0].IsComputedPropertyKey" -> `AL::PropertyName[0,0].IsComputedPropertyKey`,
    "PropertyName[1,0].ComputedPropertyContains" -> `AL::PropertyName[1,0].ComputedPropertyContains`,
    "PropertyName[1,0].IsComputedPropertyKey" -> `AL::PropertyName[1,0].IsComputedPropertyKey`,
    "PropertySetParameterList[0,0].ExpectedArgumentCount" -> `AL::PropertySetParameterList[0,0].ExpectedArgumentCount`,
    "Proxy" -> `AL::Proxy`,
    "Proxy.revocable" -> `AL::Proxy.revocable`,
    "ProxyCreate" -> `AL::ProxyCreate`,
    "ProxyObject.Call" -> `AL::ProxyObject.Call`,
    "ProxyObject.Construct" -> `AL::ProxyObject.Construct`,
    "ProxyObject.DefineOwnProperty" -> `AL::ProxyObject.DefineOwnProperty`,
    "ProxyObject.Delete" -> `AL::ProxyObject.Delete`,
    "ProxyObject.Get" -> `AL::ProxyObject.Get`,
    "ProxyObject.GetOwnProperty" -> `AL::ProxyObject.GetOwnProperty`,
    "ProxyObject.GetPrototypeOf" -> `AL::ProxyObject.GetPrototypeOf`,
    "ProxyObject.HasProperty" -> `AL::ProxyObject.HasProperty`,
    "ProxyObject.IsExtensible" -> `AL::ProxyObject.IsExtensible`,
    "ProxyObject.OwnPropertyKeys" -> `AL::ProxyObject.OwnPropertyKeys`,
    "ProxyObject.PreventExtensions" -> `AL::ProxyObject.PreventExtensions`,
    "ProxyObject.Set" -> `AL::ProxyObject.Set`,
    "ProxyObject.SetPrototypeOf" -> `AL::ProxyObject.SetPrototypeOf`,
    "ProxyRevocationFunctions" -> `AL::ProxyRevocationFunctions`,
    "ProxyRevocationFunctions" -> `AL::ProxyRevocationFunctions`,
    "PutValue" -> `AL::PutValue`,
    "QuoteJSONString" -> `AL::QuoteJSONString`,
    "Races" -> `AL::Races`,
    "RangeError" -> `AL::RangeError`,
    "RawBytesToNumeric" -> `AL::RawBytesToNumeric`,
    "ReferenceError" -> `AL::ReferenceError`,
    "Reflect.apply" -> `AL::Reflect.apply`,
    "Reflect.construct" -> `AL::Reflect.construct`,
    "Reflect.defineProperty" -> `AL::Reflect.defineProperty`,
    "Reflect.deleteProperty" -> `AL::Reflect.deleteProperty`,
    "Reflect.get" -> `AL::Reflect.get`,
    "Reflect.getOwnPropertyDescriptor" -> `AL::Reflect.getOwnPropertyDescriptor`,
    "Reflect.getPrototypeOf" -> `AL::Reflect.getPrototypeOf`,
    "Reflect.has" -> `AL::Reflect.has`,
    "Reflect.isExtensible" -> `AL::Reflect.isExtensible`,
    "Reflect.ownKeys" -> `AL::Reflect.ownKeys`,
    "Reflect.preventExtensions" -> `AL::Reflect.preventExtensions`,
    "Reflect.set" -> `AL::Reflect.set`,
    "Reflect.setPrototypeOf" -> `AL::Reflect.setPrototypeOf`,
    "RegExp" -> `AL::RegExp`,
    "RegExp.prototype.exec" -> `AL::RegExp.prototype.exec`,
    "RegExp.prototype.test" -> `AL::RegExp.prototype.test`,
    "RegExp.prototype.toString" -> `AL::RegExp.prototype.toString`,
    "RegExp.prototype[SYMBOL_matchAll]" -> `AL::RegExp.prototype[SYMBOL_matchAll]`,
    "RegExp.prototype[SYMBOL_match]" -> `AL::RegExp.prototype[SYMBOL_match]`,
    "RegExp.prototype[SYMBOL_replace]" -> `AL::RegExp.prototype[SYMBOL_replace]`,
    "RegExp.prototype[SYMBOL_search]" -> `AL::RegExp.prototype[SYMBOL_search]`,
    "RegExp.prototype[SYMBOL_split]" -> `AL::RegExp.prototype[SYMBOL_split]`,
    "RegExpAlloc" -> `AL::RegExpAlloc`,
    "RegExpBuiltinExec" -> `AL::RegExpBuiltinExec`,
    "RegExpCreate" -> `AL::RegExpCreate`,
    "RegExpExec" -> `AL::RegExpExec`,
    "RegExpInitialize" -> `AL::RegExpInitialize`,
    "RegularExpressionFlags[1,0].EarlyErrors" -> `AL::RegularExpressionFlags[1,0].EarlyErrors`,
    "RegularExpressionLiteral[0,0].BodyText" -> `AL::RegularExpressionLiteral[0,0].BodyText`,
    "RegularExpressionLiteral[0,0].FlagText" -> `AL::RegularExpressionLiteral[0,0].FlagText`,
    "RejectPromise" -> `AL::RejectPromise`,
    "RelationalExpression[1,0].AssignmentTargetType" -> `AL::RelationalExpression[1,0].AssignmentTargetType`,
    "RelationalExpression[1,0].Evaluation" -> `AL::RelationalExpression[1,0].Evaluation`,
    "RelationalExpression[1,0].HasCallInTailPosition" -> `AL::RelationalExpression[1,0].HasCallInTailPosition`,
    "RelationalExpression[1,0].IsFunctionDefinition" -> `AL::RelationalExpression[1,0].IsFunctionDefinition`,
    "RelationalExpression[2,0].AssignmentTargetType" -> `AL::RelationalExpression[2,0].AssignmentTargetType`,
    "RelationalExpression[2,0].Evaluation" -> `AL::RelationalExpression[2,0].Evaluation`,
    "RelationalExpression[2,0].HasCallInTailPosition" -> `AL::RelationalExpression[2,0].HasCallInTailPosition`,
    "RelationalExpression[2,0].IsFunctionDefinition" -> `AL::RelationalExpression[2,0].IsFunctionDefinition`,
    "RelationalExpression[3,0].AssignmentTargetType" -> `AL::RelationalExpression[3,0].AssignmentTargetType`,
    "RelationalExpression[3,0].Evaluation" -> `AL::RelationalExpression[3,0].Evaluation`,
    "RelationalExpression[3,0].HasCallInTailPosition" -> `AL::RelationalExpression[3,0].HasCallInTailPosition`,
    "RelationalExpression[3,0].IsFunctionDefinition" -> `AL::RelationalExpression[3,0].IsFunctionDefinition`,
    "RelationalExpression[4,0].AssignmentTargetType" -> `AL::RelationalExpression[4,0].AssignmentTargetType`,
    "RelationalExpression[4,0].Evaluation" -> `AL::RelationalExpression[4,0].Evaluation`,
    "RelationalExpression[4,0].HasCallInTailPosition" -> `AL::RelationalExpression[4,0].HasCallInTailPosition`,
    "RelationalExpression[4,0].IsFunctionDefinition" -> `AL::RelationalExpression[4,0].IsFunctionDefinition`,
    "RelationalExpression[5,0].AssignmentTargetType" -> `AL::RelationalExpression[5,0].AssignmentTargetType`,
    "RelationalExpression[5,0].Evaluation" -> `AL::RelationalExpression[5,0].Evaluation`,
    "RelationalExpression[5,0].HasCallInTailPosition" -> `AL::RelationalExpression[5,0].HasCallInTailPosition`,
    "RelationalExpression[5,0].IsFunctionDefinition" -> `AL::RelationalExpression[5,0].IsFunctionDefinition`,
    "RelationalExpression[6,0].AssignmentTargetType" -> `AL::RelationalExpression[6,0].AssignmentTargetType`,
    "RelationalExpression[6,0].Evaluation" -> `AL::RelationalExpression[6,0].Evaluation`,
    "RelationalExpression[6,0].HasCallInTailPosition" -> `AL::RelationalExpression[6,0].HasCallInTailPosition`,
    "RelationalExpression[6,0].IsFunctionDefinition" -> `AL::RelationalExpression[6,0].IsFunctionDefinition`,
    "RemoveWaiter" -> `AL::RemoveWaiter`,
    "RemoveWaiters" -> `AL::RemoveWaiters`,
    "RepeatMatcher" -> `AL::RepeatMatcher`,
    "RequireInternalSlot" -> `AL::RequireInternalSlot`,
    "RequireObjectCoercible" -> `AL::RequireObjectCoercible`,
    "ResolveBinding" -> `AL::ResolveBinding`,
    "ResolveExport" -> `AL::ResolveExport`,
    "ResolveThisBinding" -> `AL::ResolveThisBinding`,
    "ReturnStatement[0,0].Evaluation" -> `AL::ReturnStatement[0,0].Evaluation`,
    "ReturnStatement[0,0].HasCallInTailPosition" -> `AL::ReturnStatement[0,0].HasCallInTailPosition`,
    "ReturnStatement[1,0].Evaluation" -> `AL::ReturnStatement[1,0].Evaluation`,
    "ReturnStatement[1,0].HasCallInTailPosition" -> `AL::ReturnStatement[1,0].HasCallInTailPosition`,
    "RunJobs" -> `AL::RunJobs`,
    "SameValue" -> `AL::SameValue`,
    "SameValueNonNumeric" -> `AL::SameValueNonNumeric`,
    "SameValueZero" -> `AL::SameValueZero`,
    "ScriptBody[0,0].EarlyErrors" -> `AL::ScriptBody[0,0].EarlyErrors`,
    "ScriptBody[0,0].LexicallyDeclaredNames" -> `AL::ScriptBody[0,0].LexicallyDeclaredNames`,
    "ScriptBody[0,0].LexicallyScopedDeclarations" -> `AL::ScriptBody[0,0].LexicallyScopedDeclarations`,
    "ScriptBody[0,0].VarDeclaredNames" -> `AL::ScriptBody[0,0].VarDeclaredNames`,
    "ScriptBody[0,0].VarScopedDeclarations" -> `AL::ScriptBody[0,0].VarScopedDeclarations`,
    "ScriptEvaluation" -> `AL::ScriptEvaluation`,
    "ScriptEvaluationJob" -> `AL::ScriptEvaluationJob`,
    "Script[0,0].Evaluation" -> `AL::Script[0,0].Evaluation`,
    "Script[0,1].EarlyErrors" -> `AL::Script[0,1].EarlyErrors`,
    "Script[0,1].IsStrict" -> `AL::Script[0,1].IsStrict`,
    "SecFromTime" -> `AL::SecFromTime`,
    "SecondsPerMinute" -> `AL::SecondsPerMinute`,
    "SerializeJSONArray" -> `AL::SerializeJSONArray`,
    "SerializeJSONObject" -> `AL::SerializeJSONObject`,
    "SerializeJSONProperty" -> `AL::SerializeJSONProperty`,
    "Set" -> `AL::Set`,
    "Set" -> `AL::Set`,
    "Set.prototype.add" -> `AL::Set.prototype.add`,
    "Set.prototype.clear" -> `AL::Set.prototype.clear`,
    "Set.prototype.delete" -> `AL::Set.prototype.delete`,
    "Set.prototype.entries" -> `AL::Set.prototype.entries`,
    "Set.prototype.forEach" -> `AL::Set.prototype.forEach`,
    "Set.prototype.has" -> `AL::Set.prototype.has`,
    "Set.prototype.values" -> `AL::Set.prototype.values`,
    "SetDefaultGlobalBindings" -> `AL::SetDefaultGlobalBindings`,
    "SetFunctionLength" -> `AL::SetFunctionLength`,
    "SetFunctionName" -> `AL::SetFunctionName`,
    "SetImmutablePrototype" -> `AL::SetImmutablePrototype`,
    "SetIntegrityLevel" -> `AL::SetIntegrityLevel`,
    "SetRealmGlobalObject" -> `AL::SetRealmGlobalObject`,
    "SetTypedArrayFromArrayLike" -> `AL::SetTypedArrayFromArrayLike`,
    "SetTypedArrayFromTypedArray" -> `AL::SetTypedArrayFromTypedArray`,
    "SetValueInBuffer" -> `AL::SetValueInBuffer`,
    "SetViewValue" -> `AL::SetViewValue`,
    "SharedArrayBuffer" -> `AL::SharedArrayBuffer`,
    "SharedArrayBuffer.prototype.slice" -> `AL::SharedArrayBuffer.prototype.slice`,
    "SharedDataBlockEventSet" -> `AL::SharedDataBlockEventSet`,
    "ShiftExpression[1,0].AssignmentTargetType" -> `AL::ShiftExpression[1,0].AssignmentTargetType`,
    "ShiftExpression[1,0].Evaluation" -> `AL::ShiftExpression[1,0].Evaluation`,
    "ShiftExpression[1,0].HasCallInTailPosition" -> `AL::ShiftExpression[1,0].HasCallInTailPosition`,
    "ShiftExpression[1,0].IsFunctionDefinition" -> `AL::ShiftExpression[1,0].IsFunctionDefinition`,
    "ShiftExpression[2,0].AssignmentTargetType" -> `AL::ShiftExpression[2,0].AssignmentTargetType`,
    "ShiftExpression[2,0].Evaluation" -> `AL::ShiftExpression[2,0].Evaluation`,
    "ShiftExpression[2,0].HasCallInTailPosition" -> `AL::ShiftExpression[2,0].HasCallInTailPosition`,
    "ShiftExpression[2,0].IsFunctionDefinition" -> `AL::ShiftExpression[2,0].IsFunctionDefinition`,
    "ShiftExpression[3,0].AssignmentTargetType" -> `AL::ShiftExpression[3,0].AssignmentTargetType`,
    "ShiftExpression[3,0].Evaluation" -> `AL::ShiftExpression[3,0].Evaluation`,
    "ShiftExpression[3,0].HasCallInTailPosition" -> `AL::ShiftExpression[3,0].HasCallInTailPosition`,
    "ShiftExpression[3,0].IsFunctionDefinition" -> `AL::ShiftExpression[3,0].IsFunctionDefinition`,
    "SingleNameBinding[0,0].ContainsExpression" -> `AL::SingleNameBinding[0,0].ContainsExpression`,
    "SingleNameBinding[0,0].HasInitializer" -> `AL::SingleNameBinding[0,0].HasInitializer`,
    "SingleNameBinding[0,0].IsSimpleParameterList" -> `AL::SingleNameBinding[0,0].IsSimpleParameterList`,
    "SingleNameBinding[0,1].BoundNames" -> `AL::SingleNameBinding[0,1].BoundNames`,
    "SingleNameBinding[0,1].ContainsExpression" -> `AL::SingleNameBinding[0,1].ContainsExpression`,
    "SingleNameBinding[0,1].HasInitializer" -> `AL::SingleNameBinding[0,1].HasInitializer`,
    "SingleNameBinding[0,1].IsSimpleParameterList" -> `AL::SingleNameBinding[0,1].IsSimpleParameterList`,
    "SingleNameBinding[0,1].IteratorBindingInitialization" -> `AL::SingleNameBinding[0,1].IteratorBindingInitialization`,
    "SingleNameBinding[0,1].KeyedBindingInitialization" -> `AL::SingleNameBinding[0,1].KeyedBindingInitialization`,
    "SortCompare" -> `AL::SortCompare`,
    "SpeciesConstructor" -> `AL::SpeciesConstructor`,
    "SplitMatch" -> `AL::SplitMatch`,
    "SpreadElement[0,0].ArrayAccumulation" -> `AL::SpreadElement[0,0].ArrayAccumulation`,
    "StatementListItem[0,0].LexicallyDeclaredNames" -> `AL::StatementListItem[0,0].LexicallyDeclaredNames`,
    "StatementListItem[0,0].LexicallyScopedDeclarations" -> `AL::StatementListItem[0,0].LexicallyScopedDeclarations`,
    "StatementListItem[0,0].TopLevelLexicallyDeclaredNames" -> `AL::StatementListItem[0,0].TopLevelLexicallyDeclaredNames`,
    "StatementListItem[0,0].TopLevelLexicallyScopedDeclarations" -> `AL::StatementListItem[0,0].TopLevelLexicallyScopedDeclarations`,
    "StatementListItem[0,0].TopLevelVarDeclaredNames" -> `AL::StatementListItem[0,0].TopLevelVarDeclaredNames`,
    "StatementListItem[0,0].TopLevelVarScopedDeclarations" -> `AL::StatementListItem[0,0].TopLevelVarScopedDeclarations`,
    "StatementListItem[1,0].ContainsDuplicateLabels" -> `AL::StatementListItem[1,0].ContainsDuplicateLabels`,
    "StatementListItem[1,0].ContainsUndefinedBreakTarget" -> `AL::StatementListItem[1,0].ContainsUndefinedBreakTarget`,
    "StatementListItem[1,0].ContainsUndefinedContinueTarget" -> `AL::StatementListItem[1,0].ContainsUndefinedContinueTarget`,
    "StatementListItem[1,0].HasCallInTailPosition" -> `AL::StatementListItem[1,0].HasCallInTailPosition`,
    "StatementListItem[1,0].LexicallyDeclaredNames" -> `AL::StatementListItem[1,0].LexicallyDeclaredNames`,
    "StatementListItem[1,0].LexicallyScopedDeclarations" -> `AL::StatementListItem[1,0].LexicallyScopedDeclarations`,
    "StatementListItem[1,0].TopLevelLexicallyDeclaredNames" -> `AL::StatementListItem[1,0].TopLevelLexicallyDeclaredNames`,
    "StatementListItem[1,0].TopLevelLexicallyScopedDeclarations" -> `AL::StatementListItem[1,0].TopLevelLexicallyScopedDeclarations`,
    "StatementListItem[1,0].TopLevelVarDeclaredNames" -> `AL::StatementListItem[1,0].TopLevelVarDeclaredNames`,
    "StatementListItem[1,0].TopLevelVarScopedDeclarations" -> `AL::StatementListItem[1,0].TopLevelVarScopedDeclarations`,
    "StatementListItem[1,0].VarDeclaredNames" -> `AL::StatementListItem[1,0].VarDeclaredNames`,
    "StatementListItem[1,0].VarScopedDeclarations" -> `AL::StatementListItem[1,0].VarScopedDeclarations`,
    "StatementList[1,0].ContainsDuplicateLabels" -> `AL::StatementList[1,0].ContainsDuplicateLabels`,
    "StatementList[1,0].ContainsUndefinedBreakTarget" -> `AL::StatementList[1,0].ContainsUndefinedBreakTarget`,
    "StatementList[1,0].ContainsUndefinedContinueTarget" -> `AL::StatementList[1,0].ContainsUndefinedContinueTarget`,
    "StatementList[1,0].Evaluation" -> `AL::StatementList[1,0].Evaluation`,
    "StatementList[1,0].HasCallInTailPosition" -> `AL::StatementList[1,0].HasCallInTailPosition`,
    "StatementList[1,0].LexicallyDeclaredNames" -> `AL::StatementList[1,0].LexicallyDeclaredNames`,
    "StatementList[1,0].LexicallyScopedDeclarations" -> `AL::StatementList[1,0].LexicallyScopedDeclarations`,
    "StatementList[1,0].TopLevelLexicallyDeclaredNames" -> `AL::StatementList[1,0].TopLevelLexicallyDeclaredNames`,
    "StatementList[1,0].TopLevelLexicallyScopedDeclarations" -> `AL::StatementList[1,0].TopLevelLexicallyScopedDeclarations`,
    "StatementList[1,0].TopLevelVarDeclaredNames" -> `AL::StatementList[1,0].TopLevelVarDeclaredNames`,
    "StatementList[1,0].TopLevelVarScopedDeclarations" -> `AL::StatementList[1,0].TopLevelVarScopedDeclarations`,
    "StatementList[1,0].VarDeclaredNames" -> `AL::StatementList[1,0].VarDeclaredNames`,
    "StatementList[1,0].VarScopedDeclarations" -> `AL::StatementList[1,0].VarScopedDeclarations`,
    "Statement[0,0].LabelledEvaluation" -> `AL::Statement[0,0].LabelledEvaluation`,
    "Statement[1,0].ContainsDuplicateLabels" -> `AL::Statement[1,0].ContainsDuplicateLabels`,
    "Statement[1,0].ContainsUndefinedBreakTarget" -> `AL::Statement[1,0].ContainsUndefinedBreakTarget`,
    "Statement[1,0].ContainsUndefinedContinueTarget" -> `AL::Statement[1,0].ContainsUndefinedContinueTarget`,
    "Statement[1,0].HasCallInTailPosition" -> `AL::Statement[1,0].HasCallInTailPosition`,
    "Statement[1,0].LabelledEvaluation" -> `AL::Statement[1,0].LabelledEvaluation`,
    "Statement[11,0].ContainsDuplicateLabels" -> `AL::Statement[11,0].ContainsDuplicateLabels`,
    "Statement[11,0].ContainsUndefinedBreakTarget" -> `AL::Statement[11,0].ContainsUndefinedBreakTarget`,
    "Statement[11,0].ContainsUndefinedContinueTarget" -> `AL::Statement[11,0].ContainsUndefinedContinueTarget`,
    "Statement[11,0].HasCallInTailPosition" -> `AL::Statement[11,0].HasCallInTailPosition`,
    "Statement[11,0].LabelledEvaluation" -> `AL::Statement[11,0].LabelledEvaluation`,
    "Statement[11,0].VarDeclaredNames" -> `AL::Statement[11,0].VarDeclaredNames`,
    "Statement[11,0].VarScopedDeclarations" -> `AL::Statement[11,0].VarScopedDeclarations`,
    "Statement[12,0].LabelledEvaluation" -> `AL::Statement[12,0].LabelledEvaluation`,
    "Statement[13,0].ContainsDuplicateLabels" -> `AL::Statement[13,0].ContainsDuplicateLabels`,
    "Statement[13,0].ContainsUndefinedBreakTarget" -> `AL::Statement[13,0].ContainsUndefinedBreakTarget`,
    "Statement[13,0].ContainsUndefinedContinueTarget" -> `AL::Statement[13,0].ContainsUndefinedContinueTarget`,
    "Statement[13,0].HasCallInTailPosition" -> `AL::Statement[13,0].HasCallInTailPosition`,
    "Statement[13,0].LabelledEvaluation" -> `AL::Statement[13,0].LabelledEvaluation`,
    "Statement[13,0].VarDeclaredNames" -> `AL::Statement[13,0].VarDeclaredNames`,
    "Statement[13,0].VarScopedDeclarations" -> `AL::Statement[13,0].VarScopedDeclarations`,
    "Statement[2,0].ContainsDuplicateLabels" -> `AL::Statement[2,0].ContainsDuplicateLabels`,
    "Statement[2,0].ContainsUndefinedBreakTarget" -> `AL::Statement[2,0].ContainsUndefinedBreakTarget`,
    "Statement[2,0].ContainsUndefinedContinueTarget" -> `AL::Statement[2,0].ContainsUndefinedContinueTarget`,
    "Statement[2,0].HasCallInTailPosition" -> `AL::Statement[2,0].HasCallInTailPosition`,
    "Statement[2,0].LabelledEvaluation" -> `AL::Statement[2,0].LabelledEvaluation`,
    "Statement[2,0].VarDeclaredNames" -> `AL::Statement[2,0].VarDeclaredNames`,
    "Statement[2,0].VarScopedDeclarations" -> `AL::Statement[2,0].VarScopedDeclarations`,
    "Statement[3,0].ContainsDuplicateLabels" -> `AL::Statement[3,0].ContainsDuplicateLabels`,
    "Statement[3,0].ContainsUndefinedBreakTarget" -> `AL::Statement[3,0].ContainsUndefinedBreakTarget`,
    "Statement[3,0].ContainsUndefinedContinueTarget" -> `AL::Statement[3,0].ContainsUndefinedContinueTarget`,
    "Statement[3,0].HasCallInTailPosition" -> `AL::Statement[3,0].HasCallInTailPosition`,
    "Statement[3,0].LabelledEvaluation" -> `AL::Statement[3,0].LabelledEvaluation`,
    "Statement[3,0].VarDeclaredNames" -> `AL::Statement[3,0].VarDeclaredNames`,
    "Statement[3,0].VarScopedDeclarations" -> `AL::Statement[3,0].VarScopedDeclarations`,
    "Statement[4,0].LabelledEvaluation" -> `AL::Statement[4,0].LabelledEvaluation`,
    "Statement[6,0].ContainsDuplicateLabels" -> `AL::Statement[6,0].ContainsDuplicateLabels`,
    "Statement[6,0].ContainsUndefinedBreakTarget" -> `AL::Statement[6,0].ContainsUndefinedBreakTarget`,
    "Statement[6,0].HasCallInTailPosition" -> `AL::Statement[6,0].HasCallInTailPosition`,
    "Statement[6,0].LabelledEvaluation" -> `AL::Statement[6,0].LabelledEvaluation`,
    "Statement[6,0].VarDeclaredNames" -> `AL::Statement[6,0].VarDeclaredNames`,
    "Statement[6,0].VarScopedDeclarations" -> `AL::Statement[6,0].VarScopedDeclarations`,
    "Statement[7,0].ContainsDuplicateLabels" -> `AL::Statement[7,0].ContainsDuplicateLabels`,
    "Statement[7,0].ContainsUndefinedContinueTarget" -> `AL::Statement[7,0].ContainsUndefinedContinueTarget`,
    "Statement[7,0].HasCallInTailPosition" -> `AL::Statement[7,0].HasCallInTailPosition`,
    "Statement[7,0].LabelledEvaluation" -> `AL::Statement[7,0].LabelledEvaluation`,
    "Statement[7,0].VarDeclaredNames" -> `AL::Statement[7,0].VarDeclaredNames`,
    "Statement[7,0].VarScopedDeclarations" -> `AL::Statement[7,0].VarScopedDeclarations`,
    "Statement[8,0].ContainsDuplicateLabels" -> `AL::Statement[8,0].ContainsDuplicateLabels`,
    "Statement[8,0].ContainsUndefinedBreakTarget" -> `AL::Statement[8,0].ContainsUndefinedBreakTarget`,
    "Statement[8,0].ContainsUndefinedContinueTarget" -> `AL::Statement[8,0].ContainsUndefinedContinueTarget`,
    "Statement[8,0].LabelledEvaluation" -> `AL::Statement[8,0].LabelledEvaluation`,
    "Statement[8,0].VarDeclaredNames" -> `AL::Statement[8,0].VarDeclaredNames`,
    "Statement[8,0].VarScopedDeclarations" -> `AL::Statement[8,0].VarScopedDeclarations`,
    "Statement[9,0].LabelledEvaluation" -> `AL::Statement[9,0].LabelledEvaluation`,
    "StrictEqualityComparison" -> `AL::StrictEqualityComparison`,
    "String" -> `AL::String`,
    "String.fromCharCode" -> `AL::String.fromCharCode`,
    "String.fromCodePoint" -> `AL::String.fromCodePoint`,
    "String.prototype.charAt" -> `AL::String.prototype.charAt`,
    "String.prototype.charCodeAt" -> `AL::String.prototype.charCodeAt`,
    "String.prototype.codePointAt" -> `AL::String.prototype.codePointAt`,
    "String.prototype.concat" -> `AL::String.prototype.concat`,
    "String.prototype.endsWith" -> `AL::String.prototype.endsWith`,
    "String.prototype.includes" -> `AL::String.prototype.includes`,
    "String.prototype.indexOf" -> `AL::String.prototype.indexOf`,
    "String.prototype.lastIndexOf" -> `AL::String.prototype.lastIndexOf`,
    "String.prototype.localeCompare" -> `AL::String.prototype.localeCompare`,
    "String.prototype.match" -> `AL::String.prototype.match`,
    "String.prototype.matchAll" -> `AL::String.prototype.matchAll`,
    "String.prototype.normalize" -> `AL::String.prototype.normalize`,
    "String.prototype.padEnd" -> `AL::String.prototype.padEnd`,
    "String.prototype.padStart" -> `AL::String.prototype.padStart`,
    "String.prototype.repeat" -> `AL::String.prototype.repeat`,
    "String.prototype.replace" -> `AL::String.prototype.replace`,
    "String.prototype.replaceAll" -> `AL::String.prototype.replaceAll`,
    "String.prototype.search" -> `AL::String.prototype.search`,
    "String.prototype.slice" -> `AL::String.prototype.slice`,
    "String.prototype.split" -> `AL::String.prototype.split`,
    "String.prototype.startsWith" -> `AL::String.prototype.startsWith`,
    "String.prototype.substring" -> `AL::String.prototype.substring`,
    "String.prototype.toLowerCase" -> `AL::String.prototype.toLowerCase`,
    "String.prototype.toString" -> `AL::String.prototype.toString`,
    "String.prototype.trim" -> `AL::String.prototype.trim`,
    "String.prototype.trimEnd" -> `AL::String.prototype.trimEnd`,
    "String.prototype.trimStart" -> `AL::String.prototype.trimStart`,
    "String.prototype.valueOf" -> `AL::String.prototype.valueOf`,
    "String.prototype[SYMBOL_iterator]" -> `AL::String.prototype[SYMBOL_iterator]`,
    "String.raw" -> `AL::String.raw`,
    "StringCreate" -> `AL::StringCreate`,
    "StringExoticObject.DefineOwnProperty" -> `AL::StringExoticObject.DefineOwnProperty`,
    "StringExoticObject.GetOwnProperty" -> `AL::StringExoticObject.GetOwnProperty`,
    "StringExoticObject.OwnPropertyKeys" -> `AL::StringExoticObject.OwnPropertyKeys`,
    "StringGetOwnProperty" -> `AL::StringGetOwnProperty`,
    "StringIndexOf" -> `AL::StringIndexOf`,
    "StringPad" -> `AL::StringPad`,
    "StringToBigInt" -> `AL::StringToBigInt`,
    "StringToCodePoints" -> `AL::StringToCodePoints`,
    "SubstitutionTemplate[0,0].ArgumentListEvaluation" -> `AL::SubstitutionTemplate[0,0].ArgumentListEvaluation`,
    "SubstitutionTemplate[0,0].EarlyErrors" -> `AL::SubstitutionTemplate[0,0].EarlyErrors`,
    "SubstitutionTemplate[0,0].Evaluation" -> `AL::SubstitutionTemplate[0,0].Evaluation`,
    "SubstitutionTemplate[0,0].TemplateStrings" -> `AL::SubstitutionTemplate[0,0].TemplateStrings`,
    "SuperCall[0,0].Evaluation" -> `AL::SuperCall[0,0].Evaluation`,
    "SuperProperty[0,0].Evaluation" -> `AL::SuperProperty[0,0].Evaluation`,
    "SuperProperty[1,0].Contains" -> `AL::SuperProperty[1,0].Contains`,
    "SuperProperty[1,0].Evaluation" -> `AL::SuperProperty[1,0].Evaluation`,
    "SuspendAgent" -> `AL::SuspendAgent`,
    "SwitchStatement[0,0].ContainsDuplicateLabels" -> `AL::SwitchStatement[0,0].ContainsDuplicateLabels`,
    "SwitchStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::SwitchStatement[0,0].ContainsUndefinedBreakTarget`,
    "SwitchStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::SwitchStatement[0,0].ContainsUndefinedContinueTarget`,
    "SwitchStatement[0,0].EarlyErrors" -> `AL::SwitchStatement[0,0].EarlyErrors`,
    "SwitchStatement[0,0].Evaluation" -> `AL::SwitchStatement[0,0].Evaluation`,
    "SwitchStatement[0,0].HasCallInTailPosition" -> `AL::SwitchStatement[0,0].HasCallInTailPosition`,
    "SwitchStatement[0,0].VarDeclaredNames" -> `AL::SwitchStatement[0,0].VarDeclaredNames`,
    "SwitchStatement[0,0].VarScopedDeclarations" -> `AL::SwitchStatement[0,0].VarScopedDeclarations`,
    "Symbol" -> `AL::Symbol`,
    "Symbol.for" -> `AL::Symbol.for`,
    "Symbol.keyFor" -> `AL::Symbol.keyFor`,
    "Symbol.prototype.toString" -> `AL::Symbol.prototype.toString`,
    "Symbol.prototype.valueOf" -> `AL::Symbol.prototype.valueOf`,
    "Symbol.prototype[SYMBOL_toPrimitive]" -> `AL::Symbol.prototype[SYMBOL_toPrimitive]`,
    "SymbolDescriptiveString" -> `AL::SymbolDescriptiveString`,
    "SyntaxError" -> `AL::SyntaxError`,
    "TearFreeReads" -> `AL::TearFreeReads`,
    "TemplateLiteral[0,0].ArgumentListEvaluation" -> `AL::TemplateLiteral[0,0].ArgumentListEvaluation`,
    "TemplateLiteral[0,0].EarlyErrors" -> `AL::TemplateLiteral[0,0].EarlyErrors`,
    "TemplateLiteral[0,0].Evaluation" -> `AL::TemplateLiteral[0,0].Evaluation`,
    "TemplateLiteral[0,0].TemplateStrings" -> `AL::TemplateLiteral[0,0].TemplateStrings`,
    "TemplateLiteral[1,0].ArgumentListEvaluation" -> `AL::TemplateLiteral[1,0].ArgumentListEvaluation`,
    "TemplateLiteral[1,0].EarlyErrors" -> `AL::TemplateLiteral[1,0].EarlyErrors`,
    "TemplateMiddleList[0,0].EarlyErrors" -> `AL::TemplateMiddleList[0,0].EarlyErrors`,
    "TemplateMiddleList[0,0].Evaluation" -> `AL::TemplateMiddleList[0,0].Evaluation`,
    "TemplateMiddleList[0,0].SubstitutionEvaluation" -> `AL::TemplateMiddleList[0,0].SubstitutionEvaluation`,
    "TemplateMiddleList[0,0].TemplateStrings" -> `AL::TemplateMiddleList[0,0].TemplateStrings`,
    "TemplateMiddleList[1,0].EarlyErrors" -> `AL::TemplateMiddleList[1,0].EarlyErrors`,
    "TemplateMiddleList[1,0].Evaluation" -> `AL::TemplateMiddleList[1,0].Evaluation`,
    "TemplateMiddleList[1,0].SubstitutionEvaluation" -> `AL::TemplateMiddleList[1,0].SubstitutionEvaluation`,
    "TemplateMiddleList[1,0].TemplateStrings" -> `AL::TemplateMiddleList[1,0].TemplateStrings`,
    "TemplateSpans[0,0].EarlyErrors" -> `AL::TemplateSpans[0,0].EarlyErrors`,
    "TemplateSpans[0,0].Evaluation" -> `AL::TemplateSpans[0,0].Evaluation`,
    "TemplateSpans[0,0].SubstitutionEvaluation" -> `AL::TemplateSpans[0,0].SubstitutionEvaluation`,
    "TemplateSpans[0,0].TemplateStrings" -> `AL::TemplateSpans[0,0].TemplateStrings`,
    "TemplateSpans[1,0].Evaluation" -> `AL::TemplateSpans[1,0].Evaluation`,
    "TemplateSpans[1,0].SubstitutionEvaluation" -> `AL::TemplateSpans[1,0].SubstitutionEvaluation`,
    "TemplateSpans[1,0].TemplateStrings" -> `AL::TemplateSpans[1,0].TemplateStrings`,
    "TestIntegrityLevel" -> `AL::TestIntegrityLevel`,
    "TheAbstractClosureSpecificationType" -> `AL::TheAbstractClosureSpecificationType`,
    "ThenFinallyFunctions" -> `AL::ThenFinallyFunctions`,
    "ThrowStatement[0,0].Evaluation" -> `AL::ThrowStatement[0,0].Evaluation`,
    "TimeClip" -> `AL::TimeClip`,
    "TimeFromYear" -> `AL::TimeFromYear`,
    "TimeString" -> `AL::TimeString`,
    "TimeWithinDay" -> `AL::TimeWithinDay`,
    "TimeZoneString" -> `AL::TimeZoneString`,
    "ToBigInt" -> `AL::ToBigInt`,
    "ToBigInt" -> `AL::ToBigInt`,
    "ToBigInt" -> `AL::ToBigInt`,
    "ToBigInt64" -> `AL::ToBigInt64`,
    "ToBigUint64" -> `AL::ToBigUint64`,
    "ToBoolean" -> `AL::ToBoolean`,
    "ToDateString" -> `AL::ToDateString`,
    "ToIndex" -> `AL::ToIndex`,
    "ToInt16" -> `AL::ToInt16`,
    "ToInt32" -> `AL::ToInt32`,
    "ToInt8" -> `AL::ToInt8`,
    "ToIntegerOrInfinity" -> `AL::ToIntegerOrInfinity`,
    "ToLength" -> `AL::ToLength`,
    "ToNumber" -> `AL::ToNumber`,
    "ToNumber" -> `AL::ToNumber`,
    "ToNumeric" -> `AL::ToNumeric`,
    "ToObject" -> `AL::ToObject`,
    "ToPrimitive" -> `AL::ToPrimitive`,
    "ToPropertyDescriptor" -> `AL::ToPropertyDescriptor`,
    "ToPropertyKey" -> `AL::ToPropertyKey`,
    "ToString" -> `AL::ToString`,
    "ToUint16" -> `AL::ToUint16`,
    "ToUint32" -> `AL::ToUint32`,
    "ToUint8" -> `AL::ToUint8`,
    "ToUint8Clamp" -> `AL::ToUint8Clamp`,
    "TriggerPromiseReactions" -> `AL::TriggerPromiseReactions`,
    "TrimString" -> `AL::TrimString`,
    "TryStatement[0,0].ContainsDuplicateLabels" -> `AL::TryStatement[0,0].ContainsDuplicateLabels`,
    "TryStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::TryStatement[0,0].ContainsUndefinedBreakTarget`,
    "TryStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::TryStatement[0,0].ContainsUndefinedContinueTarget`,
    "TryStatement[0,0].Evaluation" -> `AL::TryStatement[0,0].Evaluation`,
    "TryStatement[0,0].HasCallInTailPosition" -> `AL::TryStatement[0,0].HasCallInTailPosition`,
    "TryStatement[0,0].VarDeclaredNames" -> `AL::TryStatement[0,0].VarDeclaredNames`,
    "TryStatement[0,0].VarScopedDeclarations" -> `AL::TryStatement[0,0].VarScopedDeclarations`,
    "TryStatement[1,0].ContainsDuplicateLabels" -> `AL::TryStatement[1,0].ContainsDuplicateLabels`,
    "TryStatement[1,0].ContainsUndefinedBreakTarget" -> `AL::TryStatement[1,0].ContainsUndefinedBreakTarget`,
    "TryStatement[1,0].ContainsUndefinedContinueTarget" -> `AL::TryStatement[1,0].ContainsUndefinedContinueTarget`,
    "TryStatement[1,0].Evaluation" -> `AL::TryStatement[1,0].Evaluation`,
    "TryStatement[1,0].HasCallInTailPosition" -> `AL::TryStatement[1,0].HasCallInTailPosition`,
    "TryStatement[1,0].VarDeclaredNames" -> `AL::TryStatement[1,0].VarDeclaredNames`,
    "TryStatement[1,0].VarScopedDeclarations" -> `AL::TryStatement[1,0].VarScopedDeclarations`,
    "TryStatement[2,0].ContainsDuplicateLabels" -> `AL::TryStatement[2,0].ContainsDuplicateLabels`,
    "TryStatement[2,0].ContainsUndefinedBreakTarget" -> `AL::TryStatement[2,0].ContainsUndefinedBreakTarget`,
    "TryStatement[2,0].ContainsUndefinedContinueTarget" -> `AL::TryStatement[2,0].ContainsUndefinedContinueTarget`,
    "TryStatement[2,0].Evaluation" -> `AL::TryStatement[2,0].Evaluation`,
    "TryStatement[2,0].HasCallInTailPosition" -> `AL::TryStatement[2,0].HasCallInTailPosition`,
    "TryStatement[2,0].VarDeclaredNames" -> `AL::TryStatement[2,0].VarDeclaredNames`,
    "TryStatement[2,0].VarScopedDeclarations" -> `AL::TryStatement[2,0].VarScopedDeclarations`,
    "TypeError" -> `AL::TypeError`,
    "TypedArrayCreate" -> `AL::TypedArrayCreate`,
    "TypedArraySpeciesCreate" -> `AL::TypedArraySpeciesCreate`,
    "URIError" -> `AL::URIError`,
    "UTC" -> `AL::UTC`,
    "UTF16EncodeCodePoint" -> `AL::UTF16EncodeCodePoint`,
    "UTF16SurrogatePairToCodePoint" -> `AL::UTF16SurrogatePairToCodePoint`,
    "UnaryExpression[1,0].AssignmentTargetType" -> `AL::UnaryExpression[1,0].AssignmentTargetType`,
    "UnaryExpression[1,0].Evaluation" -> `AL::UnaryExpression[1,0].Evaluation`,
    "UnaryExpression[1,0].HasCallInTailPosition" -> `AL::UnaryExpression[1,0].HasCallInTailPosition`,
    "UnaryExpression[1,0].IsFunctionDefinition" -> `AL::UnaryExpression[1,0].IsFunctionDefinition`,
    "UnaryExpression[2,0].AssignmentTargetType" -> `AL::UnaryExpression[2,0].AssignmentTargetType`,
    "UnaryExpression[2,0].Evaluation" -> `AL::UnaryExpression[2,0].Evaluation`,
    "UnaryExpression[2,0].HasCallInTailPosition" -> `AL::UnaryExpression[2,0].HasCallInTailPosition`,
    "UnaryExpression[2,0].IsFunctionDefinition" -> `AL::UnaryExpression[2,0].IsFunctionDefinition`,
    "UnaryExpression[3,0].AssignmentTargetType" -> `AL::UnaryExpression[3,0].AssignmentTargetType`,
    "UnaryExpression[3,0].Evaluation" -> `AL::UnaryExpression[3,0].Evaluation`,
    "UnaryExpression[3,0].HasCallInTailPosition" -> `AL::UnaryExpression[3,0].HasCallInTailPosition`,
    "UnaryExpression[3,0].IsFunctionDefinition" -> `AL::UnaryExpression[3,0].IsFunctionDefinition`,
    "UnaryExpression[4,0].AssignmentTargetType" -> `AL::UnaryExpression[4,0].AssignmentTargetType`,
    "UnaryExpression[4,0].Evaluation" -> `AL::UnaryExpression[4,0].Evaluation`,
    "UnaryExpression[4,0].HasCallInTailPosition" -> `AL::UnaryExpression[4,0].HasCallInTailPosition`,
    "UnaryExpression[4,0].IsFunctionDefinition" -> `AL::UnaryExpression[4,0].IsFunctionDefinition`,
    "UnaryExpression[5,0].AssignmentTargetType" -> `AL::UnaryExpression[5,0].AssignmentTargetType`,
    "UnaryExpression[5,0].Evaluation" -> `AL::UnaryExpression[5,0].Evaluation`,
    "UnaryExpression[5,0].HasCallInTailPosition" -> `AL::UnaryExpression[5,0].HasCallInTailPosition`,
    "UnaryExpression[5,0].IsFunctionDefinition" -> `AL::UnaryExpression[5,0].IsFunctionDefinition`,
    "UnaryExpression[6,0].AssignmentTargetType" -> `AL::UnaryExpression[6,0].AssignmentTargetType`,
    "UnaryExpression[6,0].Evaluation" -> `AL::UnaryExpression[6,0].Evaluation`,
    "UnaryExpression[6,0].HasCallInTailPosition" -> `AL::UnaryExpression[6,0].HasCallInTailPosition`,
    "UnaryExpression[6,0].IsFunctionDefinition" -> `AL::UnaryExpression[6,0].IsFunctionDefinition`,
    "UnaryExpression[7,0].AssignmentTargetType" -> `AL::UnaryExpression[7,0].AssignmentTargetType`,
    "UnaryExpression[7,0].Evaluation" -> `AL::UnaryExpression[7,0].Evaluation`,
    "UnaryExpression[7,0].HasCallInTailPosition" -> `AL::UnaryExpression[7,0].HasCallInTailPosition`,
    "UnaryExpression[7,0].IsFunctionDefinition" -> `AL::UnaryExpression[7,0].IsFunctionDefinition`,
    "UnaryExpression[8,0].AssignmentTargetType" -> `AL::UnaryExpression[8,0].AssignmentTargetType`,
    "UnaryExpression[8,0].HasCallInTailPosition" -> `AL::UnaryExpression[8,0].HasCallInTailPosition`,
    "UnaryExpression[8,0].IsFunctionDefinition" -> `AL::UnaryExpression[8,0].IsFunctionDefinition`,
    "UnicodeEscape" -> `AL::UnicodeEscape`,
    "UnicodeMatchProperty" -> `AL::UnicodeMatchProperty`,
    "UnicodeMatchPropertyValue" -> `AL::UnicodeMatchPropertyValue`,
    "UniqueFormalParameters[0,0].EarlyErrors" -> `AL::UniqueFormalParameters[0,0].EarlyErrors`,
    "UpdateEmpty" -> `AL::UpdateEmpty`,
    "UpdateExpression[1,0].AssignmentTargetType" -> `AL::UpdateExpression[1,0].AssignmentTargetType`,
    "UpdateExpression[1,0].EarlyErrors" -> `AL::UpdateExpression[1,0].EarlyErrors`,
    "UpdateExpression[1,0].Evaluation" -> `AL::UpdateExpression[1,0].Evaluation`,
    "UpdateExpression[1,0].HasCallInTailPosition" -> `AL::UpdateExpression[1,0].HasCallInTailPosition`,
    "UpdateExpression[1,0].IsFunctionDefinition" -> `AL::UpdateExpression[1,0].IsFunctionDefinition`,
    "UpdateExpression[2,0].AssignmentTargetType" -> `AL::UpdateExpression[2,0].AssignmentTargetType`,
    "UpdateExpression[2,0].EarlyErrors" -> `AL::UpdateExpression[2,0].EarlyErrors`,
    "UpdateExpression[2,0].Evaluation" -> `AL::UpdateExpression[2,0].Evaluation`,
    "UpdateExpression[2,0].HasCallInTailPosition" -> `AL::UpdateExpression[2,0].HasCallInTailPosition`,
    "UpdateExpression[2,0].IsFunctionDefinition" -> `AL::UpdateExpression[2,0].IsFunctionDefinition`,
    "UpdateExpression[3,0].AssignmentTargetType" -> `AL::UpdateExpression[3,0].AssignmentTargetType`,
    "UpdateExpression[3,0].EarlyErrors" -> `AL::UpdateExpression[3,0].EarlyErrors`,
    "UpdateExpression[3,0].Evaluation" -> `AL::UpdateExpression[3,0].Evaluation`,
    "UpdateExpression[3,0].HasCallInTailPosition" -> `AL::UpdateExpression[3,0].HasCallInTailPosition`,
    "UpdateExpression[3,0].IsFunctionDefinition" -> `AL::UpdateExpression[3,0].IsFunctionDefinition`,
    "UpdateExpression[4,0].AssignmentTargetType" -> `AL::UpdateExpression[4,0].AssignmentTargetType`,
    "UpdateExpression[4,0].EarlyErrors" -> `AL::UpdateExpression[4,0].EarlyErrors`,
    "UpdateExpression[4,0].Evaluation" -> `AL::UpdateExpression[4,0].Evaluation`,
    "UpdateExpression[4,0].HasCallInTailPosition" -> `AL::UpdateExpression[4,0].HasCallInTailPosition`,
    "UpdateExpression[4,0].IsFunctionDefinition" -> `AL::UpdateExpression[4,0].IsFunctionDefinition`,
    "ValidChosenReads" -> `AL::ValidChosenReads`,
    "ValidateAndApplyPropertyDescriptor" -> `AL::ValidateAndApplyPropertyDescriptor`,
    "ValidateAtomicAccess" -> `AL::ValidateAtomicAccess`,
    "ValidateIntegerTypedArray" -> `AL::ValidateIntegerTypedArray`,
    "ValidateTypedArray" -> `AL::ValidateTypedArray`,
    "ValueOfReadEvent" -> `AL::ValueOfReadEvent`,
    "VariableDeclarationList[0,0].VarScopedDeclarations" -> `AL::VariableDeclarationList[0,0].VarScopedDeclarations`,
    "VariableDeclarationList[1,0].BoundNames" -> `AL::VariableDeclarationList[1,0].BoundNames`,
    "VariableDeclarationList[1,0].Evaluation" -> `AL::VariableDeclarationList[1,0].Evaluation`,
    "VariableDeclarationList[1,0].VarScopedDeclarations" -> `AL::VariableDeclarationList[1,0].VarScopedDeclarations`,
    "VariableDeclaration[0,0].Evaluation" -> `AL::VariableDeclaration[0,0].Evaluation`,
    "VariableDeclaration[0,1].BoundNames" -> `AL::VariableDeclaration[0,1].BoundNames`,
    "VariableDeclaration[0,1].Evaluation" -> `AL::VariableDeclaration[0,1].Evaluation`,
    "VariableDeclaration[1,0].BoundNames" -> `AL::VariableDeclaration[1,0].BoundNames`,
    "VariableDeclaration[1,0].Evaluation" -> `AL::VariableDeclaration[1,0].Evaluation`,
    "VariableStatement[0,0].Evaluation" -> `AL::VariableStatement[0,0].Evaluation`,
    "VariableStatement[0,0].VarDeclaredNames" -> `AL::VariableStatement[0,0].VarDeclaredNames`,
    "WeakMap" -> `AL::WeakMap`,
    "WeakMap.prototype.delete" -> `AL::WeakMap.prototype.delete`,
    "WeakMap.prototype.get" -> `AL::WeakMap.prototype.get`,
    "WeakMap.prototype.has" -> `AL::WeakMap.prototype.has`,
    "WeakMap.prototype.set" -> `AL::WeakMap.prototype.set`,
    "WeakRef" -> `AL::WeakRef`,
    "WeakRef.prototype.deref" -> `AL::WeakRef.prototype.deref`,
    "WeakRefDeref" -> `AL::WeakRefDeref`,
    "WeakSet" -> `AL::WeakSet`,
    "WeakSet.prototype.add" -> `AL::WeakSet.prototype.add`,
    "WeakSet.prototype.delete" -> `AL::WeakSet.prototype.delete`,
    "WeakSet.prototype.has" -> `AL::WeakSet.prototype.has`,
    "WeekDay" -> `AL::WeekDay`,
    "WhileStatement[0,0].ContainsDuplicateLabels" -> `AL::WhileStatement[0,0].ContainsDuplicateLabels`,
    "WhileStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::WhileStatement[0,0].ContainsUndefinedBreakTarget`,
    "WhileStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::WhileStatement[0,0].ContainsUndefinedContinueTarget`,
    "WhileStatement[0,0].EarlyErrors" -> `AL::WhileStatement[0,0].EarlyErrors`,
    "WhileStatement[0,0].HasCallInTailPosition" -> `AL::WhileStatement[0,0].HasCallInTailPosition`,
    "WhileStatement[0,0].VarDeclaredNames" -> `AL::WhileStatement[0,0].VarDeclaredNames`,
    "WhileStatement[0,0].VarScopedDeclarations" -> `AL::WhileStatement[0,0].VarScopedDeclarations`,
    "WhileStatement[0,0].WhileLoopEvaluation" -> `AL::WhileStatement[0,0].WhileLoopEvaluation`,
    "WithStatement[0,0].ContainsDuplicateLabels" -> `AL::WithStatement[0,0].ContainsDuplicateLabels`,
    "WithStatement[0,0].ContainsUndefinedBreakTarget" -> `AL::WithStatement[0,0].ContainsUndefinedBreakTarget`,
    "WithStatement[0,0].ContainsUndefinedContinueTarget" -> `AL::WithStatement[0,0].ContainsUndefinedContinueTarget`,
    "WithStatement[0,0].EarlyErrors" -> `AL::WithStatement[0,0].EarlyErrors`,
    "WithStatement[0,0].Evaluation" -> `AL::WithStatement[0,0].Evaluation`,
    "WithStatement[0,0].HasCallInTailPosition" -> `AL::WithStatement[0,0].HasCallInTailPosition`,
    "WithStatement[0,0].VarDeclaredNames" -> `AL::WithStatement[0,0].VarDeclaredNames`,
    "WithStatement[0,0].VarScopedDeclarations" -> `AL::WithStatement[0,0].VarScopedDeclarations`,
    "YearFromTime" -> `AL::YearFromTime`,
    "Yield" -> `AL::Yield`,
    "YieldExpression[0,0].Evaluation" -> `AL::YieldExpression[0,0].Evaluation`,
    "YieldExpression[1,0].Evaluation" -> `AL::YieldExpression[1,0].Evaluation`,
    "YieldExpression[2,0].Evaluation" -> `AL::YieldExpression[2,0].Evaluation`,
    "decodeURI" -> `AL::decodeURI`,
    "decodeURIComponent" -> `AL::decodeURIComponent`,
    "encodeURI" -> `AL::encodeURI`,
    "encodeURIComponent" -> `AL::encodeURIComponent`,
    "eval" -> `AL::eval`,
    "getArrayBuffer.prototype.byteLength" -> `AL::getArrayBuffer.prototype.byteLength`,
    "getArrayBuffer[SYMBOL_species]" -> `AL::getArrayBuffer[SYMBOL_species]`,
    "getArray[SYMBOL_species]" -> `AL::getArray[SYMBOL_species]`,
    "getDataView.prototype.buffer" -> `AL::getDataView.prototype.buffer`,
    "getDataView.prototype.byteLength" -> `AL::getDataView.prototype.byteLength`,
    "getDataView.prototype.byteOffset" -> `AL::getDataView.prototype.byteOffset`,
    "getMap.prototype.size" -> `AL::getMap.prototype.size`,
    "getMap[SYMBOL_species]" -> `AL::getMap[SYMBOL_species]`,
    "getPromise[SYMBOL_species]" -> `AL::getPromise[SYMBOL_species]`,
    "getRegExp.prototype.dotAll" -> `AL::getRegExp.prototype.dotAll`,
    "getRegExp.prototype.flags" -> `AL::getRegExp.prototype.flags`,
    "getRegExp.prototype.global" -> `AL::getRegExp.prototype.global`,
    "getRegExp.prototype.ignoreCase" -> `AL::getRegExp.prototype.ignoreCase`,
    "getRegExp.prototype.multiline" -> `AL::getRegExp.prototype.multiline`,
    "getRegExp.prototype.source" -> `AL::getRegExp.prototype.source`,
    "getRegExp.prototype.sticky" -> `AL::getRegExp.prototype.sticky`,
    "getRegExp.prototype.unicode" -> `AL::getRegExp.prototype.unicode`,
    "getRegExp[SYMBOL_species]" -> `AL::getRegExp[SYMBOL_species]`,
    "getSet.prototype.size" -> `AL::getSet.prototype.size`,
    "getSet[SYMBOL_species]" -> `AL::getSet[SYMBOL_species]`,
    "getSharedArrayBuffer.prototype.byteLength" -> `AL::getSharedArrayBuffer.prototype.byteLength`,
    "getSharedArrayBuffer[SYMBOL_species]" -> `AL::getSharedArrayBuffer[SYMBOL_species]`,
    "getSymbol.prototype.description" -> `AL::getSymbol.prototype.description`,
    "isFinite" -> `AL::isFinite`,
    "isNaN" -> `AL::isNaN`,
    "msFromTime" -> `AL::msFromTime`,
    "msPerDay" -> `AL::msPerDay`,
    "msPerHour" -> `AL::msPerHour`,
    "msPerMinute" -> `AL::msPerMinute`,
    "msPerSecond" -> `AL::msPerSecond`,
    "parseFloat" -> `AL::parseFloat`,
    "parseInt" -> `AL::parseInt`,
    "thisBigIntValue" -> `AL::thisBigIntValue`,
    "thisBooleanValue" -> `AL::thisBooleanValue`,
    "thisNumberValue" -> `AL::thisNumberValue`,
    "thisStringValue" -> `AL::thisStringValue`,
    "thisSymbolValue" -> `AL::thisSymbolValue`,
    "thisTimeValue" -> `AL::thisTimeValue`,
  )
}
