package kr.ac.kaist.ires.builtin

import kr.ac.kaist.ires.ir.Ty._
import kr.ac.kaist.ires.ir._
import kr.ac.kaist.ires.model._

// type modeling
object TyModel {
  lazy val infos: List[Info] = List( // // objects
    I("Object", Map(
      "GetPrototypeOf" -> `AL::OrdinaryObject.GetPrototypeOf`,
      "SetPrototypeOf" -> `AL::OrdinaryObject.SetPrototypeOf`,
      "IsExtensible" -> `AL::OrdinaryObject.IsExtensible`,
      "PreventExtensions" -> `AL::OrdinaryObject.PreventExtensions`,
      "GetOwnProperty" -> `AL::OrdinaryObject.GetOwnProperty`,
      "DefineOwnProperty" -> `AL::OrdinaryObject.DefineOwnProperty`,
      "HasProperty" -> `AL::OrdinaryObject.HasProperty`,
      "Get" -> `AL::OrdinaryObject.Get`,
      "Set" -> `AL::OrdinaryObject.Set`,
      "Delete" -> `AL::OrdinaryObject.Delete`,
      "OwnPropertyKeys" -> `AL::OrdinaryObject.OwnPropertyKeys`,
    )),
    I("OrdinaryObject", parent = "Object", Map()),
    I("FunctionObject", parent = "OrdinaryObject", Map()),
    I("ECMAScriptFunctionObject", parent = "FunctionObject", Map(
      "Call" -> `AL::ECMAScriptFunctionObject.Call`,
      "Construct" -> `AL::ECMAScriptFunctionObject.Construct`,
    )),
    I("BuiltinFunctionObject", parent = "FunctionObject", Map(
      "Call" -> `AL::BuiltinFunctionObject.Call`,
      "Construct" -> `AL::BuiltinFunctionObject.Construct`,
    )),
    I("BoundFunctionExoticObject", parent = "Object", Map(
      "Call" -> `AL::BoundFunctionExoticObject.Call`,
      "Construct" -> `AL::BoundFunctionExoticObject.Construct`,
    )),
    I("ArrayExoticObject", parent = "Object", Map(
      "DefineOwnProperty" -> `AL::ArrayExoticObject.DefineOwnProperty`,
    )),
    I("StringExoticObject", parent = "Object", Map(
      "GetOwnProperty" -> `AL::StringExoticObject.GetOwnProperty`,
      "DefineOwnProperty" -> `AL::StringExoticObject.DefineOwnProperty`,
      "OwnPropertyKeys" -> `AL::StringExoticObject.OwnPropertyKeys`,
    )),
    I("ArgumentsExoticObject", parent = "Object", Map(
      "GetOwnProperty" -> `AL::ArgumentsExoticObject.GetOwnProperty`,
      "DefineOwnProperty" -> `AL::ArgumentsExoticObject.DefineOwnProperty`,
      "Get" -> `AL::ArgumentsExoticObject.Get`,
      "Set" -> `AL::ArgumentsExoticObject.Set`,
      "Delete" -> `AL::ArgumentsExoticObject.Delete`,
    )),
    I("IntegerIndexedExoticObject", parent = "Object", Map(
      "GetOwnProperty" -> `AL::IntegerIndexedExoticObject.GetOwnProperty`,
      "HasProperty" -> `AL::IntegerIndexedExoticObject.HasProperty`,
      "DefineOwnProperty" -> `AL::IntegerIndexedExoticObject.DefineOwnProperty`,
      "Get" -> `AL::IntegerIndexedExoticObject.Get`,
      "Set" -> `AL::IntegerIndexedExoticObject.Set`,
      "Delete" -> `AL::IntegerIndexedExoticObject.Delete`,
      "OwnPropertyKeys" -> `AL::IntegerIndexedExoticObject.OwnPropertyKeys`,
    )),
    I("ImmutablePrototypeExoticObject", parent = "Object", Map(
      "SetPrototypeOf" -> `AL::ImmutablePrototypeExoticObject.SetPrototypeOf`,
    )),
    I("ProxyObject", parent = "Object", Map(
      "GetPrototypeOf" -> `AL::ProxyObject.GetPrototypeOf`,
      "SetPrototypeOf" -> `AL::ProxyObject.SetPrototypeOf`,
      "IsExtensible" -> `AL::ProxyObject.IsExtensible`,
      "PreventExtensions" -> `AL::ProxyObject.PreventExtensions`,
      "GetOwnProperty" -> `AL::ProxyObject.GetOwnProperty`,
      "DefineOwnProperty" -> `AL::ProxyObject.DefineOwnProperty`,
      "HasProperty" -> `AL::ProxyObject.HasProperty`,
      "Get" -> `AL::ProxyObject.Get`,
      "Set" -> `AL::ProxyObject.Set`,
      "Delete" -> `AL::ProxyObject.Delete`,
      "OwnPropertyKeys" -> `AL::ProxyObject.OwnPropertyKeys`,
      "Call" -> `AL::ProxyObject.Call`,
      "Construct" -> `AL::ProxyObject.Construct`,
    )),
    I("ArrayBufferObject", parent = "Object", Map()),
    I("BooleanObject", parent = "OrdinaryObject", Map()),
    I("BigIntObject", parent = "OrdinaryObject", Map()),
    I("NumberObject", parent = "OrdinaryObject", Map()),
    I("SymbolObject", parent = "OrdinaryObject", Map()),
    // special instances
    I("ForInIteratorInstance", parent = "OrdinaryObject", Map()),
    I("AsynFromSyncIteratorInstance", parent = "OrdinaryObject", Map()),
    I("PromiseInstance", parent = "OrdinaryObject", Map()),
    I("GeneratorInstance", parent = "OrdinaryObject", Map()),
    I("AsyncGeneratorInstance", parent = "OrdinaryObject", Map()),
    // environment records
    I("LexicalEnvironment", Map()),
    I("EnvironmentRecord", parent = "LexicalEnvironment", Map()),
    I("DeclarativeEnvironmentRecord", parent = "EnvironmentRecord", Map(
      "HasBinding" -> `AL::DeclarativeEnvironmentRecord.HasBinding`,
      "CreateMutableBinding" -> `AL::DeclarativeEnvironmentRecord.CreateMutableBinding`,
      "CreateImmutableBinding" -> `AL::DeclarativeEnvironmentRecord.CreateImmutableBinding`,
      "InitializeBinding" -> `AL::DeclarativeEnvironmentRecord.InitializeBinding`,
      "SetMutableBinding" -> `AL::DeclarativeEnvironmentRecord.SetMutableBinding`,
      "GetBindingValue" -> `AL::DeclarativeEnvironmentRecord.GetBindingValue`,
      "DeleteBinding" -> `AL::DeclarativeEnvironmentRecord.DeleteBinding`,
      "HasThisBinding" -> `AL::DeclarativeEnvironmentRecord.HasThisBinding`,
      "HasSuperBinding" -> `AL::DeclarativeEnvironmentRecord.HasSuperBinding`,
      "WithBaseObject" -> `AL::DeclarativeEnvironmentRecord.WithBaseObject`,
    )),
    I("ObjectEnvironmentRecord", parent = "EnvironmentRecord", Map(
      "HasBinding" -> `AL::ObjectEnvironmentRecord.HasBinding`,
      "CreateMutableBinding" -> `AL::ObjectEnvironmentRecord.CreateMutableBinding`,
      "InitializeBinding" -> `AL::ObjectEnvironmentRecord.InitializeBinding`,
      "SetMutableBinding" -> `AL::ObjectEnvironmentRecord.SetMutableBinding`,
      "GetBindingValue" -> `AL::ObjectEnvironmentRecord.GetBindingValue`,
      "DeleteBinding" -> `AL::ObjectEnvironmentRecord.DeleteBinding`,
      "HasThisBinding" -> `AL::ObjectEnvironmentRecord.HasThisBinding`,
      "HasSuperBinding" -> `AL::ObjectEnvironmentRecord.HasSuperBinding`,
      "WithBaseObject" -> `AL::ObjectEnvironmentRecord.WithBaseObject`,
    )),
    I("FunctionEnvironmentRecord", parent = "DeclarativeEnvironmentRecord", Map(
      "BindThisValue" -> `AL::FunctionEnvironmentRecord.BindThisValue`,
      "HasThisBinding" -> `AL::FunctionEnvironmentRecord.HasThisBinding`,
      "HasSuperBinding" -> `AL::FunctionEnvironmentRecord.HasSuperBinding`,
      "GetThisBinding" -> `AL::FunctionEnvironmentRecord.GetThisBinding`,
      "GetSuperBase" -> `AL::FunctionEnvironmentRecord.GetSuperBase`,
    )),
    I("GlobalEnvironmentRecord", parent = "EnvironmentRecord", Map(
      "HasBinding" -> `AL::GlobalEnvironmentRecord.HasBinding`,
      "CreateMutableBinding" -> `AL::GlobalEnvironmentRecord.CreateMutableBinding`,
      "CreateImmutableBinding" -> `AL::GlobalEnvironmentRecord.CreateImmutableBinding`,
      "InitializeBinding" -> `AL::GlobalEnvironmentRecord.InitializeBinding`,
      "SetMutableBinding" -> `AL::GlobalEnvironmentRecord.SetMutableBinding`,
      "GetBindingValue" -> `AL::GlobalEnvironmentRecord.GetBindingValue`,
      "DeleteBinding" -> `AL::GlobalEnvironmentRecord.DeleteBinding`,
      "HasThisBinding" -> `AL::GlobalEnvironmentRecord.HasThisBinding`,
      "HasSuperBinding" -> `AL::GlobalEnvironmentRecord.HasSuperBinding`,
      "WithBaseObject" -> `AL::GlobalEnvironmentRecord.WithBaseObject`,
      "GetThisBinding" -> `AL::GlobalEnvironmentRecord.GetThisBinding`,
      "HasVarDeclaration" -> `AL::GlobalEnvironmentRecord.HasVarDeclaration`,
      "HasLexicalDeclaration" -> `AL::GlobalEnvironmentRecord.HasLexicalDeclaration`,
      "HasRestrictedGlobalProperty" -> `AL::GlobalEnvironmentRecord.HasRestrictedGlobalProperty`,
      "CanDeclareGlobalVar" -> `AL::GlobalEnvironmentRecord.CanDeclareGlobalVar`,
      "CanDeclareGlobalFunction" -> `AL::GlobalEnvironmentRecord.CanDeclareGlobalFunction`,
      "CreateGlobalVarBinding" -> `AL::GlobalEnvironmentRecord.CreateGlobalVarBinding`,
      "CreateGlobalFunctionBinding" -> `AL::GlobalEnvironmentRecord.CreateGlobalFunctionBinding`,
    )),
  )
}
